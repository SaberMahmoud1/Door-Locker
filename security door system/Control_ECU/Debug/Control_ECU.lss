
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002384  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  00002384  00002418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800174  00800174  0000252c  2**0
                  ALLOC
  3 .stab         00002370  00000000  00000000  0000252c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013d9  00000000  00000000  0000489c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00005c75  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00005e15  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00006007  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00008412  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00009798  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a970  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000ab30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000ae26  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b794  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 d9 0e 	jmp	0x1db2	; 0x1db2 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 3d 10 	jmp	0x207a	; 0x207a <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e8       	ldi	r30, 0x84	; 132
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 38       	cpi	r26, 0x83	; 131
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 40 07 	call	0xe80	; 0xe80 <main>
      8a:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 89 11 	jmp	0x2312	; 0x2312 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a5 11 	jmp	0x234a	; 0x234a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 95 11 	jmp	0x232a	; 0x232a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b1 11 	jmp	0x2362	; 0x2362 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 95 11 	jmp	0x232a	; 0x232a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b1 11 	jmp	0x2362	; 0x2362 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 89 11 	jmp	0x2312	; 0x2312 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a5 11 	jmp	0x234a	; 0x234a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 95 11 	jmp	0x232a	; 0x232a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b1 11 	jmp	0x2362	; 0x2362 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 95 11 	jmp	0x232a	; 0x232a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b1 11 	jmp	0x2362	; 0x2362 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 95 11 	jmp	0x232a	; 0x232a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b1 11 	jmp	0x2362	; 0x2362 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 99 11 	jmp	0x2332	; 0x2332 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 b5 11 	jmp	0x236a	; 0x236a <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Buzzer_init>:
 *******************************************************************************/
#include"buzzer.h"
#include"common_macros.h"
#include"gpio.h"
void Buzzer_init()
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_BIN_ID,PIN_OUTPUT);
     e36:	82 e0       	ldi	r24, 0x02	; 2
     e38:	64 e0       	ldi	r22, 0x04	; 4
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_BIN_ID, LOGIC_LOW);
     e40:	82 e0       	ldi	r24, 0x02	; 2
     e42:	64 e0       	ldi	r22, 0x04	; 4
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <GPIO_writePin>
}
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <Buzzer_on>:
void Buzzer_on(void)
{
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_BIN_ID, LOGIC_HIGH);
     e58:	82 e0       	ldi	r24, 0x02	; 2
     e5a:	64 e0       	ldi	r22, 0x04	; 4
     e5c:	41 e0       	ldi	r20, 0x01	; 1
     e5e:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <GPIO_writePin>
}
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <Buzzer_off>:
void Buzzer_off(void)
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_BIN_ID, LOGIC_LOW);
     e70:	82 e0       	ldi	r24, 0x02	; 2
     e72:	64 e0       	ldi	r22, 0x04	; 4
     e74:	40 e0       	ldi	r20, 0x00	; 0
     e76:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <GPIO_writePin>
}
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <main>:
#include"std_types.h"
#include<avr/io.h>
#include"control_ECU.h"
#include<util/delay.h>
int main(void)
{
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	c4 55       	subi	r28, 0x54	; 84
     e8a:	d0 40       	sbci	r29, 0x00	; 0
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	de bf       	out	0x3e, r29	; 62
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	cd bf       	out	0x3d, r28	; 61
	/*config the uart to send info between the MCUs*/
	UART_ConfigType UART_config={BITS_8,Disabled,One_bit,BaudRate9600};
     e96:	ce 01       	movw	r24, r28
     e98:	ce 96       	adiw	r24, 0x3e	; 62
     e9a:	2d 96       	adiw	r28, 0x0d	; 13
     e9c:	9f af       	std	Y+63, r25	; 0x3f
     e9e:	8e af       	std	Y+62, r24	; 0x3e
     ea0:	2d 97       	sbiw	r28, 0x0d	; 13
     ea2:	ed e6       	ldi	r30, 0x6D	; 109
     ea4:	f1 e0       	ldi	r31, 0x01	; 1
     ea6:	2f 96       	adiw	r28, 0x0f	; 15
     ea8:	ff af       	std	Y+63, r31	; 0x3f
     eaa:	ee af       	std	Y+62, r30	; 0x3e
     eac:	2f 97       	sbiw	r28, 0x0f	; 15
     eae:	f7 e0       	ldi	r31, 0x07	; 7
     eb0:	60 96       	adiw	r28, 0x10	; 16
     eb2:	ff af       	std	Y+63, r31	; 0x3f
     eb4:	60 97       	sbiw	r28, 0x10	; 16
     eb6:	2f 96       	adiw	r28, 0x0f	; 15
     eb8:	ee ad       	ldd	r30, Y+62	; 0x3e
     eba:	ff ad       	ldd	r31, Y+63	; 0x3f
     ebc:	2f 97       	sbiw	r28, 0x0f	; 15
     ebe:	00 80       	ld	r0, Z
     ec0:	2f 96       	adiw	r28, 0x0f	; 15
     ec2:	8e ad       	ldd	r24, Y+62	; 0x3e
     ec4:	9f ad       	ldd	r25, Y+63	; 0x3f
     ec6:	2f 97       	sbiw	r28, 0x0f	; 15
     ec8:	01 96       	adiw	r24, 0x01	; 1
     eca:	2f 96       	adiw	r28, 0x0f	; 15
     ecc:	9f af       	std	Y+63, r25	; 0x3f
     ece:	8e af       	std	Y+62, r24	; 0x3e
     ed0:	2f 97       	sbiw	r28, 0x0f	; 15
     ed2:	2d 96       	adiw	r28, 0x0d	; 13
     ed4:	ee ad       	ldd	r30, Y+62	; 0x3e
     ed6:	ff ad       	ldd	r31, Y+63	; 0x3f
     ed8:	2d 97       	sbiw	r28, 0x0d	; 13
     eda:	00 82       	st	Z, r0
     edc:	2d 96       	adiw	r28, 0x0d	; 13
     ede:	8e ad       	ldd	r24, Y+62	; 0x3e
     ee0:	9f ad       	ldd	r25, Y+63	; 0x3f
     ee2:	2d 97       	sbiw	r28, 0x0d	; 13
     ee4:	01 96       	adiw	r24, 0x01	; 1
     ee6:	2d 96       	adiw	r28, 0x0d	; 13
     ee8:	9f af       	std	Y+63, r25	; 0x3f
     eea:	8e af       	std	Y+62, r24	; 0x3e
     eec:	2d 97       	sbiw	r28, 0x0d	; 13
     eee:	60 96       	adiw	r28, 0x10	; 16
     ef0:	9f ad       	ldd	r25, Y+63	; 0x3f
     ef2:	60 97       	sbiw	r28, 0x10	; 16
     ef4:	91 50       	subi	r25, 0x01	; 1
     ef6:	60 96       	adiw	r28, 0x10	; 16
     ef8:	9f af       	std	Y+63, r25	; 0x3f
     efa:	60 97       	sbiw	r28, 0x10	; 16
     efc:	60 96       	adiw	r28, 0x10	; 16
     efe:	ef ad       	ldd	r30, Y+63	; 0x3f
     f00:	60 97       	sbiw	r28, 0x10	; 16
     f02:	ee 23       	and	r30, r30
     f04:	c1 f6       	brne	.-80     	; 0xeb6 <main+0x36>
	/*config the I2C*/
	TWI_ConfigType TWI_config={0b00000010,400000};
     f06:	ce 01       	movw	r24, r28
     f08:	8b 5b       	subi	r24, 0xBB	; 187
     f0a:	9f 4f       	sbci	r25, 0xFF	; 255
     f0c:	62 96       	adiw	r28, 0x12	; 18
     f0e:	9f af       	std	Y+63, r25	; 0x3f
     f10:	8e af       	std	Y+62, r24	; 0x3e
     f12:	62 97       	sbiw	r28, 0x12	; 18
     f14:	88 e6       	ldi	r24, 0x68	; 104
     f16:	91 e0       	ldi	r25, 0x01	; 1
     f18:	64 96       	adiw	r28, 0x14	; 20
     f1a:	9f af       	std	Y+63, r25	; 0x3f
     f1c:	8e af       	std	Y+62, r24	; 0x3e
     f1e:	64 97       	sbiw	r28, 0x14	; 20
     f20:	95 e0       	ldi	r25, 0x05	; 5
     f22:	65 96       	adiw	r28, 0x15	; 21
     f24:	9f af       	std	Y+63, r25	; 0x3f
     f26:	65 97       	sbiw	r28, 0x15	; 21
     f28:	64 96       	adiw	r28, 0x14	; 20
     f2a:	ee ad       	ldd	r30, Y+62	; 0x3e
     f2c:	ff ad       	ldd	r31, Y+63	; 0x3f
     f2e:	64 97       	sbiw	r28, 0x14	; 20
     f30:	00 80       	ld	r0, Z
     f32:	64 96       	adiw	r28, 0x14	; 20
     f34:	8e ad       	ldd	r24, Y+62	; 0x3e
     f36:	9f ad       	ldd	r25, Y+63	; 0x3f
     f38:	64 97       	sbiw	r28, 0x14	; 20
     f3a:	01 96       	adiw	r24, 0x01	; 1
     f3c:	64 96       	adiw	r28, 0x14	; 20
     f3e:	9f af       	std	Y+63, r25	; 0x3f
     f40:	8e af       	std	Y+62, r24	; 0x3e
     f42:	64 97       	sbiw	r28, 0x14	; 20
     f44:	62 96       	adiw	r28, 0x12	; 18
     f46:	ee ad       	ldd	r30, Y+62	; 0x3e
     f48:	ff ad       	ldd	r31, Y+63	; 0x3f
     f4a:	62 97       	sbiw	r28, 0x12	; 18
     f4c:	00 82       	st	Z, r0
     f4e:	62 96       	adiw	r28, 0x12	; 18
     f50:	8e ad       	ldd	r24, Y+62	; 0x3e
     f52:	9f ad       	ldd	r25, Y+63	; 0x3f
     f54:	62 97       	sbiw	r28, 0x12	; 18
     f56:	01 96       	adiw	r24, 0x01	; 1
     f58:	62 96       	adiw	r28, 0x12	; 18
     f5a:	9f af       	std	Y+63, r25	; 0x3f
     f5c:	8e af       	std	Y+62, r24	; 0x3e
     f5e:	62 97       	sbiw	r28, 0x12	; 18
     f60:	65 96       	adiw	r28, 0x15	; 21
     f62:	9f ad       	ldd	r25, Y+63	; 0x3f
     f64:	65 97       	sbiw	r28, 0x15	; 21
     f66:	91 50       	subi	r25, 0x01	; 1
     f68:	65 96       	adiw	r28, 0x15	; 21
     f6a:	9f af       	std	Y+63, r25	; 0x3f
     f6c:	65 97       	sbiw	r28, 0x15	; 21
     f6e:	65 96       	adiw	r28, 0x15	; 21
     f70:	ef ad       	ldd	r30, Y+63	; 0x3f
     f72:	65 97       	sbiw	r28, 0x15	; 21
     f74:	ee 23       	and	r30, r30
     f76:	c1 f6       	brne	.-80     	; 0xf28 <main+0xa8>
	/*initialize the buzzer*/
	Buzzer_init();
     f78:	0e 94 17 07 	call	0xe2e	; 0xe2e <Buzzer_init>
	/*initialize the motor*/
	DcMotor_Init();
     f7c:	0e 94 44 0a 	call	0x1488	; 0x1488 <DcMotor_Init>
	/*enable the global interrupts*/
	SET_BIT(SREG,7);
     f80:	af e5       	ldi	r26, 0x5F	; 95
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	ef e5       	ldi	r30, 0x5F	; 95
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	80 68       	ori	r24, 0x80	; 128
     f8c:	8c 93       	st	X, r24
	/*initialize the uart*/
	UART_init(&UART_config);
     f8e:	ce 01       	movw	r24, r28
     f90:	ce 96       	adiw	r24, 0x3e	; 62
     f92:	0e 94 67 10 	call	0x20ce	; 0x20ce <UART_init>
	/*initialize the I2C*/
	TWI_init(&TWI_config);
     f96:	ce 01       	movw	r24, r28
     f98:	8b 5b       	subi	r24, 0xBB	; 187
     f9a:	9f 4f       	sbci	r25, 0xFF	; 255
     f9c:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <TWI_init>
	/*variable  to store the data read from the EEBROM */
	uint8 readed_data;
	/*g_password[0] is initially trash as we do not half operation yet*/
	g_PASSWORD[0]=TRASH_BYTE;
     fa0:	89 e0       	ldi	r24, 0x09	; 9
     fa2:	80 93 78 01 	sts	0x0178, r24
	while(1)
	{
		if(g_PASSWORD[0]==1)  /*if the first byte is 1 check if the two passwords are the same and insert the password in the EEPROM if true*/
     fa6:	80 91 78 01 	lds	r24, 0x0178
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	09 f0       	breq	.+2      	; 0xfb0 <main+0x130>
     fae:	44 c0       	rjmp	.+136    	; 0x1038 <main+0x1b8>
		{
			while(flag!=11);	/*wait for the first mcu to send the password*/
     fb0:	80 91 76 01 	lds	r24, 0x0176
     fb4:	8b 30       	cpi	r24, 0x0B	; 11
     fb6:	e1 f7       	brne	.-8      	; 0xfb0 <main+0x130>
			boolean check=TRUE;	/*to send byte back tells the other MCU if the passwords are matched*/
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	8d af       	std	Y+61, r24	; 0x3d
			for(uint8 i=FIRST_DIGIT;i<6;i++)
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	8c af       	std	Y+60, r24	; 0x3c
     fc0:	16 c0       	rjmp	.+44     	; 0xfee <main+0x16e>
			{
				if(g_PASSWORD[i]!=g_PASSWORD[5+i])		/*compare between the two passwords*/
     fc2:	8c ad       	ldd	r24, Y+60	; 0x3c
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	fc 01       	movw	r30, r24
     fca:	e8 58       	subi	r30, 0x88	; 136
     fcc:	fe 4f       	sbci	r31, 0xFE	; 254
     fce:	20 81       	ld	r18, Z
     fd0:	8c ad       	ldd	r24, Y+60	; 0x3c
     fd2:	88 2f       	mov	r24, r24
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	05 96       	adiw	r24, 0x05	; 5
     fd8:	fc 01       	movw	r30, r24
     fda:	e8 58       	subi	r30, 0x88	; 136
     fdc:	fe 4f       	sbci	r31, 0xFE	; 254
     fde:	80 81       	ld	r24, Z
     fe0:	28 17       	cp	r18, r24
     fe2:	11 f0       	breq	.+4      	; 0xfe8 <main+0x168>
				{
					check=FALSE;
     fe4:	1d ae       	std	Y+61, r1	; 0x3d
     fe6:	06 c0       	rjmp	.+12     	; 0xff4 <main+0x174>
	{
		if(g_PASSWORD[0]==1)  /*if the first byte is 1 check if the two passwords are the same and insert the password in the EEPROM if true*/
		{
			while(flag!=11);	/*wait for the first mcu to send the password*/
			boolean check=TRUE;	/*to send byte back tells the other MCU if the passwords are matched*/
			for(uint8 i=FIRST_DIGIT;i<6;i++)
     fe8:	8c ad       	ldd	r24, Y+60	; 0x3c
     fea:	8f 5f       	subi	r24, 0xFF	; 255
     fec:	8c af       	std	Y+60, r24	; 0x3c
     fee:	8c ad       	ldd	r24, Y+60	; 0x3c
     ff0:	86 30       	cpi	r24, 0x06	; 6
     ff2:	38 f3       	brcs	.-50     	; 0xfc2 <main+0x142>
				{
					check=FALSE;
					break;
				}
			}
			UART_sendByte(check);	/*send byte to tell the HMI if the passwords are matched or not*/
     ff4:	8d ad       	ldd	r24, Y+61	; 0x3d
     ff6:	0e 94 da 10 	call	0x21b4	; 0x21b4 <UART_sendByte>
			if(check)
     ffa:	8d ad       	ldd	r24, Y+61	; 0x3d
     ffc:	88 23       	and	r24, r24
     ffe:	c9 f0       	breq	.+50     	; 0x1032 <main+0x1b2>
			{for(uint8 i=0;i<5;++i)
    1000:	1b ae       	std	Y+59, r1	; 0x3b
    1002:	14 c0       	rjmp	.+40     	; 0x102c <main+0x1ac>
			{
				EEPROM_writeByte(0x0311+i,g_PASSWORD[i]); 	/*writes the password in the EEPROM*/
    1004:	8b ad       	ldd	r24, Y+59	; 0x3b
    1006:	88 2f       	mov	r24, r24
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	8f 5e       	subi	r24, 0xEF	; 239
    100c:	9c 4f       	sbci	r25, 0xFC	; 252
    100e:	ac 01       	movw	r20, r24
    1010:	8b ad       	ldd	r24, Y+59	; 0x3b
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	fc 01       	movw	r30, r24
    1018:	e8 58       	subi	r30, 0x88	; 136
    101a:	fe 4f       	sbci	r31, 0xFE	; 254
    101c:	20 81       	ld	r18, Z
    101e:	ca 01       	movw	r24, r20
    1020:	62 2f       	mov	r22, r18
    1022:	0e 94 c7 0a 	call	0x158e	; 0x158e <EEPROM_writeByte>
					break;
				}
			}
			UART_sendByte(check);	/*send byte to tell the HMI if the passwords are matched or not*/
			if(check)
			{for(uint8 i=0;i<5;++i)
    1026:	8b ad       	ldd	r24, Y+59	; 0x3b
    1028:	8f 5f       	subi	r24, 0xFF	; 255
    102a:	8b af       	std	Y+59, r24	; 0x3b
    102c:	8b ad       	ldd	r24, Y+59	; 0x3b
    102e:	85 30       	cpi	r24, 0x05	; 5
    1030:	48 f3       	brcs	.-46     	; 0x1004 <main+0x184>
			{
				EEPROM_writeByte(0x0311+i,g_PASSWORD[i]); 	/*writes the password in the EEPROM*/
			}
			}
			flag=0;
    1032:	10 92 76 01 	sts	0x0176, r1
    1036:	24 c2       	rjmp	.+1096   	; 0x1480 <main+0x600>
		}

		else if(g_PASSWORD[0]==2)		/*if the first bite is 2 compare the password with the password in EEPROM */
    1038:	80 91 78 01 	lds	r24, 0x0178
    103c:	82 30       	cpi	r24, 0x02	; 2
    103e:	79 f5       	brne	.+94     	; 0x109e <main+0x21e>
		{
			while(flag!=6);
    1040:	80 91 76 01 	lds	r24, 0x0176
    1044:	86 30       	cpi	r24, 0x06	; 6
    1046:	e1 f7       	brne	.-8      	; 0x1040 <main+0x1c0>
			boolean confirm=TRUE;	/*variable we will send it to the other MCU to confirm the password is equal to the pass stored in EEPROM or not*/
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	8a af       	std	Y+58, r24	; 0x3a
			for(uint8 i=FIRST_DIGIT;i<PASSWORD_DIGITS;i++)
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	89 af       	std	Y+57, r24	; 0x39
    1050:	1d c0       	rjmp	.+58     	; 0x108c <main+0x20c>
			{
				EEPROM_readByte((PASSWORD_ADDRESS+i), &readed_data);
    1052:	89 ad       	ldd	r24, Y+57	; 0x39
    1054:	88 2f       	mov	r24, r24
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	8f 5e       	subi	r24, 0xEF	; 239
    105a:	9c 4f       	sbci	r25, 0xFC	; 252
    105c:	9e 01       	movw	r18, r28
    105e:	26 5b       	subi	r18, 0xB6	; 182
    1060:	3f 4f       	sbci	r19, 0xFF	; 255
    1062:	b9 01       	movw	r22, r18
    1064:	0e 94 08 0b 	call	0x1610	; 0x1610 <EEPROM_readByte>
				if(readed_data!=g_PASSWORD[i])
    1068:	89 ad       	ldd	r24, Y+57	; 0x39
    106a:	88 2f       	mov	r24, r24
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	fc 01       	movw	r30, r24
    1070:	e8 58       	subi	r30, 0x88	; 136
    1072:	fe 4f       	sbci	r31, 0xFE	; 254
    1074:	90 81       	ld	r25, Z
    1076:	fe 01       	movw	r30, r28
    1078:	e6 5b       	subi	r30, 0xB6	; 182
    107a:	ff 4f       	sbci	r31, 0xFF	; 255
    107c:	80 81       	ld	r24, Z
    107e:	98 17       	cp	r25, r24
    1080:	11 f0       	breq	.+4      	; 0x1086 <main+0x206>
				{
					confirm=FALSE;
    1082:	1a ae       	std	Y+58, r1	; 0x3a
    1084:	06 c0       	rjmp	.+12     	; 0x1092 <main+0x212>

		else if(g_PASSWORD[0]==2)		/*if the first bite is 2 compare the password with the password in EEPROM */
		{
			while(flag!=6);
			boolean confirm=TRUE;	/*variable we will send it to the other MCU to confirm the password is equal to the pass stored in EEPROM or not*/
			for(uint8 i=FIRST_DIGIT;i<PASSWORD_DIGITS;i++)
    1086:	89 ad       	ldd	r24, Y+57	; 0x39
    1088:	8f 5f       	subi	r24, 0xFF	; 255
    108a:	89 af       	std	Y+57, r24	; 0x39
    108c:	89 ad       	ldd	r24, Y+57	; 0x39
    108e:	86 30       	cpi	r24, 0x06	; 6
    1090:	00 f3       	brcs	.-64     	; 0x1052 <main+0x1d2>
				{
					confirm=FALSE;
					break;
				}
			}
			UART_sendByte(confirm);
    1092:	8a ad       	ldd	r24, Y+58	; 0x3a
    1094:	0e 94 da 10 	call	0x21b4	; 0x21b4 <UART_sendByte>
			flag=0;
    1098:	10 92 76 01 	sts	0x0176, r1
    109c:	f1 c1       	rjmp	.+994    	; 0x1480 <main+0x600>
		}
		else if(g_PASSWORD[0]==3)	/*if first byte in the password array is 3 we run the buzzer*/
    109e:	80 91 78 01 	lds	r24, 0x0178
    10a2:	83 30       	cpi	r24, 0x03	; 3
    10a4:	09 f0       	breq	.+2      	; 0x10a8 <main+0x228>
    10a6:	7c c0       	rjmp	.+248    	; 0x11a0 <main+0x320>
		{
			Buzzer_on();
    10a8:	0e 94 28 07 	call	0xe50	; 0xe50 <Buzzer_on>
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	90 e6       	ldi	r25, 0x60	; 96
    10b0:	aa e6       	ldi	r26, 0x6A	; 106
    10b2:	b7 e4       	ldi	r27, 0x47	; 71
    10b4:	8d ab       	std	Y+53, r24	; 0x35
    10b6:	9e ab       	std	Y+54, r25	; 0x36
    10b8:	af ab       	std	Y+55, r26	; 0x37
    10ba:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10bc:	6d a9       	ldd	r22, Y+53	; 0x35
    10be:	7e a9       	ldd	r23, Y+54	; 0x36
    10c0:	8f a9       	ldd	r24, Y+55	; 0x37
    10c2:	98 ad       	ldd	r25, Y+56	; 0x38
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	4a ef       	ldi	r20, 0xFA	; 250
    10ca:	54 e4       	ldi	r21, 0x44	; 68
    10cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d0:	dc 01       	movw	r26, r24
    10d2:	cb 01       	movw	r24, r22
    10d4:	89 ab       	std	Y+49, r24	; 0x31
    10d6:	9a ab       	std	Y+50, r25	; 0x32
    10d8:	ab ab       	std	Y+51, r26	; 0x33
    10da:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    10dc:	69 a9       	ldd	r22, Y+49	; 0x31
    10de:	7a a9       	ldd	r23, Y+50	; 0x32
    10e0:	8b a9       	ldd	r24, Y+51	; 0x33
    10e2:	9c a9       	ldd	r25, Y+52	; 0x34
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	40 e8       	ldi	r20, 0x80	; 128
    10ea:	5f e3       	ldi	r21, 0x3F	; 63
    10ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10f0:	88 23       	and	r24, r24
    10f2:	2c f4       	brge	.+10     	; 0x10fe <main+0x27e>
		__ticks = 1;
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	98 ab       	std	Y+48, r25	; 0x30
    10fa:	8f a7       	std	Y+47, r24	; 0x2f
    10fc:	3f c0       	rjmp	.+126    	; 0x117c <main+0x2fc>
	else if (__tmp > 65535)
    10fe:	69 a9       	ldd	r22, Y+49	; 0x31
    1100:	7a a9       	ldd	r23, Y+50	; 0x32
    1102:	8b a9       	ldd	r24, Y+51	; 0x33
    1104:	9c a9       	ldd	r25, Y+52	; 0x34
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	3f ef       	ldi	r19, 0xFF	; 255
    110a:	4f e7       	ldi	r20, 0x7F	; 127
    110c:	57 e4       	ldi	r21, 0x47	; 71
    110e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1112:	18 16       	cp	r1, r24
    1114:	4c f5       	brge	.+82     	; 0x1168 <main+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1116:	6d a9       	ldd	r22, Y+53	; 0x35
    1118:	7e a9       	ldd	r23, Y+54	; 0x36
    111a:	8f a9       	ldd	r24, Y+55	; 0x37
    111c:	98 ad       	ldd	r25, Y+56	; 0x38
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	40 e2       	ldi	r20, 0x20	; 32
    1124:	51 e4       	ldi	r21, 0x41	; 65
    1126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	bc 01       	movw	r22, r24
    1130:	cd 01       	movw	r24, r26
    1132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1136:	dc 01       	movw	r26, r24
    1138:	cb 01       	movw	r24, r22
    113a:	98 ab       	std	Y+48, r25	; 0x30
    113c:	8f a7       	std	Y+47, r24	; 0x2f
    113e:	0f c0       	rjmp	.+30     	; 0x115e <main+0x2de>
    1140:	88 ec       	ldi	r24, 0xC8	; 200
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	9e a7       	std	Y+46, r25	; 0x2e
    1146:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1148:	8d a5       	ldd	r24, Y+45	; 0x2d
    114a:	9e a5       	ldd	r25, Y+46	; 0x2e
    114c:	01 97       	sbiw	r24, 0x01	; 1
    114e:	f1 f7       	brne	.-4      	; 0x114c <main+0x2cc>
    1150:	9e a7       	std	Y+46, r25	; 0x2e
    1152:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1154:	8f a5       	ldd	r24, Y+47	; 0x2f
    1156:	98 a9       	ldd	r25, Y+48	; 0x30
    1158:	01 97       	sbiw	r24, 0x01	; 1
    115a:	98 ab       	std	Y+48, r25	; 0x30
    115c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    115e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1160:	98 a9       	ldd	r25, Y+48	; 0x30
    1162:	00 97       	sbiw	r24, 0x00	; 0
    1164:	69 f7       	brne	.-38     	; 0x1140 <main+0x2c0>
    1166:	14 c0       	rjmp	.+40     	; 0x1190 <main+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1168:	69 a9       	ldd	r22, Y+49	; 0x31
    116a:	7a a9       	ldd	r23, Y+50	; 0x32
    116c:	8b a9       	ldd	r24, Y+51	; 0x33
    116e:	9c a9       	ldd	r25, Y+52	; 0x34
    1170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1174:	dc 01       	movw	r26, r24
    1176:	cb 01       	movw	r24, r22
    1178:	98 ab       	std	Y+48, r25	; 0x30
    117a:	8f a7       	std	Y+47, r24	; 0x2f
    117c:	8f a5       	ldd	r24, Y+47	; 0x2f
    117e:	98 a9       	ldd	r25, Y+48	; 0x30
    1180:	9c a7       	std	Y+44, r25	; 0x2c
    1182:	8b a7       	std	Y+43, r24	; 0x2b
    1184:	8b a5       	ldd	r24, Y+43	; 0x2b
    1186:	9c a5       	ldd	r25, Y+44	; 0x2c
    1188:	01 97       	sbiw	r24, 0x01	; 1
    118a:	f1 f7       	brne	.-4      	; 0x1188 <main+0x308>
    118c:	9c a7       	std	Y+44, r25	; 0x2c
    118e:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(60000);
			Buzzer_off();
    1190:	0e 94 34 07 	call	0xe68	; 0xe68 <Buzzer_off>
			UART_sendByte(1);
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	0e 94 da 10 	call	0x21b4	; 0x21b4 <UART_sendByte>
			flag=0;
    119a:	10 92 76 01 	sts	0x0176, r1
    119e:	70 c1       	rjmp	.+736    	; 0x1480 <main+0x600>
		}
		else if(g_PASSWORD[0]==4)	/*if first byte in the password array is 4 we run the dc_MOTOR*/
    11a0:	80 91 78 01 	lds	r24, 0x0178
    11a4:	84 30       	cpi	r24, 0x04	; 4
    11a6:	09 f0       	breq	.+2      	; 0x11aa <main+0x32a>
    11a8:	6b c1       	rjmp	.+726    	; 0x1480 <main+0x600>
		{
			DcMotor_Rotate(CW, FullSpeed);
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	64 e6       	ldi	r22, 0x64	; 100
    11ae:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <DcMotor_Rotate>
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e6       	ldi	r25, 0x60	; 96
    11b6:	aa e6       	ldi	r26, 0x6A	; 106
    11b8:	b6 e4       	ldi	r27, 0x46	; 70
    11ba:	8f a3       	std	Y+39, r24	; 0x27
    11bc:	98 a7       	std	Y+40, r25	; 0x28
    11be:	a9 a7       	std	Y+41, r26	; 0x29
    11c0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11c2:	6f a1       	ldd	r22, Y+39	; 0x27
    11c4:	78 a5       	ldd	r23, Y+40	; 0x28
    11c6:	89 a5       	ldd	r24, Y+41	; 0x29
    11c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	4a ef       	ldi	r20, 0xFA	; 250
    11d0:	54 e4       	ldi	r21, 0x44	; 68
    11d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	8b a3       	std	Y+35, r24	; 0x23
    11dc:	9c a3       	std	Y+36, r25	; 0x24
    11de:	ad a3       	std	Y+37, r26	; 0x25
    11e0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    11e2:	6b a1       	ldd	r22, Y+35	; 0x23
    11e4:	7c a1       	ldd	r23, Y+36	; 0x24
    11e6:	8d a1       	ldd	r24, Y+37	; 0x25
    11e8:	9e a1       	ldd	r25, Y+38	; 0x26
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	40 e8       	ldi	r20, 0x80	; 128
    11f0:	5f e3       	ldi	r21, 0x3F	; 63
    11f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11f6:	88 23       	and	r24, r24
    11f8:	2c f4       	brge	.+10     	; 0x1204 <main+0x384>
		__ticks = 1;
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	9a a3       	std	Y+34, r25	; 0x22
    1200:	89 a3       	std	Y+33, r24	; 0x21
    1202:	3f c0       	rjmp	.+126    	; 0x1282 <main+0x402>
	else if (__tmp > 65535)
    1204:	6b a1       	ldd	r22, Y+35	; 0x23
    1206:	7c a1       	ldd	r23, Y+36	; 0x24
    1208:	8d a1       	ldd	r24, Y+37	; 0x25
    120a:	9e a1       	ldd	r25, Y+38	; 0x26
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	3f ef       	ldi	r19, 0xFF	; 255
    1210:	4f e7       	ldi	r20, 0x7F	; 127
    1212:	57 e4       	ldi	r21, 0x47	; 71
    1214:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1218:	18 16       	cp	r1, r24
    121a:	4c f5       	brge	.+82     	; 0x126e <main+0x3ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    121c:	6f a1       	ldd	r22, Y+39	; 0x27
    121e:	78 a5       	ldd	r23, Y+40	; 0x28
    1220:	89 a5       	ldd	r24, Y+41	; 0x29
    1222:	9a a5       	ldd	r25, Y+42	; 0x2a
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	40 e2       	ldi	r20, 0x20	; 32
    122a:	51 e4       	ldi	r21, 0x41	; 65
    122c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	bc 01       	movw	r22, r24
    1236:	cd 01       	movw	r24, r26
    1238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	9a a3       	std	Y+34, r25	; 0x22
    1242:	89 a3       	std	Y+33, r24	; 0x21
    1244:	0f c0       	rjmp	.+30     	; 0x1264 <main+0x3e4>
    1246:	88 ec       	ldi	r24, 0xC8	; 200
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	98 a3       	std	Y+32, r25	; 0x20
    124c:	8f 8f       	std	Y+31, r24	; 0x1f
    124e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1250:	98 a1       	ldd	r25, Y+32	; 0x20
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	f1 f7       	brne	.-4      	; 0x1252 <main+0x3d2>
    1256:	98 a3       	std	Y+32, r25	; 0x20
    1258:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    125a:	89 a1       	ldd	r24, Y+33	; 0x21
    125c:	9a a1       	ldd	r25, Y+34	; 0x22
    125e:	01 97       	sbiw	r24, 0x01	; 1
    1260:	9a a3       	std	Y+34, r25	; 0x22
    1262:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1264:	89 a1       	ldd	r24, Y+33	; 0x21
    1266:	9a a1       	ldd	r25, Y+34	; 0x22
    1268:	00 97       	sbiw	r24, 0x00	; 0
    126a:	69 f7       	brne	.-38     	; 0x1246 <main+0x3c6>
    126c:	14 c0       	rjmp	.+40     	; 0x1296 <main+0x416>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    126e:	6b a1       	ldd	r22, Y+35	; 0x23
    1270:	7c a1       	ldd	r23, Y+36	; 0x24
    1272:	8d a1       	ldd	r24, Y+37	; 0x25
    1274:	9e a1       	ldd	r25, Y+38	; 0x26
    1276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	9a a3       	std	Y+34, r25	; 0x22
    1280:	89 a3       	std	Y+33, r24	; 0x21
    1282:	89 a1       	ldd	r24, Y+33	; 0x21
    1284:	9a a1       	ldd	r25, Y+34	; 0x22
    1286:	9e 8f       	std	Y+30, r25	; 0x1e
    1288:	8d 8f       	std	Y+29, r24	; 0x1d
    128a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    128c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    128e:	01 97       	sbiw	r24, 0x01	; 1
    1290:	f1 f7       	brne	.-4      	; 0x128e <main+0x40e>
    1292:	9e 8f       	std	Y+30, r25	; 0x1e
    1294:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(15000);
			DcMotor_Rotate(CW, ZeroSpeed);
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	60 e0       	ldi	r22, 0x00	; 0
    129a:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <DcMotor_Rotate>
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	90 e8       	ldi	r25, 0x80	; 128
    12a2:	ab e3       	ldi	r26, 0x3B	; 59
    12a4:	b5 e4       	ldi	r27, 0x45	; 69
    12a6:	89 8f       	std	Y+25, r24	; 0x19
    12a8:	9a 8f       	std	Y+26, r25	; 0x1a
    12aa:	ab 8f       	std	Y+27, r26	; 0x1b
    12ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ae:	69 8d       	ldd	r22, Y+25	; 0x19
    12b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	4a ef       	ldi	r20, 0xFA	; 250
    12bc:	54 e4       	ldi	r21, 0x44	; 68
    12be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	8d 8b       	std	Y+21, r24	; 0x15
    12c8:	9e 8b       	std	Y+22, r25	; 0x16
    12ca:	af 8b       	std	Y+23, r26	; 0x17
    12cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12ce:	6d 89       	ldd	r22, Y+21	; 0x15
    12d0:	7e 89       	ldd	r23, Y+22	; 0x16
    12d2:	8f 89       	ldd	r24, Y+23	; 0x17
    12d4:	98 8d       	ldd	r25, Y+24	; 0x18
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	40 e8       	ldi	r20, 0x80	; 128
    12dc:	5f e3       	ldi	r21, 0x3F	; 63
    12de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12e2:	88 23       	and	r24, r24
    12e4:	2c f4       	brge	.+10     	; 0x12f0 <main+0x470>
		__ticks = 1;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	9c 8b       	std	Y+20, r25	; 0x14
    12ec:	8b 8b       	std	Y+19, r24	; 0x13
    12ee:	3f c0       	rjmp	.+126    	; 0x136e <main+0x4ee>
	else if (__tmp > 65535)
    12f0:	6d 89       	ldd	r22, Y+21	; 0x15
    12f2:	7e 89       	ldd	r23, Y+22	; 0x16
    12f4:	8f 89       	ldd	r24, Y+23	; 0x17
    12f6:	98 8d       	ldd	r25, Y+24	; 0x18
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	3f ef       	ldi	r19, 0xFF	; 255
    12fc:	4f e7       	ldi	r20, 0x7F	; 127
    12fe:	57 e4       	ldi	r21, 0x47	; 71
    1300:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1304:	18 16       	cp	r1, r24
    1306:	4c f5       	brge	.+82     	; 0x135a <main+0x4da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1308:	69 8d       	ldd	r22, Y+25	; 0x19
    130a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    130c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    130e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	40 e2       	ldi	r20, 0x20	; 32
    1316:	51 e4       	ldi	r21, 0x41	; 65
    1318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	bc 01       	movw	r22, r24
    1322:	cd 01       	movw	r24, r26
    1324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	9c 8b       	std	Y+20, r25	; 0x14
    132e:	8b 8b       	std	Y+19, r24	; 0x13
    1330:	0f c0       	rjmp	.+30     	; 0x1350 <main+0x4d0>
    1332:	88 ec       	ldi	r24, 0xC8	; 200
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	9a 8b       	std	Y+18, r25	; 0x12
    1338:	89 8b       	std	Y+17, r24	; 0x11
    133a:	89 89       	ldd	r24, Y+17	; 0x11
    133c:	9a 89       	ldd	r25, Y+18	; 0x12
    133e:	01 97       	sbiw	r24, 0x01	; 1
    1340:	f1 f7       	brne	.-4      	; 0x133e <main+0x4be>
    1342:	9a 8b       	std	Y+18, r25	; 0x12
    1344:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1346:	8b 89       	ldd	r24, Y+19	; 0x13
    1348:	9c 89       	ldd	r25, Y+20	; 0x14
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	9c 8b       	std	Y+20, r25	; 0x14
    134e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1350:	8b 89       	ldd	r24, Y+19	; 0x13
    1352:	9c 89       	ldd	r25, Y+20	; 0x14
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	69 f7       	brne	.-38     	; 0x1332 <main+0x4b2>
    1358:	14 c0       	rjmp	.+40     	; 0x1382 <main+0x502>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    135a:	6d 89       	ldd	r22, Y+21	; 0x15
    135c:	7e 89       	ldd	r23, Y+22	; 0x16
    135e:	8f 89       	ldd	r24, Y+23	; 0x17
    1360:	98 8d       	ldd	r25, Y+24	; 0x18
    1362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	9c 8b       	std	Y+20, r25	; 0x14
    136c:	8b 8b       	std	Y+19, r24	; 0x13
    136e:	8b 89       	ldd	r24, Y+19	; 0x13
    1370:	9c 89       	ldd	r25, Y+20	; 0x14
    1372:	98 8b       	std	Y+16, r25	; 0x10
    1374:	8f 87       	std	Y+15, r24	; 0x0f
    1376:	8f 85       	ldd	r24, Y+15	; 0x0f
    1378:	98 89       	ldd	r25, Y+16	; 0x10
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	f1 f7       	brne	.-4      	; 0x137a <main+0x4fa>
    137e:	98 8b       	std	Y+16, r25	; 0x10
    1380:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(3000);
			DcMotor_Rotate(A_CW, FullSpeed);
    1382:	82 e0       	ldi	r24, 0x02	; 2
    1384:	64 e6       	ldi	r22, 0x64	; 100
    1386:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <DcMotor_Rotate>
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	90 e6       	ldi	r25, 0x60	; 96
    138e:	aa e6       	ldi	r26, 0x6A	; 106
    1390:	b6 e4       	ldi	r27, 0x46	; 70
    1392:	8b 87       	std	Y+11, r24	; 0x0b
    1394:	9c 87       	std	Y+12, r25	; 0x0c
    1396:	ad 87       	std	Y+13, r26	; 0x0d
    1398:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    139a:	6b 85       	ldd	r22, Y+11	; 0x0b
    139c:	7c 85       	ldd	r23, Y+12	; 0x0c
    139e:	8d 85       	ldd	r24, Y+13	; 0x0d
    13a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	4a ef       	ldi	r20, 0xFA	; 250
    13a8:	54 e4       	ldi	r21, 0x44	; 68
    13aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	8f 83       	std	Y+7, r24	; 0x07
    13b4:	98 87       	std	Y+8, r25	; 0x08
    13b6:	a9 87       	std	Y+9, r26	; 0x09
    13b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13ba:	6f 81       	ldd	r22, Y+7	; 0x07
    13bc:	78 85       	ldd	r23, Y+8	; 0x08
    13be:	89 85       	ldd	r24, Y+9	; 0x09
    13c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	40 e8       	ldi	r20, 0x80	; 128
    13c8:	5f e3       	ldi	r21, 0x3F	; 63
    13ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13ce:	88 23       	and	r24, r24
    13d0:	2c f4       	brge	.+10     	; 0x13dc <main+0x55c>
		__ticks = 1;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	9e 83       	std	Y+6, r25	; 0x06
    13d8:	8d 83       	std	Y+5, r24	; 0x05
    13da:	3f c0       	rjmp	.+126    	; 0x145a <main+0x5da>
	else if (__tmp > 65535)
    13dc:	6f 81       	ldd	r22, Y+7	; 0x07
    13de:	78 85       	ldd	r23, Y+8	; 0x08
    13e0:	89 85       	ldd	r24, Y+9	; 0x09
    13e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	3f ef       	ldi	r19, 0xFF	; 255
    13e8:	4f e7       	ldi	r20, 0x7F	; 127
    13ea:	57 e4       	ldi	r21, 0x47	; 71
    13ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13f0:	18 16       	cp	r1, r24
    13f2:	4c f5       	brge	.+82     	; 0x1446 <main+0x5c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    13f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    13f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	40 e2       	ldi	r20, 0x20	; 32
    1402:	51 e4       	ldi	r21, 0x41	; 65
    1404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	bc 01       	movw	r22, r24
    140e:	cd 01       	movw	r24, r26
    1410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	9e 83       	std	Y+6, r25	; 0x06
    141a:	8d 83       	std	Y+5, r24	; 0x05
    141c:	0f c0       	rjmp	.+30     	; 0x143c <main+0x5bc>
    141e:	88 ec       	ldi	r24, 0xC8	; 200
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	9c 83       	std	Y+4, r25	; 0x04
    1424:	8b 83       	std	Y+3, r24	; 0x03
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	9c 81       	ldd	r25, Y+4	; 0x04
    142a:	01 97       	sbiw	r24, 0x01	; 1
    142c:	f1 f7       	brne	.-4      	; 0x142a <main+0x5aa>
    142e:	9c 83       	std	Y+4, r25	; 0x04
    1430:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1432:	8d 81       	ldd	r24, Y+5	; 0x05
    1434:	9e 81       	ldd	r25, Y+6	; 0x06
    1436:	01 97       	sbiw	r24, 0x01	; 1
    1438:	9e 83       	std	Y+6, r25	; 0x06
    143a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    143c:	8d 81       	ldd	r24, Y+5	; 0x05
    143e:	9e 81       	ldd	r25, Y+6	; 0x06
    1440:	00 97       	sbiw	r24, 0x00	; 0
    1442:	69 f7       	brne	.-38     	; 0x141e <main+0x59e>
    1444:	14 c0       	rjmp	.+40     	; 0x146e <main+0x5ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1446:	6f 81       	ldd	r22, Y+7	; 0x07
    1448:	78 85       	ldd	r23, Y+8	; 0x08
    144a:	89 85       	ldd	r24, Y+9	; 0x09
    144c:	9a 85       	ldd	r25, Y+10	; 0x0a
    144e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	9e 83       	std	Y+6, r25	; 0x06
    1458:	8d 83       	std	Y+5, r24	; 0x05
    145a:	8d 81       	ldd	r24, Y+5	; 0x05
    145c:	9e 81       	ldd	r25, Y+6	; 0x06
    145e:	9a 83       	std	Y+2, r25	; 0x02
    1460:	89 83       	std	Y+1, r24	; 0x01
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	9a 81       	ldd	r25, Y+2	; 0x02
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	f1 f7       	brne	.-4      	; 0x1466 <main+0x5e6>
    146a:	9a 83       	std	Y+2, r25	; 0x02
    146c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(15000);
			DcMotor_Rotate(CW, ZeroSpeed);
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	60 e0       	ldi	r22, 0x00	; 0
    1472:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <DcMotor_Rotate>
			UART_sendByte(1);
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	0e 94 da 10 	call	0x21b4	; 0x21b4 <UART_sendByte>
			flag=0;
    147c:	10 92 76 01 	sts	0x0176, r1
		}
		g_PASSWORD[0]=TRASH_BYTE;
    1480:	89 e0       	ldi	r24, 0x09	; 9
    1482:	80 93 78 01 	sts	0x0178, r24
    1486:	8f cd       	rjmp	.-1250   	; 0xfa6 <main+0x126>

00001488 <DcMotor_Init>:
motor pins through the GPIO driver.
➢ Stop at the DC-Motor at the beginning through the GPIO driver.
 *
 */
void DcMotor_Init(void)
{
    1488:	df 93       	push	r29
    148a:	cf 93       	push	r28
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
		/* configure pin PC0 and PC1 as output pins */
	GPIO_setupPinDirection(DC_MOTOR_PORT, DC_MOTOR_PIN1,PIN_OUTPUT);
    1490:	82 e0       	ldi	r24, 0x02	; 2
    1492:	62 e0       	ldi	r22, 0x02	; 2
    1494:	41 e0       	ldi	r20, 0x01	; 1
    1496:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT, DC_MOTOR_PIN2,PIN_OUTPUT);
    149a:	82 e0       	ldi	r24, 0x02	; 2
    149c:	63 e0       	ldi	r22, 0x03	; 3
    149e:	41 e0       	ldi	r20, 0x01	; 1
    14a0:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <GPIO_setupPinDirection>
			/* Motor is stop at the beginning */
	GPIO_writePort(PORTB_ID, STOP_MOTOR);
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <GPIO_writePort>
}
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	08 95       	ret

000014b2 <DcMotor_Rotate>:
stop the motor based on the state input state value.
➢ Send the required duty cycle to the PWM driver based on the
required speed value.
*/
void DcMotor_Rotate(uint8 state,uint8 speed)
{
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	00 d0       	rcall	.+0      	; 0x14b8 <DcMotor_Rotate+0x6>
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <DcMotor_Rotate+0x8>
    14ba:	0f 92       	push	r0
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	8a 83       	std	Y+2, r24	; 0x02
    14c2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 duty_of_pwm=(uint8)(((float)speed/MAX_SPEED)*MAX_COUNTS_OF_TIMER);
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	88 2f       	mov	r24, r24
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	a0 e0       	ldi	r26, 0x00	; 0
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	bc 01       	movw	r22, r24
    14d0:	cd 01       	movw	r24, r26
    14d2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    14d6:	dc 01       	movw	r26, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	bc 01       	movw	r22, r24
    14dc:	cd 01       	movw	r24, r26
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	48 ec       	ldi	r20, 0xC8	; 200
    14e4:	52 e4       	ldi	r21, 0x42	; 66
    14e6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	bc 01       	movw	r22, r24
    14f0:	cd 01       	movw	r24, r26
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	4f e7       	ldi	r20, 0x7F	; 127
    14f8:	53 e4       	ldi	r21, 0x43	; 67
    14fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	bc 01       	movw	r22, r24
    1504:	cd 01       	movw	r24, r26
    1506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	89 83       	std	Y+1, r24	; 0x01
	Timer0_PWM_Init(duty_of_pwm);
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <Timer0_PWM_Init>
	switch(state)
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	3d 83       	std	Y+5, r19	; 0x05
    151e:	2c 83       	std	Y+4, r18	; 0x04
    1520:	8c 81       	ldd	r24, Y+4	; 0x04
    1522:	9d 81       	ldd	r25, Y+5	; 0x05
    1524:	81 30       	cpi	r24, 0x01	; 1
    1526:	91 05       	cpc	r25, r1
    1528:	51 f0       	breq	.+20     	; 0x153e <DcMotor_Rotate+0x8c>
    152a:	2c 81       	ldd	r18, Y+4	; 0x04
    152c:	3d 81       	ldd	r19, Y+5	; 0x05
    152e:	22 30       	cpi	r18, 0x02	; 2
    1530:	31 05       	cpc	r19, r1
    1532:	81 f0       	breq	.+32     	; 0x1554 <DcMotor_Rotate+0xa2>
    1534:	8c 81       	ldd	r24, Y+4	; 0x04
    1536:	9d 81       	ldd	r25, Y+5	; 0x05
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	b9 f0       	breq	.+46     	; 0x156a <DcMotor_Rotate+0xb8>
    153c:	20 c0       	rjmp	.+64     	; 0x157e <DcMotor_Rotate+0xcc>
	{
	case CW:
		GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_HIGH);
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	60 e0       	ldi	r22, 0x00	; 0
    1542:	41 e0       	ldi	r20, 0x01	; 1
    1544:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <GPIO_writePin>
		GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_LOW);break;
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	61 e0       	ldi	r22, 0x01	; 1
    154c:	40 e0       	ldi	r20, 0x00	; 0
    154e:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <GPIO_writePin>
    1552:	15 c0       	rjmp	.+42     	; 0x157e <DcMotor_Rotate+0xcc>
	case A_CW:
		GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_LOW);
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	40 e0       	ldi	r20, 0x00	; 0
    155a:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <GPIO_writePin>
		GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_HIGH);break;
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	61 e0       	ldi	r22, 0x01	; 1
    1562:	41 e0       	ldi	r20, 0x01	; 1
    1564:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <GPIO_writePin>
    1568:	0a c0       	rjmp	.+20     	; 0x157e <DcMotor_Rotate+0xcc>
	case STOP_MOTOR:
		GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_LOW);
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	60 e0       	ldi	r22, 0x00	; 0
    156e:	40 e0       	ldi	r20, 0x00	; 0
    1570:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <GPIO_writePin>
		GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_LOW);break;
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	61 e0       	ldi	r22, 0x01	; 1
    1578:	40 e0       	ldi	r20, 0x00	; 0
    157a:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <GPIO_writePin>
	}
}
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	08 95       	ret

0000158e <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	00 d0       	rcall	.+0      	; 0x1594 <EEPROM_writeByte+0x6>
    1594:	00 d0       	rcall	.+0      	; 0x1596 <EEPROM_writeByte+0x8>
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	9a 83       	std	Y+2, r25	; 0x02
    159c:	89 83       	std	Y+1, r24	; 0x01
    159e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    15a0:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <TWI_start>
    if (TWI_getStatus() != TWI_START)
    15a4:	0e 94 2e 10 	call	0x205c	; 0x205c <TWI_getStatus>
    15a8:	88 30       	cpi	r24, 0x08	; 8
    15aa:	11 f0       	breq	.+4      	; 0x15b0 <EEPROM_writeByte+0x22>
        return ERROR;
    15ac:	1c 82       	std	Y+4, r1	; 0x04
    15ae:	28 c0       	rjmp	.+80     	; 0x1600 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	9a 81       	ldd	r25, Y+2	; 0x02
    15b4:	80 70       	andi	r24, 0x00	; 0
    15b6:	97 70       	andi	r25, 0x07	; 7
    15b8:	88 0f       	add	r24, r24
    15ba:	89 2f       	mov	r24, r25
    15bc:	88 1f       	adc	r24, r24
    15be:	99 0b       	sbc	r25, r25
    15c0:	91 95       	neg	r25
    15c2:	80 6a       	ori	r24, 0xA0	; 160
    15c4:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    15c8:	0e 94 2e 10 	call	0x205c	; 0x205c <TWI_getStatus>
    15cc:	88 31       	cpi	r24, 0x18	; 24
    15ce:	11 f0       	breq	.+4      	; 0x15d4 <EEPROM_writeByte+0x46>
        return ERROR; 
    15d0:	1c 82       	std	Y+4, r1	; 0x04
    15d2:	16 c0       	rjmp	.+44     	; 0x1600 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    15da:	0e 94 2e 10 	call	0x205c	; 0x205c <TWI_getStatus>
    15de:	88 32       	cpi	r24, 0x28	; 40
    15e0:	11 f0       	breq	.+4      	; 0x15e6 <EEPROM_writeByte+0x58>
        return ERROR;
    15e2:	1c 82       	std	Y+4, r1	; 0x04
    15e4:	0d c0       	rjmp	.+26     	; 0x1600 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    15ec:	0e 94 2e 10 	call	0x205c	; 0x205c <TWI_getStatus>
    15f0:	88 32       	cpi	r24, 0x28	; 40
    15f2:	11 f0       	breq	.+4      	; 0x15f8 <EEPROM_writeByte+0x6a>
        return ERROR;
    15f4:	1c 82       	std	Y+4, r1	; 0x04
    15f6:	04 c0       	rjmp	.+8      	; 0x1600 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    15f8:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <TWI_stop>
	
    return SUCCESS;
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	8c 83       	std	Y+4, r24	; 0x04
    1600:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	cf 91       	pop	r28
    160c:	df 91       	pop	r29
    160e:	08 95       	ret

00001610 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	00 d0       	rcall	.+0      	; 0x1616 <EEPROM_readByte+0x6>
    1616:	00 d0       	rcall	.+0      	; 0x1618 <EEPROM_readByte+0x8>
    1618:	0f 92       	push	r0
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    161e:	9a 83       	std	Y+2, r25	; 0x02
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	7c 83       	std	Y+4, r23	; 0x04
    1624:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1626:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <TWI_start>
    if (TWI_getStatus() != TWI_START)
    162a:	0e 94 2e 10 	call	0x205c	; 0x205c <TWI_getStatus>
    162e:	88 30       	cpi	r24, 0x08	; 8
    1630:	11 f0       	breq	.+4      	; 0x1636 <EEPROM_readByte+0x26>
        return ERROR;
    1632:	1d 82       	std	Y+5, r1	; 0x05
    1634:	44 c0       	rjmp	.+136    	; 0x16be <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	9a 81       	ldd	r25, Y+2	; 0x02
    163a:	80 70       	andi	r24, 0x00	; 0
    163c:	97 70       	andi	r25, 0x07	; 7
    163e:	88 0f       	add	r24, r24
    1640:	89 2f       	mov	r24, r25
    1642:	88 1f       	adc	r24, r24
    1644:	99 0b       	sbc	r25, r25
    1646:	91 95       	neg	r25
    1648:	80 6a       	ori	r24, 0xA0	; 160
    164a:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    164e:	0e 94 2e 10 	call	0x205c	; 0x205c <TWI_getStatus>
    1652:	88 31       	cpi	r24, 0x18	; 24
    1654:	11 f0       	breq	.+4      	; 0x165a <EEPROM_readByte+0x4a>
        return ERROR;
    1656:	1d 82       	std	Y+5, r1	; 0x05
    1658:	32 c0       	rjmp	.+100    	; 0x16be <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1660:	0e 94 2e 10 	call	0x205c	; 0x205c <TWI_getStatus>
    1664:	88 32       	cpi	r24, 0x28	; 40
    1666:	11 f0       	breq	.+4      	; 0x166c <EEPROM_readByte+0x5c>
        return ERROR;
    1668:	1d 82       	std	Y+5, r1	; 0x05
    166a:	29 c0       	rjmp	.+82     	; 0x16be <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    166c:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1670:	0e 94 2e 10 	call	0x205c	; 0x205c <TWI_getStatus>
    1674:	80 31       	cpi	r24, 0x10	; 16
    1676:	11 f0       	breq	.+4      	; 0x167c <EEPROM_readByte+0x6c>
        return ERROR;
    1678:	1d 82       	std	Y+5, r1	; 0x05
    167a:	21 c0       	rjmp	.+66     	; 0x16be <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	9a 81       	ldd	r25, Y+2	; 0x02
    1680:	80 70       	andi	r24, 0x00	; 0
    1682:	97 70       	andi	r25, 0x07	; 7
    1684:	88 0f       	add	r24, r24
    1686:	89 2f       	mov	r24, r25
    1688:	88 1f       	adc	r24, r24
    168a:	99 0b       	sbc	r25, r25
    168c:	91 95       	neg	r25
    168e:	81 6a       	ori	r24, 0xA1	; 161
    1690:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1694:	0e 94 2e 10 	call	0x205c	; 0x205c <TWI_getStatus>
    1698:	80 34       	cpi	r24, 0x40	; 64
    169a:	11 f0       	breq	.+4      	; 0x16a0 <EEPROM_readByte+0x90>
        return ERROR;
    169c:	1d 82       	std	Y+5, r1	; 0x05
    169e:	0f c0       	rjmp	.+30     	; 0x16be <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    16a0:	0e 94 1b 10 	call	0x2036	; 0x2036 <TWI_readByteWithNACK>
    16a4:	eb 81       	ldd	r30, Y+3	; 0x03
    16a6:	fc 81       	ldd	r31, Y+4	; 0x04
    16a8:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    16aa:	0e 94 2e 10 	call	0x205c	; 0x205c <TWI_getStatus>
    16ae:	88 35       	cpi	r24, 0x58	; 88
    16b0:	11 f0       	breq	.+4      	; 0x16b6 <EEPROM_readByte+0xa6>
        return ERROR;
    16b2:	1d 82       	std	Y+5, r1	; 0x05
    16b4:	04 c0       	rjmp	.+8      	; 0x16be <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    16b6:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <TWI_stop>

    return SUCCESS;
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	8d 83       	std	Y+5, r24	; 0x05
    16be:	8d 81       	ldd	r24, Y+5	; 0x05
}
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	cf 91       	pop	r28
    16cc:	df 91       	pop	r29
    16ce:	08 95       	ret

000016d0 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    16d0:	df 93       	push	r29
    16d2:	cf 93       	push	r28
    16d4:	00 d0       	rcall	.+0      	; 0x16d6 <GPIO_setupPinDirection+0x6>
    16d6:	00 d0       	rcall	.+0      	; 0x16d8 <GPIO_setupPinDirection+0x8>
    16d8:	0f 92       	push	r0
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
    16de:	89 83       	std	Y+1, r24	; 0x01
    16e0:	6a 83       	std	Y+2, r22	; 0x02
    16e2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	88 30       	cpi	r24, 0x08	; 8
    16e8:	08 f0       	brcs	.+2      	; 0x16ec <GPIO_setupPinDirection+0x1c>
    16ea:	d5 c0       	rjmp	.+426    	; 0x1896 <GPIO_setupPinDirection+0x1c6>
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	84 30       	cpi	r24, 0x04	; 4
    16f0:	08 f0       	brcs	.+2      	; 0x16f4 <GPIO_setupPinDirection+0x24>
    16f2:	d1 c0       	rjmp	.+418    	; 0x1896 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	3d 83       	std	Y+5, r19	; 0x05
    16fc:	2c 83       	std	Y+4, r18	; 0x04
    16fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1700:	9d 81       	ldd	r25, Y+5	; 0x05
    1702:	81 30       	cpi	r24, 0x01	; 1
    1704:	91 05       	cpc	r25, r1
    1706:	09 f4       	brne	.+2      	; 0x170a <GPIO_setupPinDirection+0x3a>
    1708:	43 c0       	rjmp	.+134    	; 0x1790 <GPIO_setupPinDirection+0xc0>
    170a:	2c 81       	ldd	r18, Y+4	; 0x04
    170c:	3d 81       	ldd	r19, Y+5	; 0x05
    170e:	22 30       	cpi	r18, 0x02	; 2
    1710:	31 05       	cpc	r19, r1
    1712:	2c f4       	brge	.+10     	; 0x171e <GPIO_setupPinDirection+0x4e>
    1714:	8c 81       	ldd	r24, Y+4	; 0x04
    1716:	9d 81       	ldd	r25, Y+5	; 0x05
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	71 f0       	breq	.+28     	; 0x1738 <GPIO_setupPinDirection+0x68>
    171c:	bc c0       	rjmp	.+376    	; 0x1896 <GPIO_setupPinDirection+0x1c6>
    171e:	2c 81       	ldd	r18, Y+4	; 0x04
    1720:	3d 81       	ldd	r19, Y+5	; 0x05
    1722:	22 30       	cpi	r18, 0x02	; 2
    1724:	31 05       	cpc	r19, r1
    1726:	09 f4       	brne	.+2      	; 0x172a <GPIO_setupPinDirection+0x5a>
    1728:	5f c0       	rjmp	.+190    	; 0x17e8 <GPIO_setupPinDirection+0x118>
    172a:	8c 81       	ldd	r24, Y+4	; 0x04
    172c:	9d 81       	ldd	r25, Y+5	; 0x05
    172e:	83 30       	cpi	r24, 0x03	; 3
    1730:	91 05       	cpc	r25, r1
    1732:	09 f4       	brne	.+2      	; 0x1736 <GPIO_setupPinDirection+0x66>
    1734:	85 c0       	rjmp	.+266    	; 0x1840 <GPIO_setupPinDirection+0x170>
    1736:	af c0       	rjmp	.+350    	; 0x1896 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1738:	8b 81       	ldd	r24, Y+3	; 0x03
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	a1 f4       	brne	.+40     	; 0x1766 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    173e:	aa e3       	ldi	r26, 0x3A	; 58
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	ea e3       	ldi	r30, 0x3A	; 58
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	48 2f       	mov	r20, r24
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	02 2e       	mov	r0, r18
    1756:	02 c0       	rjmp	.+4      	; 0x175c <GPIO_setupPinDirection+0x8c>
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	0a 94       	dec	r0
    175e:	e2 f7       	brpl	.-8      	; 0x1758 <GPIO_setupPinDirection+0x88>
    1760:	84 2b       	or	r24, r20
    1762:	8c 93       	st	X, r24
    1764:	98 c0       	rjmp	.+304    	; 0x1896 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1766:	aa e3       	ldi	r26, 0x3A	; 58
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	ea e3       	ldi	r30, 0x3A	; 58
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	48 2f       	mov	r20, r24
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	02 2e       	mov	r0, r18
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <GPIO_setupPinDirection+0xb4>
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	0a 94       	dec	r0
    1786:	e2 f7       	brpl	.-8      	; 0x1780 <GPIO_setupPinDirection+0xb0>
    1788:	80 95       	com	r24
    178a:	84 23       	and	r24, r20
    178c:	8c 93       	st	X, r24
    178e:	83 c0       	rjmp	.+262    	; 0x1896 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	81 30       	cpi	r24, 0x01	; 1
    1794:	a1 f4       	brne	.+40     	; 0x17be <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1796:	a7 e3       	ldi	r26, 0x37	; 55
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e7 e3       	ldi	r30, 0x37	; 55
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	48 2f       	mov	r20, r24
    17a2:	8a 81       	ldd	r24, Y+2	; 0x02
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	02 2e       	mov	r0, r18
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <GPIO_setupPinDirection+0xe4>
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	0a 94       	dec	r0
    17b6:	e2 f7       	brpl	.-8      	; 0x17b0 <GPIO_setupPinDirection+0xe0>
    17b8:	84 2b       	or	r24, r20
    17ba:	8c 93       	st	X, r24
    17bc:	6c c0       	rjmp	.+216    	; 0x1896 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    17be:	a7 e3       	ldi	r26, 0x37	; 55
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e7 e3       	ldi	r30, 0x37	; 55
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	48 2f       	mov	r20, r24
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	28 2f       	mov	r18, r24
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	02 2e       	mov	r0, r18
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <GPIO_setupPinDirection+0x10c>
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	0a 94       	dec	r0
    17de:	e2 f7       	brpl	.-8      	; 0x17d8 <GPIO_setupPinDirection+0x108>
    17e0:	80 95       	com	r24
    17e2:	84 23       	and	r24, r20
    17e4:	8c 93       	st	X, r24
    17e6:	57 c0       	rjmp	.+174    	; 0x1896 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	81 30       	cpi	r24, 0x01	; 1
    17ec:	a1 f4       	brne	.+40     	; 0x1816 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    17ee:	a4 e3       	ldi	r26, 0x34	; 52
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e4 e3       	ldi	r30, 0x34	; 52
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	48 2f       	mov	r20, r24
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	02 2e       	mov	r0, r18
    1806:	02 c0       	rjmp	.+4      	; 0x180c <GPIO_setupPinDirection+0x13c>
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	0a 94       	dec	r0
    180e:	e2 f7       	brpl	.-8      	; 0x1808 <GPIO_setupPinDirection+0x138>
    1810:	84 2b       	or	r24, r20
    1812:	8c 93       	st	X, r24
    1814:	40 c0       	rjmp	.+128    	; 0x1896 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1816:	a4 e3       	ldi	r26, 0x34	; 52
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e4 e3       	ldi	r30, 0x34	; 52
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	48 2f       	mov	r20, r24
    1822:	8a 81       	ldd	r24, Y+2	; 0x02
    1824:	28 2f       	mov	r18, r24
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	02 2e       	mov	r0, r18
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <GPIO_setupPinDirection+0x164>
    1830:	88 0f       	add	r24, r24
    1832:	99 1f       	adc	r25, r25
    1834:	0a 94       	dec	r0
    1836:	e2 f7       	brpl	.-8      	; 0x1830 <GPIO_setupPinDirection+0x160>
    1838:	80 95       	com	r24
    183a:	84 23       	and	r24, r20
    183c:	8c 93       	st	X, r24
    183e:	2b c0       	rjmp	.+86     	; 0x1896 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	81 30       	cpi	r24, 0x01	; 1
    1844:	a1 f4       	brne	.+40     	; 0x186e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1846:	a1 e3       	ldi	r26, 0x31	; 49
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e1 e3       	ldi	r30, 0x31	; 49
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	48 2f       	mov	r20, r24
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	02 2e       	mov	r0, r18
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <GPIO_setupPinDirection+0x194>
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	0a 94       	dec	r0
    1866:	e2 f7       	brpl	.-8      	; 0x1860 <GPIO_setupPinDirection+0x190>
    1868:	84 2b       	or	r24, r20
    186a:	8c 93       	st	X, r24
    186c:	14 c0       	rjmp	.+40     	; 0x1896 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    186e:	a1 e3       	ldi	r26, 0x31	; 49
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	e1 e3       	ldi	r30, 0x31	; 49
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	48 2f       	mov	r20, r24
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	02 2e       	mov	r0, r18
    1886:	02 c0       	rjmp	.+4      	; 0x188c <GPIO_setupPinDirection+0x1bc>
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	0a 94       	dec	r0
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <GPIO_setupPinDirection+0x1b8>
    1890:	80 95       	com	r24
    1892:	84 23       	and	r24, r20
    1894:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

000018a6 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    18a6:	df 93       	push	r29
    18a8:	cf 93       	push	r28
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <GPIO_writePin+0x6>
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <GPIO_writePin+0x8>
    18ae:	0f 92       	push	r0
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
    18b4:	89 83       	std	Y+1, r24	; 0x01
    18b6:	6a 83       	std	Y+2, r22	; 0x02
    18b8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	88 30       	cpi	r24, 0x08	; 8
    18be:	08 f0       	brcs	.+2      	; 0x18c2 <GPIO_writePin+0x1c>
    18c0:	d5 c0       	rjmp	.+426    	; 0x1a6c <GPIO_writePin+0x1c6>
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	84 30       	cpi	r24, 0x04	; 4
    18c6:	08 f0       	brcs	.+2      	; 0x18ca <GPIO_writePin+0x24>
    18c8:	d1 c0       	rjmp	.+418    	; 0x1a6c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	3d 83       	std	Y+5, r19	; 0x05
    18d2:	2c 83       	std	Y+4, r18	; 0x04
    18d4:	8c 81       	ldd	r24, Y+4	; 0x04
    18d6:	9d 81       	ldd	r25, Y+5	; 0x05
    18d8:	81 30       	cpi	r24, 0x01	; 1
    18da:	91 05       	cpc	r25, r1
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <GPIO_writePin+0x3a>
    18de:	43 c0       	rjmp	.+134    	; 0x1966 <GPIO_writePin+0xc0>
    18e0:	2c 81       	ldd	r18, Y+4	; 0x04
    18e2:	3d 81       	ldd	r19, Y+5	; 0x05
    18e4:	22 30       	cpi	r18, 0x02	; 2
    18e6:	31 05       	cpc	r19, r1
    18e8:	2c f4       	brge	.+10     	; 0x18f4 <GPIO_writePin+0x4e>
    18ea:	8c 81       	ldd	r24, Y+4	; 0x04
    18ec:	9d 81       	ldd	r25, Y+5	; 0x05
    18ee:	00 97       	sbiw	r24, 0x00	; 0
    18f0:	71 f0       	breq	.+28     	; 0x190e <GPIO_writePin+0x68>
    18f2:	bc c0       	rjmp	.+376    	; 0x1a6c <GPIO_writePin+0x1c6>
    18f4:	2c 81       	ldd	r18, Y+4	; 0x04
    18f6:	3d 81       	ldd	r19, Y+5	; 0x05
    18f8:	22 30       	cpi	r18, 0x02	; 2
    18fa:	31 05       	cpc	r19, r1
    18fc:	09 f4       	brne	.+2      	; 0x1900 <GPIO_writePin+0x5a>
    18fe:	5f c0       	rjmp	.+190    	; 0x19be <GPIO_writePin+0x118>
    1900:	8c 81       	ldd	r24, Y+4	; 0x04
    1902:	9d 81       	ldd	r25, Y+5	; 0x05
    1904:	83 30       	cpi	r24, 0x03	; 3
    1906:	91 05       	cpc	r25, r1
    1908:	09 f4       	brne	.+2      	; 0x190c <GPIO_writePin+0x66>
    190a:	85 c0       	rjmp	.+266    	; 0x1a16 <GPIO_writePin+0x170>
    190c:	af c0       	rjmp	.+350    	; 0x1a6c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    190e:	8b 81       	ldd	r24, Y+3	; 0x03
    1910:	81 30       	cpi	r24, 0x01	; 1
    1912:	a1 f4       	brne	.+40     	; 0x193c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1914:	ab e3       	ldi	r26, 0x3B	; 59
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	eb e3       	ldi	r30, 0x3B	; 59
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	48 2f       	mov	r20, r24
    1920:	8a 81       	ldd	r24, Y+2	; 0x02
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	02 2e       	mov	r0, r18
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <GPIO_writePin+0x8c>
    192e:	88 0f       	add	r24, r24
    1930:	99 1f       	adc	r25, r25
    1932:	0a 94       	dec	r0
    1934:	e2 f7       	brpl	.-8      	; 0x192e <GPIO_writePin+0x88>
    1936:	84 2b       	or	r24, r20
    1938:	8c 93       	st	X, r24
    193a:	98 c0       	rjmp	.+304    	; 0x1a6c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    193c:	ab e3       	ldi	r26, 0x3B	; 59
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	eb e3       	ldi	r30, 0x3B	; 59
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	48 2f       	mov	r20, r24
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	28 2f       	mov	r18, r24
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	02 2e       	mov	r0, r18
    1954:	02 c0       	rjmp	.+4      	; 0x195a <GPIO_writePin+0xb4>
    1956:	88 0f       	add	r24, r24
    1958:	99 1f       	adc	r25, r25
    195a:	0a 94       	dec	r0
    195c:	e2 f7       	brpl	.-8      	; 0x1956 <GPIO_writePin+0xb0>
    195e:	80 95       	com	r24
    1960:	84 23       	and	r24, r20
    1962:	8c 93       	st	X, r24
    1964:	83 c0       	rjmp	.+262    	; 0x1a6c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	81 30       	cpi	r24, 0x01	; 1
    196a:	a1 f4       	brne	.+40     	; 0x1994 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    196c:	a8 e3       	ldi	r26, 0x38	; 56
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e8 e3       	ldi	r30, 0x38	; 56
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	48 2f       	mov	r20, r24
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
    197a:	28 2f       	mov	r18, r24
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	02 2e       	mov	r0, r18
    1984:	02 c0       	rjmp	.+4      	; 0x198a <GPIO_writePin+0xe4>
    1986:	88 0f       	add	r24, r24
    1988:	99 1f       	adc	r25, r25
    198a:	0a 94       	dec	r0
    198c:	e2 f7       	brpl	.-8      	; 0x1986 <GPIO_writePin+0xe0>
    198e:	84 2b       	or	r24, r20
    1990:	8c 93       	st	X, r24
    1992:	6c c0       	rjmp	.+216    	; 0x1a6c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1994:	a8 e3       	ldi	r26, 0x38	; 56
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	e8 e3       	ldi	r30, 0x38	; 56
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	48 2f       	mov	r20, r24
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	28 2f       	mov	r18, r24
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	02 2e       	mov	r0, r18
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <GPIO_writePin+0x10c>
    19ae:	88 0f       	add	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	0a 94       	dec	r0
    19b4:	e2 f7       	brpl	.-8      	; 0x19ae <GPIO_writePin+0x108>
    19b6:	80 95       	com	r24
    19b8:	84 23       	and	r24, r20
    19ba:	8c 93       	st	X, r24
    19bc:	57 c0       	rjmp	.+174    	; 0x1a6c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	81 30       	cpi	r24, 0x01	; 1
    19c2:	a1 f4       	brne	.+40     	; 0x19ec <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    19c4:	a5 e3       	ldi	r26, 0x35	; 53
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	e5 e3       	ldi	r30, 0x35	; 53
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	48 2f       	mov	r20, r24
    19d0:	8a 81       	ldd	r24, Y+2	; 0x02
    19d2:	28 2f       	mov	r18, r24
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	02 2e       	mov	r0, r18
    19dc:	02 c0       	rjmp	.+4      	; 0x19e2 <GPIO_writePin+0x13c>
    19de:	88 0f       	add	r24, r24
    19e0:	99 1f       	adc	r25, r25
    19e2:	0a 94       	dec	r0
    19e4:	e2 f7       	brpl	.-8      	; 0x19de <GPIO_writePin+0x138>
    19e6:	84 2b       	or	r24, r20
    19e8:	8c 93       	st	X, r24
    19ea:	40 c0       	rjmp	.+128    	; 0x1a6c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    19ec:	a5 e3       	ldi	r26, 0x35	; 53
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	e5 e3       	ldi	r30, 0x35	; 53
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	48 2f       	mov	r20, r24
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	28 2f       	mov	r18, r24
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	02 2e       	mov	r0, r18
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <GPIO_writePin+0x164>
    1a06:	88 0f       	add	r24, r24
    1a08:	99 1f       	adc	r25, r25
    1a0a:	0a 94       	dec	r0
    1a0c:	e2 f7       	brpl	.-8      	; 0x1a06 <GPIO_writePin+0x160>
    1a0e:	80 95       	com	r24
    1a10:	84 23       	and	r24, r20
    1a12:	8c 93       	st	X, r24
    1a14:	2b c0       	rjmp	.+86     	; 0x1a6c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1a16:	8b 81       	ldd	r24, Y+3	; 0x03
    1a18:	81 30       	cpi	r24, 0x01	; 1
    1a1a:	a1 f4       	brne	.+40     	; 0x1a44 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1a1c:	a2 e3       	ldi	r26, 0x32	; 50
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e2 e3       	ldi	r30, 0x32	; 50
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	48 2f       	mov	r20, r24
    1a28:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	02 2e       	mov	r0, r18
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <GPIO_writePin+0x194>
    1a36:	88 0f       	add	r24, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	0a 94       	dec	r0
    1a3c:	e2 f7       	brpl	.-8      	; 0x1a36 <GPIO_writePin+0x190>
    1a3e:	84 2b       	or	r24, r20
    1a40:	8c 93       	st	X, r24
    1a42:	14 c0       	rjmp	.+40     	; 0x1a6c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1a44:	a2 e3       	ldi	r26, 0x32	; 50
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	e2 e3       	ldi	r30, 0x32	; 50
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	48 2f       	mov	r20, r24
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	28 2f       	mov	r18, r24
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	02 2e       	mov	r0, r18
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <GPIO_writePin+0x1bc>
    1a5e:	88 0f       	add	r24, r24
    1a60:	99 1f       	adc	r25, r25
    1a62:	0a 94       	dec	r0
    1a64:	e2 f7       	brpl	.-8      	; 0x1a5e <GPIO_writePin+0x1b8>
    1a66:	80 95       	com	r24
    1a68:	84 23       	and	r24, r20
    1a6a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	cf 91       	pop	r28
    1a78:	df 91       	pop	r29
    1a7a:	08 95       	ret

00001a7c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1a7c:	df 93       	push	r29
    1a7e:	cf 93       	push	r28
    1a80:	00 d0       	rcall	.+0      	; 0x1a82 <GPIO_readPin+0x6>
    1a82:	00 d0       	rcall	.+0      	; 0x1a84 <GPIO_readPin+0x8>
    1a84:	0f 92       	push	r0
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    1a8a:	8a 83       	std	Y+2, r24	; 0x02
    1a8c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1a8e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	88 30       	cpi	r24, 0x08	; 8
    1a94:	08 f0       	brcs	.+2      	; 0x1a98 <GPIO_readPin+0x1c>
    1a96:	84 c0       	rjmp	.+264    	; 0x1ba0 <GPIO_readPin+0x124>
    1a98:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9a:	84 30       	cpi	r24, 0x04	; 4
    1a9c:	08 f0       	brcs	.+2      	; 0x1aa0 <GPIO_readPin+0x24>
    1a9e:	80 c0       	rjmp	.+256    	; 0x1ba0 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa2:	28 2f       	mov	r18, r24
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	3d 83       	std	Y+5, r19	; 0x05
    1aa8:	2c 83       	std	Y+4, r18	; 0x04
    1aaa:	4c 81       	ldd	r20, Y+4	; 0x04
    1aac:	5d 81       	ldd	r21, Y+5	; 0x05
    1aae:	41 30       	cpi	r20, 0x01	; 1
    1ab0:	51 05       	cpc	r21, r1
    1ab2:	79 f1       	breq	.+94     	; 0x1b12 <GPIO_readPin+0x96>
    1ab4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ab8:	82 30       	cpi	r24, 0x02	; 2
    1aba:	91 05       	cpc	r25, r1
    1abc:	34 f4       	brge	.+12     	; 0x1aca <GPIO_readPin+0x4e>
    1abe:	2c 81       	ldd	r18, Y+4	; 0x04
    1ac0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ac2:	21 15       	cp	r18, r1
    1ac4:	31 05       	cpc	r19, r1
    1ac6:	69 f0       	breq	.+26     	; 0x1ae2 <GPIO_readPin+0x66>
    1ac8:	6b c0       	rjmp	.+214    	; 0x1ba0 <GPIO_readPin+0x124>
    1aca:	4c 81       	ldd	r20, Y+4	; 0x04
    1acc:	5d 81       	ldd	r21, Y+5	; 0x05
    1ace:	42 30       	cpi	r20, 0x02	; 2
    1ad0:	51 05       	cpc	r21, r1
    1ad2:	b9 f1       	breq	.+110    	; 0x1b42 <GPIO_readPin+0xc6>
    1ad4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad8:	83 30       	cpi	r24, 0x03	; 3
    1ada:	91 05       	cpc	r25, r1
    1adc:	09 f4       	brne	.+2      	; 0x1ae0 <GPIO_readPin+0x64>
    1ade:	49 c0       	rjmp	.+146    	; 0x1b72 <GPIO_readPin+0xf6>
    1ae0:	5f c0       	rjmp	.+190    	; 0x1ba0 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1ae2:	e9 e3       	ldi	r30, 0x39	; 57
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	28 2f       	mov	r18, r24
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	8b 81       	ldd	r24, Y+3	; 0x03
    1aee:	88 2f       	mov	r24, r24
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	a9 01       	movw	r20, r18
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <GPIO_readPin+0x7e>
    1af6:	55 95       	asr	r21
    1af8:	47 95       	ror	r20
    1afa:	8a 95       	dec	r24
    1afc:	e2 f7       	brpl	.-8      	; 0x1af6 <GPIO_readPin+0x7a>
    1afe:	ca 01       	movw	r24, r20
    1b00:	81 70       	andi	r24, 0x01	; 1
    1b02:	90 70       	andi	r25, 0x00	; 0
    1b04:	88 23       	and	r24, r24
    1b06:	19 f0       	breq	.+6      	; 0x1b0e <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	89 83       	std	Y+1, r24	; 0x01
    1b0c:	49 c0       	rjmp	.+146    	; 0x1ba0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b0e:	19 82       	std	Y+1, r1	; 0x01
    1b10:	47 c0       	rjmp	.+142    	; 0x1ba0 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1b12:	e6 e3       	ldi	r30, 0x36	; 54
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	28 2f       	mov	r18, r24
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	88 2f       	mov	r24, r24
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	a9 01       	movw	r20, r18
    1b24:	02 c0       	rjmp	.+4      	; 0x1b2a <GPIO_readPin+0xae>
    1b26:	55 95       	asr	r21
    1b28:	47 95       	ror	r20
    1b2a:	8a 95       	dec	r24
    1b2c:	e2 f7       	brpl	.-8      	; 0x1b26 <GPIO_readPin+0xaa>
    1b2e:	ca 01       	movw	r24, r20
    1b30:	81 70       	andi	r24, 0x01	; 1
    1b32:	90 70       	andi	r25, 0x00	; 0
    1b34:	88 23       	and	r24, r24
    1b36:	19 f0       	breq	.+6      	; 0x1b3e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	89 83       	std	Y+1, r24	; 0x01
    1b3c:	31 c0       	rjmp	.+98     	; 0x1ba0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b3e:	19 82       	std	Y+1, r1	; 0x01
    1b40:	2f c0       	rjmp	.+94     	; 0x1ba0 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1b42:	e3 e3       	ldi	r30, 0x33	; 51
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4e:	88 2f       	mov	r24, r24
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	a9 01       	movw	r20, r18
    1b54:	02 c0       	rjmp	.+4      	; 0x1b5a <GPIO_readPin+0xde>
    1b56:	55 95       	asr	r21
    1b58:	47 95       	ror	r20
    1b5a:	8a 95       	dec	r24
    1b5c:	e2 f7       	brpl	.-8      	; 0x1b56 <GPIO_readPin+0xda>
    1b5e:	ca 01       	movw	r24, r20
    1b60:	81 70       	andi	r24, 0x01	; 1
    1b62:	90 70       	andi	r25, 0x00	; 0
    1b64:	88 23       	and	r24, r24
    1b66:	19 f0       	breq	.+6      	; 0x1b6e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	89 83       	std	Y+1, r24	; 0x01
    1b6c:	19 c0       	rjmp	.+50     	; 0x1ba0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b6e:	19 82       	std	Y+1, r1	; 0x01
    1b70:	17 c0       	rjmp	.+46     	; 0x1ba0 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1b72:	e0 e3       	ldi	r30, 0x30	; 48
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	28 2f       	mov	r18, r24
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	88 2f       	mov	r24, r24
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	a9 01       	movw	r20, r18
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <GPIO_readPin+0x10e>
    1b86:	55 95       	asr	r21
    1b88:	47 95       	ror	r20
    1b8a:	8a 95       	dec	r24
    1b8c:	e2 f7       	brpl	.-8      	; 0x1b86 <GPIO_readPin+0x10a>
    1b8e:	ca 01       	movw	r24, r20
    1b90:	81 70       	andi	r24, 0x01	; 1
    1b92:	90 70       	andi	r25, 0x00	; 0
    1b94:	88 23       	and	r24, r24
    1b96:	19 f0       	breq	.+6      	; 0x1b9e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	89 83       	std	Y+1, r24	; 0x01
    1b9c:	01 c0       	rjmp	.+2      	; 0x1ba0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b9e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	08 95       	ret

00001bb2 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <GPIO_setupPortDirection+0x6>
    1bb8:	00 d0       	rcall	.+0      	; 0x1bba <GPIO_setupPortDirection+0x8>
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	89 83       	std	Y+1, r24	; 0x01
    1bc0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	84 30       	cpi	r24, 0x04	; 4
    1bc6:	90 f5       	brcc	.+100    	; 0x1c2c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1bc8:	89 81       	ldd	r24, Y+1	; 0x01
    1bca:	28 2f       	mov	r18, r24
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	3c 83       	std	Y+4, r19	; 0x04
    1bd0:	2b 83       	std	Y+3, r18	; 0x03
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd6:	81 30       	cpi	r24, 0x01	; 1
    1bd8:	91 05       	cpc	r25, r1
    1bda:	d1 f0       	breq	.+52     	; 0x1c10 <GPIO_setupPortDirection+0x5e>
    1bdc:	2b 81       	ldd	r18, Y+3	; 0x03
    1bde:	3c 81       	ldd	r19, Y+4	; 0x04
    1be0:	22 30       	cpi	r18, 0x02	; 2
    1be2:	31 05       	cpc	r19, r1
    1be4:	2c f4       	brge	.+10     	; 0x1bf0 <GPIO_setupPortDirection+0x3e>
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bea:	00 97       	sbiw	r24, 0x00	; 0
    1bec:	61 f0       	breq	.+24     	; 0x1c06 <GPIO_setupPortDirection+0x54>
    1bee:	1e c0       	rjmp	.+60     	; 0x1c2c <GPIO_setupPortDirection+0x7a>
    1bf0:	2b 81       	ldd	r18, Y+3	; 0x03
    1bf2:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf4:	22 30       	cpi	r18, 0x02	; 2
    1bf6:	31 05       	cpc	r19, r1
    1bf8:	81 f0       	breq	.+32     	; 0x1c1a <GPIO_setupPortDirection+0x68>
    1bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfe:	83 30       	cpi	r24, 0x03	; 3
    1c00:	91 05       	cpc	r25, r1
    1c02:	81 f0       	breq	.+32     	; 0x1c24 <GPIO_setupPortDirection+0x72>
    1c04:	13 c0       	rjmp	.+38     	; 0x1c2c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1c06:	ea e3       	ldi	r30, 0x3A	; 58
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	80 83       	st	Z, r24
    1c0e:	0e c0       	rjmp	.+28     	; 0x1c2c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1c10:	e7 e3       	ldi	r30, 0x37	; 55
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	8a 81       	ldd	r24, Y+2	; 0x02
    1c16:	80 83       	st	Z, r24
    1c18:	09 c0       	rjmp	.+18     	; 0x1c2c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1c1a:	e4 e3       	ldi	r30, 0x34	; 52
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	80 83       	st	Z, r24
    1c22:	04 c0       	rjmp	.+8      	; 0x1c2c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1c24:	e1 e3       	ldi	r30, 0x31	; 49
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	08 95       	ret

00001c3a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	00 d0       	rcall	.+0      	; 0x1c40 <GPIO_writePort+0x6>
    1c40:	00 d0       	rcall	.+0      	; 0x1c42 <GPIO_writePort+0x8>
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
    1c46:	89 83       	std	Y+1, r24	; 0x01
    1c48:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
    1c4c:	84 30       	cpi	r24, 0x04	; 4
    1c4e:	90 f5       	brcc	.+100    	; 0x1cb4 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1c50:	89 81       	ldd	r24, Y+1	; 0x01
    1c52:	28 2f       	mov	r18, r24
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	3c 83       	std	Y+4, r19	; 0x04
    1c58:	2b 83       	std	Y+3, r18	; 0x03
    1c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5e:	81 30       	cpi	r24, 0x01	; 1
    1c60:	91 05       	cpc	r25, r1
    1c62:	d1 f0       	breq	.+52     	; 0x1c98 <GPIO_writePort+0x5e>
    1c64:	2b 81       	ldd	r18, Y+3	; 0x03
    1c66:	3c 81       	ldd	r19, Y+4	; 0x04
    1c68:	22 30       	cpi	r18, 0x02	; 2
    1c6a:	31 05       	cpc	r19, r1
    1c6c:	2c f4       	brge	.+10     	; 0x1c78 <GPIO_writePort+0x3e>
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	9c 81       	ldd	r25, Y+4	; 0x04
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	61 f0       	breq	.+24     	; 0x1c8e <GPIO_writePort+0x54>
    1c76:	1e c0       	rjmp	.+60     	; 0x1cb4 <GPIO_writePort+0x7a>
    1c78:	2b 81       	ldd	r18, Y+3	; 0x03
    1c7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c7c:	22 30       	cpi	r18, 0x02	; 2
    1c7e:	31 05       	cpc	r19, r1
    1c80:	81 f0       	breq	.+32     	; 0x1ca2 <GPIO_writePort+0x68>
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	9c 81       	ldd	r25, Y+4	; 0x04
    1c86:	83 30       	cpi	r24, 0x03	; 3
    1c88:	91 05       	cpc	r25, r1
    1c8a:	81 f0       	breq	.+32     	; 0x1cac <GPIO_writePort+0x72>
    1c8c:	13 c0       	rjmp	.+38     	; 0x1cb4 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1c8e:	eb e3       	ldi	r30, 0x3B	; 59
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	80 83       	st	Z, r24
    1c96:	0e c0       	rjmp	.+28     	; 0x1cb4 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1c98:	e8 e3       	ldi	r30, 0x38	; 56
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9e:	80 83       	st	Z, r24
    1ca0:	09 c0       	rjmp	.+18     	; 0x1cb4 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1ca2:	e5 e3       	ldi	r30, 0x35	; 53
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca8:	80 83       	st	Z, r24
    1caa:	04 c0       	rjmp	.+8      	; 0x1cb4 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1cac:	e2 e3       	ldi	r30, 0x32	; 50
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb2:	80 83       	st	Z, r24
			break;
		}
	}
}
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
    1cba:	0f 90       	pop	r0
    1cbc:	cf 91       	pop	r28
    1cbe:	df 91       	pop	r29
    1cc0:	08 95       	ret

00001cc2 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1cc2:	df 93       	push	r29
    1cc4:	cf 93       	push	r28
    1cc6:	00 d0       	rcall	.+0      	; 0x1cc8 <GPIO_readPort+0x6>
    1cc8:	00 d0       	rcall	.+0      	; 0x1cca <GPIO_readPort+0x8>
    1cca:	cd b7       	in	r28, 0x3d	; 61
    1ccc:	de b7       	in	r29, 0x3e	; 62
    1cce:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1cd0:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd4:	84 30       	cpi	r24, 0x04	; 4
    1cd6:	90 f5       	brcc	.+100    	; 0x1d3c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cda:	28 2f       	mov	r18, r24
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	3c 83       	std	Y+4, r19	; 0x04
    1ce0:	2b 83       	std	Y+3, r18	; 0x03
    1ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce6:	81 30       	cpi	r24, 0x01	; 1
    1ce8:	91 05       	cpc	r25, r1
    1cea:	d1 f0       	breq	.+52     	; 0x1d20 <GPIO_readPort+0x5e>
    1cec:	2b 81       	ldd	r18, Y+3	; 0x03
    1cee:	3c 81       	ldd	r19, Y+4	; 0x04
    1cf0:	22 30       	cpi	r18, 0x02	; 2
    1cf2:	31 05       	cpc	r19, r1
    1cf4:	2c f4       	brge	.+10     	; 0x1d00 <GPIO_readPort+0x3e>
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	61 f0       	breq	.+24     	; 0x1d16 <GPIO_readPort+0x54>
    1cfe:	1e c0       	rjmp	.+60     	; 0x1d3c <GPIO_readPort+0x7a>
    1d00:	2b 81       	ldd	r18, Y+3	; 0x03
    1d02:	3c 81       	ldd	r19, Y+4	; 0x04
    1d04:	22 30       	cpi	r18, 0x02	; 2
    1d06:	31 05       	cpc	r19, r1
    1d08:	81 f0       	breq	.+32     	; 0x1d2a <GPIO_readPort+0x68>
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0e:	83 30       	cpi	r24, 0x03	; 3
    1d10:	91 05       	cpc	r25, r1
    1d12:	81 f0       	breq	.+32     	; 0x1d34 <GPIO_readPort+0x72>
    1d14:	13 c0       	rjmp	.+38     	; 0x1d3c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1d16:	e9 e3       	ldi	r30, 0x39	; 57
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	89 83       	std	Y+1, r24	; 0x01
    1d1e:	0e c0       	rjmp	.+28     	; 0x1d3c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1d20:	e6 e3       	ldi	r30, 0x36	; 54
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	89 83       	std	Y+1, r24	; 0x01
    1d28:	09 c0       	rjmp	.+18     	; 0x1d3c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1d2a:	e3 e3       	ldi	r30, 0x33	; 51
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	89 83       	std	Y+1, r24	; 0x01
    1d32:	04 c0       	rjmp	.+8      	; 0x1d3c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1d34:	e0 e3       	ldi	r30, 0x30	; 48
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	0f 90       	pop	r0
    1d46:	cf 91       	pop	r28
    1d48:	df 91       	pop	r29
    1d4a:	08 95       	ret

00001d4c <__vector_7>:
static volatile void (*g_callBackPtr)(void) = NULL_PTR;
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER1_COMPA_vect)
{
    1d4c:	1f 92       	push	r1
    1d4e:	0f 92       	push	r0
    1d50:	0f b6       	in	r0, 0x3f	; 63
    1d52:	0f 92       	push	r0
    1d54:	11 24       	eor	r1, r1
    1d56:	2f 93       	push	r18
    1d58:	3f 93       	push	r19
    1d5a:	4f 93       	push	r20
    1d5c:	5f 93       	push	r21
    1d5e:	6f 93       	push	r22
    1d60:	7f 93       	push	r23
    1d62:	8f 93       	push	r24
    1d64:	9f 93       	push	r25
    1d66:	af 93       	push	r26
    1d68:	bf 93       	push	r27
    1d6a:	ef 93       	push	r30
    1d6c:	ff 93       	push	r31
    1d6e:	df 93       	push	r29
    1d70:	cf 93       	push	r28
    1d72:	cd b7       	in	r28, 0x3d	; 61
    1d74:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1d76:	80 91 74 01 	lds	r24, 0x0174
    1d7a:	90 91 75 01 	lds	r25, 0x0175
    1d7e:	00 97       	sbiw	r24, 0x00	; 0
    1d80:	29 f0       	breq	.+10     	; 0x1d8c <__vector_7+0x40>
		{
			/* Call the Call Back function in the application*/
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1d82:	e0 91 74 01 	lds	r30, 0x0174
    1d86:	f0 91 75 01 	lds	r31, 0x0175
    1d8a:	09 95       	icall
		}
}
    1d8c:	cf 91       	pop	r28
    1d8e:	df 91       	pop	r29
    1d90:	ff 91       	pop	r31
    1d92:	ef 91       	pop	r30
    1d94:	bf 91       	pop	r27
    1d96:	af 91       	pop	r26
    1d98:	9f 91       	pop	r25
    1d9a:	8f 91       	pop	r24
    1d9c:	7f 91       	pop	r23
    1d9e:	6f 91       	pop	r22
    1da0:	5f 91       	pop	r21
    1da2:	4f 91       	pop	r20
    1da4:	3f 91       	pop	r19
    1da6:	2f 91       	pop	r18
    1da8:	0f 90       	pop	r0
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	0f 90       	pop	r0
    1dae:	1f 90       	pop	r1
    1db0:	18 95       	reti

00001db2 <__vector_9>:
ISR(TIMER1_OVF_vect)
{
    1db2:	1f 92       	push	r1
    1db4:	0f 92       	push	r0
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	0f 92       	push	r0
    1dba:	11 24       	eor	r1, r1
    1dbc:	2f 93       	push	r18
    1dbe:	3f 93       	push	r19
    1dc0:	4f 93       	push	r20
    1dc2:	5f 93       	push	r21
    1dc4:	6f 93       	push	r22
    1dc6:	7f 93       	push	r23
    1dc8:	8f 93       	push	r24
    1dca:	9f 93       	push	r25
    1dcc:	af 93       	push	r26
    1dce:	bf 93       	push	r27
    1dd0:	ef 93       	push	r30
    1dd2:	ff 93       	push	r31
    1dd4:	df 93       	push	r29
    1dd6:	cf 93       	push	r28
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1ddc:	80 91 74 01 	lds	r24, 0x0174
    1de0:	90 91 75 01 	lds	r25, 0x0175
    1de4:	00 97       	sbiw	r24, 0x00	; 0
    1de6:	29 f0       	breq	.+10     	; 0x1df2 <__vector_9+0x40>
		{
			/* Call the Call Back function in the application*/
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1de8:	e0 91 74 01 	lds	r30, 0x0174
    1dec:	f0 91 75 01 	lds	r31, 0x0175
    1df0:	09 95       	icall
		}
}
    1df2:	cf 91       	pop	r28
    1df4:	df 91       	pop	r29
    1df6:	ff 91       	pop	r31
    1df8:	ef 91       	pop	r30
    1dfa:	bf 91       	pop	r27
    1dfc:	af 91       	pop	r26
    1dfe:	9f 91       	pop	r25
    1e00:	8f 91       	pop	r24
    1e02:	7f 91       	pop	r23
    1e04:	6f 91       	pop	r22
    1e06:	5f 91       	pop	r21
    1e08:	4f 91       	pop	r20
    1e0a:	3f 91       	pop	r19
    1e0c:	2f 91       	pop	r18
    1e0e:	0f 90       	pop	r0
    1e10:	0f be       	out	0x3f, r0	; 63
    1e12:	0f 90       	pop	r0
    1e14:	1f 90       	pop	r1
    1e16:	18 95       	reti

00001e18 <Timer1_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    1e18:	df 93       	push	r29
    1e1a:	cf 93       	push	r28
    1e1c:	00 d0       	rcall	.+0      	; 0x1e1e <Timer1_init+0x6>
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
    1e22:	9a 83       	std	Y+2, r25	; 0x02
    1e24:	89 83       	std	Y+1, r24	; 0x01
	SET_VALUE_IN_REG(TCNT1,Config_Ptr->initial_value);	/* Set timer1 initial value */
    1e26:	ac e4       	ldi	r26, 0x4C	; 76
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e2c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e2e:	80 81       	ld	r24, Z
    1e30:	91 81       	ldd	r25, Z+1	; 0x01
    1e32:	11 96       	adiw	r26, 0x01	; 1
    1e34:	9c 93       	st	X, r25
    1e36:	8e 93       	st	-X, r24
	SET_VALUE_IN_REG(TCCR1B,0);
    1e38:	ee e4       	ldi	r30, 0x4E	; 78
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	10 82       	st	Z, r1
	if(Config_Ptr->mode==CTC)
    1e3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e40:	fa 81       	ldd	r31, Y+2	; 0x02
    1e42:	85 81       	ldd	r24, Z+5	; 0x05
    1e44:	84 30       	cpi	r24, 0x04	; 4
    1e46:	c1 f4       	brne	.+48     	; 0x1e78 <Timer1_init+0x60>
	{

		SET_VALUE_IN_REG(OCR1A,Config_Ptr->compare_value);	/* Set the Compare value *) */
    1e48:	aa e4       	ldi	r26, 0x4A	; 74
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e50:	82 81       	ldd	r24, Z+2	; 0x02
    1e52:	93 81       	ldd	r25, Z+3	; 0x03
    1e54:	11 96       	adiw	r26, 0x01	; 1
    1e56:	9c 93       	st	X, r25
    1e58:	8e 93       	st	-X, r24

		SET_BIT(TIMSK,OCIE1A);	/* Enable Timer1 Compare A Interrupt */
    1e5a:	a9 e5       	ldi	r26, 0x59	; 89
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	e9 e5       	ldi	r30, 0x59	; 89
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	80 61       	ori	r24, 0x10	; 16
    1e66:	8c 93       	st	X, r24
			/* Configure timer control register TCCR1B
			 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
			 */
			SET_BIT(TCCR1B,WGM12);
    1e68:	ae e4       	ldi	r26, 0x4E	; 78
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	ee e4       	ldi	r30, 0x4E	; 78
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	88 60       	ori	r24, 0x08	; 8
    1e74:	8c 93       	st	X, r24
    1e76:	0c c0       	rjmp	.+24     	; 0x1e90 <Timer1_init+0x78>
	}
	else if(Config_Ptr->mode==NORMAL)
    1e78:	e9 81       	ldd	r30, Y+1	; 0x01
    1e7a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e7c:	85 81       	ldd	r24, Z+5	; 0x05
    1e7e:	88 23       	and	r24, r24
    1e80:	39 f4       	brne	.+14     	; 0x1e90 <Timer1_init+0x78>
	{
		SET_BIT(TIMSK,TOIE1);		/*enable overflow interrupt*/
    1e82:	a9 e5       	ldi	r26, 0x59	; 89
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e9 e5       	ldi	r30, 0x59	; 89
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	84 60       	ori	r24, 0x04	; 4
    1e8e:	8c 93       	st	X, r24
	/* Configure timer control register TCCR1A
				 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
				 * 2. FOC1A=1 FOC1B=0 non PWM mode
				 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
				 */
				TCCR1A = (1<<FOC1A);
    1e90:	ef e4       	ldi	r30, 0x4F	; 79
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	88 e0       	ldi	r24, 0x08	; 8
    1e96:	80 83       	st	Z, r24
	TCCR1B|=Config_Ptr->prescaler;
    1e98:	ae e4       	ldi	r26, 0x4E	; 78
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	ee e4       	ldi	r30, 0x4E	; 78
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	90 81       	ld	r25, Z
    1ea2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea6:	84 81       	ldd	r24, Z+4	; 0x04
    1ea8:	89 2b       	or	r24, r25
    1eaa:	8c 93       	st	X, r24
}
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	08 95       	ret

00001eb6 <Timer1_deInit>:
void Timer1_deInit(void)
{
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
	SET_VALUE_IN_REG(TCCR1A,0);
    1ebe:	ef e4       	ldi	r30, 0x4F	; 79
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	10 82       	st	Z, r1
	SET_VALUE_IN_REG(TCCR1B,0);
    1ec4:	ee e4       	ldi	r30, 0x4E	; 78
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	10 82       	st	Z, r1
}
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	08 95       	ret

00001ed0 <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void))
{
    1ed0:	df 93       	push	r29
    1ed2:	cf 93       	push	r28
    1ed4:	00 d0       	rcall	.+0      	; 0x1ed6 <Timer1_setCallBack+0x6>
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
    1eda:	9a 83       	std	Y+2, r25	; 0x02
    1edc:	89 83       	std	Y+1, r24	; 0x01

	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
    1ee0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee2:	90 93 75 01 	sts	0x0175, r25
    1ee6:	80 93 74 01 	sts	0x0174, r24
}
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	cf 91       	pop	r28
    1ef0:	df 91       	pop	r29
    1ef2:	08 95       	ret

00001ef4 <Timer0_PWM_Init>:
#include<util/delay.h>
#include"gPio.h"
#include"common_macros.h"

void Timer0_PWM_Init(uint8 set_duty_cycle)
{
    1ef4:	df 93       	push	r29
    1ef6:	cf 93       	push	r28
    1ef8:	0f 92       	push	r0
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
    1efe:	89 83       	std	Y+1, r24	; 0x01
	if(set_duty_cycle==0)
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	88 23       	and	r24, r24
    1f04:	39 f4       	brne	.+14     	; 0x1f14 <Timer0_PWM_Init+0x20>
	{
		TCCR0=0;
    1f06:	e3 e5       	ldi	r30, 0x53	; 83
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	10 82       	st	Z, r1
		OCR0=0;
    1f0c:	ec e5       	ldi	r30, 0x5C	; 92
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	10 82       	st	Z, r1
    1f12:	10 c0       	rjmp	.+32     	; 0x1f34 <Timer0_PWM_Init+0x40>
		return;
	}
	SET_VALUE_IN_REG(TCNT0,0); // Set Timer Initial Value to 0
    1f14:	e2 e5       	ldi	r30, 0x52	; 82
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	10 82       	st	Z, r1
	SET_VALUE_IN_REG(OCR0,set_duty_cycle); //Set Compare value
    1f1a:	ec e5       	ldi	r30, 0x5C	; 92
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	80 83       	st	Z, r24

	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	63 e0       	ldi	r22, 0x03	; 3
    1f26:	41 e0       	ldi	r20, 0x01	; 1
    1f28:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1f2c:	e3 e5       	ldi	r30, 0x53	; 83
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	8a e6       	ldi	r24, 0x6A	; 106
    1f32:	80 83       	st	Z, r24
}
    1f34:	0f 90       	pop	r0
    1f36:	cf 91       	pop	r28
    1f38:	df 91       	pop	r29
    1f3a:	08 95       	ret

00001f3c <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1f3c:	0f 93       	push	r16
    1f3e:	1f 93       	push	r17
    1f40:	df 93       	push	r29
    1f42:	cf 93       	push	r28
    1f44:	00 d0       	rcall	.+0      	; 0x1f46 <TWI_init+0xa>
    1f46:	cd b7       	in	r28, 0x3d	; 61
    1f48:	de b7       	in	r29, 0x3e	; 62
    1f4a:	9a 83       	std	Y+2, r25	; 0x02
    1f4c:	89 83       	std	Y+1, r24	; 0x01
    /* choosing Bit Rate: using zero pre-scaler TWPS=00*/
    TWBR = ((CPU_frequency/(2*Config_Ptr->bit_rate))-8);
    1f4e:	00 e2       	ldi	r16, 0x20	; 32
    1f50:	10 e0       	ldi	r17, 0x00	; 0
    1f52:	e9 81       	ldd	r30, Y+1	; 0x01
    1f54:	fa 81       	ldd	r31, Y+2	; 0x02
    1f56:	81 81       	ldd	r24, Z+1	; 0x01
    1f58:	92 81       	ldd	r25, Z+2	; 0x02
    1f5a:	a3 81       	ldd	r26, Z+3	; 0x03
    1f5c:	b4 81       	ldd	r27, Z+4	; 0x04
    1f5e:	9c 01       	movw	r18, r24
    1f60:	ad 01       	movw	r20, r26
    1f62:	22 0f       	add	r18, r18
    1f64:	33 1f       	adc	r19, r19
    1f66:	44 1f       	adc	r20, r20
    1f68:	55 1f       	adc	r21, r21
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	92 e1       	ldi	r25, 0x12	; 18
    1f6e:	aa e7       	ldi	r26, 0x7A	; 122
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	bc 01       	movw	r22, r24
    1f74:	cd 01       	movw	r24, r26
    1f76:	0e 94 67 11 	call	0x22ce	; 0x22ce <__udivmodsi4>
    1f7a:	da 01       	movw	r26, r20
    1f7c:	c9 01       	movw	r24, r18
    1f7e:	88 50       	subi	r24, 0x08	; 8
    1f80:	f8 01       	movw	r30, r16
    1f82:	80 83       	st	Z, r24
	TWSR = 0x00;
    1f84:	e1 e2       	ldi	r30, 0x21	; 33
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->address; // my address = 0x01 :)
    1f8a:	a2 e2       	ldi	r26, 0x22	; 34
    1f8c:	b0 e0       	ldi	r27, 0x00	; 0
    1f8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f90:	fa 81       	ldd	r31, Y+2	; 0x02
    1f92:	80 81       	ld	r24, Z
    1f94:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1f96:	e6 e5       	ldi	r30, 0x56	; 86
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	84 e0       	ldi	r24, 0x04	; 4
    1f9c:	80 83       	st	Z, r24
}
    1f9e:	0f 90       	pop	r0
    1fa0:	0f 90       	pop	r0
    1fa2:	cf 91       	pop	r28
    1fa4:	df 91       	pop	r29
    1fa6:	1f 91       	pop	r17
    1fa8:	0f 91       	pop	r16
    1faa:	08 95       	ret

00001fac <TWI_start>:

void TWI_start(void)
{
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1fb4:	e6 e5       	ldi	r30, 0x56	; 86
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	84 ea       	ldi	r24, 0xA4	; 164
    1fba:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1fbc:	e6 e5       	ldi	r30, 0x56	; 86
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	80 81       	ld	r24, Z
    1fc2:	88 23       	and	r24, r24
    1fc4:	dc f7       	brge	.-10     	; 0x1fbc <TWI_start+0x10>
}
    1fc6:	cf 91       	pop	r28
    1fc8:	df 91       	pop	r29
    1fca:	08 95       	ret

00001fcc <TWI_stop>:

void TWI_stop(void)
{
    1fcc:	df 93       	push	r29
    1fce:	cf 93       	push	r28
    1fd0:	cd b7       	in	r28, 0x3d	; 61
    1fd2:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1fd4:	e6 e5       	ldi	r30, 0x56	; 86
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	84 e9       	ldi	r24, 0x94	; 148
    1fda:	80 83       	st	Z, r24
}
    1fdc:	cf 91       	pop	r28
    1fde:	df 91       	pop	r29
    1fe0:	08 95       	ret

00001fe2 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1fe2:	df 93       	push	r29
    1fe4:	cf 93       	push	r28
    1fe6:	0f 92       	push	r0
    1fe8:	cd b7       	in	r28, 0x3d	; 61
    1fea:	de b7       	in	r29, 0x3e	; 62
    1fec:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1fee:	e3 e2       	ldi	r30, 0x23	; 35
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	89 81       	ldd	r24, Y+1	; 0x01
    1ff4:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1ff6:	e6 e5       	ldi	r30, 0x56	; 86
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	84 e8       	ldi	r24, 0x84	; 132
    1ffc:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1ffe:	e6 e5       	ldi	r30, 0x56	; 86
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	88 23       	and	r24, r24
    2006:	dc f7       	brge	.-10     	; 0x1ffe <TWI_writeByte+0x1c>
}
    2008:	0f 90       	pop	r0
    200a:	cf 91       	pop	r28
    200c:	df 91       	pop	r29
    200e:	08 95       	ret

00002010 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2018:	e6 e5       	ldi	r30, 0x56	; 86
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	84 ec       	ldi	r24, 0xC4	; 196
    201e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2020:	e6 e5       	ldi	r30, 0x56	; 86
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	88 23       	and	r24, r24
    2028:	dc f7       	brge	.-10     	; 0x2020 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    202a:	e3 e2       	ldi	r30, 0x23	; 35
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
}
    2030:	cf 91       	pop	r28
    2032:	df 91       	pop	r29
    2034:	08 95       	ret

00002036 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2036:	df 93       	push	r29
    2038:	cf 93       	push	r28
    203a:	cd b7       	in	r28, 0x3d	; 61
    203c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    203e:	e6 e5       	ldi	r30, 0x56	; 86
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	84 e8       	ldi	r24, 0x84	; 132
    2044:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2046:	e6 e5       	ldi	r30, 0x56	; 86
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	88 23       	and	r24, r24
    204e:	dc f7       	brge	.-10     	; 0x2046 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2050:	e3 e2       	ldi	r30, 0x23	; 35
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
}
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	08 95       	ret

0000205c <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	0f 92       	push	r0
    2062:	cd b7       	in	r28, 0x3d	; 61
    2064:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2066:	e1 e2       	ldi	r30, 0x21	; 33
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	88 7f       	andi	r24, 0xF8	; 248
    206e:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2070:	89 81       	ldd	r24, Y+1	; 0x01
}
    2072:	0f 90       	pop	r0
    2074:	cf 91       	pop	r28
    2076:	df 91       	pop	r29
    2078:	08 95       	ret

0000207a <__vector_13>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
ISR(USART_RXC_vect)
{
    207a:	1f 92       	push	r1
    207c:	0f 92       	push	r0
    207e:	0f b6       	in	r0, 0x3f	; 63
    2080:	0f 92       	push	r0
    2082:	11 24       	eor	r1, r1
    2084:	2f 93       	push	r18
    2086:	8f 93       	push	r24
    2088:	9f 93       	push	r25
    208a:	ef 93       	push	r30
    208c:	ff 93       	push	r31
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
	g_PASSWORD[flag]=UDR;
    2096:	80 91 76 01 	lds	r24, 0x0176
    209a:	88 2f       	mov	r24, r24
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	ec e2       	ldi	r30, 0x2C	; 44
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	20 81       	ld	r18, Z
    20a4:	fc 01       	movw	r30, r24
    20a6:	e8 58       	subi	r30, 0x88	; 136
    20a8:	fe 4f       	sbci	r31, 0xFE	; 254
    20aa:	20 83       	st	Z, r18
	flag++;
    20ac:	80 91 76 01 	lds	r24, 0x0176
    20b0:	8f 5f       	subi	r24, 0xFF	; 255
    20b2:	80 93 76 01 	sts	0x0176, r24
}
    20b6:	cf 91       	pop	r28
    20b8:	df 91       	pop	r29
    20ba:	ff 91       	pop	r31
    20bc:	ef 91       	pop	r30
    20be:	9f 91       	pop	r25
    20c0:	8f 91       	pop	r24
    20c2:	2f 91       	pop	r18
    20c4:	0f 90       	pop	r0
    20c6:	0f be       	out	0x3f, r0	; 63
    20c8:	0f 90       	pop	r0
    20ca:	1f 90       	pop	r1
    20cc:	18 95       	reti

000020ce <UART_init>:
void UART_init(const UART_ConfigType * Config_Ptr)
{
    20ce:	df 93       	push	r29
    20d0:	cf 93       	push	r28
    20d2:	00 d0       	rcall	.+0      	; 0x20d4 <UART_init+0x6>
    20d4:	00 d0       	rcall	.+0      	; 0x20d6 <UART_init+0x8>
    20d6:	cd b7       	in	r28, 0x3d	; 61
    20d8:	de b7       	in	r29, 0x3e	; 62
    20da:	9c 83       	std	Y+4, r25	; 0x04
    20dc:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    20de:	1a 82       	std	Y+2, r1	; 0x02
    20e0:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    20e2:	eb e2       	ldi	r30, 0x2B	; 43
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	82 e0       	ldi	r24, 0x02	; 2
    20e8:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN)|(1<<RXCIE);
    20ea:	ea e2       	ldi	r30, 0x2A	; 42
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	88 e9       	ldi	r24, 0x98	; 152
    20f0:	80 83       	st	Z, r24
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    20f2:	e0 e4       	ldi	r30, 0x40	; 64
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	86 e8       	ldi	r24, 0x86	; 134
    20f8:	80 83       	st	Z, r24
	UCSRC|=(Config_Ptr->parity);
    20fa:	a0 e4       	ldi	r26, 0x40	; 64
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e0 e4       	ldi	r30, 0x40	; 64
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	90 81       	ld	r25, Z
    2104:	eb 81       	ldd	r30, Y+3	; 0x03
    2106:	fc 81       	ldd	r31, Y+4	; 0x04
    2108:	81 81       	ldd	r24, Z+1	; 0x01
    210a:	89 2b       	or	r24, r25
    210c:	8c 93       	st	X, r24
	UCSRC|=(Config_Ptr->stop_bit);
    210e:	a0 e4       	ldi	r26, 0x40	; 64
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	e0 e4       	ldi	r30, 0x40	; 64
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	90 81       	ld	r25, Z
    2118:	eb 81       	ldd	r30, Y+3	; 0x03
    211a:	fc 81       	ldd	r31, Y+4	; 0x04
    211c:	82 81       	ldd	r24, Z+2	; 0x02
    211e:	89 2b       	or	r24, r25
    2120:	8c 93       	st	X, r24
	UCSRC|=(Config_Ptr->bit_data);
    2122:	a0 e4       	ldi	r26, 0x40	; 64
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	e0 e4       	ldi	r30, 0x40	; 64
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	90 81       	ld	r25, Z
    212c:	eb 81       	ldd	r30, Y+3	; 0x03
    212e:	fc 81       	ldd	r31, Y+4	; 0x04
    2130:	80 81       	ld	r24, Z
    2132:	89 2b       	or	r24, r25
    2134:	8c 93       	st	X, r24
	if(Config_Ptr->bit_data==BITS_9)
    2136:	eb 81       	ldd	r30, Y+3	; 0x03
    2138:	fc 81       	ldd	r31, Y+4	; 0x04
    213a:	80 81       	ld	r24, Z
    213c:	86 30       	cpi	r24, 0x06	; 6
    213e:	39 f4       	brne	.+14     	; 0x214e <UART_init+0x80>
	{
		SET_BIT(UCSRC,UCSZ2);
    2140:	a0 e4       	ldi	r26, 0x40	; 64
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	e0 e4       	ldi	r30, 0x40	; 64
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	84 60       	ori	r24, 0x04	; 4
    214c:	8c 93       	st	X, r24
	}
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    214e:	eb 81       	ldd	r30, Y+3	; 0x03
    2150:	fc 81       	ldd	r31, Y+4	; 0x04
    2152:	83 81       	ldd	r24, Z+3	; 0x03
    2154:	94 81       	ldd	r25, Z+4	; 0x04
    2156:	a5 81       	ldd	r26, Z+5	; 0x05
    2158:	b6 81       	ldd	r27, Z+6	; 0x06
    215a:	88 0f       	add	r24, r24
    215c:	99 1f       	adc	r25, r25
    215e:	aa 1f       	adc	r26, r26
    2160:	bb 1f       	adc	r27, r27
    2162:	88 0f       	add	r24, r24
    2164:	99 1f       	adc	r25, r25
    2166:	aa 1f       	adc	r26, r26
    2168:	bb 1f       	adc	r27, r27
    216a:	88 0f       	add	r24, r24
    216c:	99 1f       	adc	r25, r25
    216e:	aa 1f       	adc	r26, r26
    2170:	bb 1f       	adc	r27, r27
    2172:	9c 01       	movw	r18, r24
    2174:	ad 01       	movw	r20, r26
    2176:	80 e0       	ldi	r24, 0x00	; 0
    2178:	92 e1       	ldi	r25, 0x12	; 18
    217a:	aa e7       	ldi	r26, 0x7A	; 122
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	bc 01       	movw	r22, r24
    2180:	cd 01       	movw	r24, r26
    2182:	0e 94 67 11 	call	0x22ce	; 0x22ce <__udivmodsi4>
    2186:	da 01       	movw	r26, r20
    2188:	c9 01       	movw	r24, r18
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	9a 83       	std	Y+2, r25	; 0x02
    218e:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2190:	e0 e4       	ldi	r30, 0x40	; 64
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	9a 81       	ldd	r25, Y+2	; 0x02
    2198:	89 2f       	mov	r24, r25
    219a:	99 27       	eor	r25, r25
    219c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    219e:	e9 e2       	ldi	r30, 0x29	; 41
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	80 83       	st	Z, r24
}
    21a6:	0f 90       	pop	r0
    21a8:	0f 90       	pop	r0
    21aa:	0f 90       	pop	r0
    21ac:	0f 90       	pop	r0
    21ae:	cf 91       	pop	r28
    21b0:	df 91       	pop	r29
    21b2:	08 95       	ret

000021b4 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    21b4:	df 93       	push	r29
    21b6:	cf 93       	push	r28
    21b8:	0f 92       	push	r0
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    21be:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    21c0:	eb e2       	ldi	r30, 0x2B	; 43
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	80 81       	ld	r24, Z
    21c6:	88 2f       	mov	r24, r24
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	80 72       	andi	r24, 0x20	; 32
    21cc:	90 70       	andi	r25, 0x00	; 0
    21ce:	00 97       	sbiw	r24, 0x00	; 0
    21d0:	b9 f3       	breq	.-18     	; 0x21c0 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    21d2:	ec e2       	ldi	r30, 0x2C	; 44
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    21da:	0f 90       	pop	r0
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    21ea:	ec e2       	ldi	r30, 0x2C	; 44
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	80 81       	ld	r24, Z
}
    21f0:	cf 91       	pop	r28
    21f2:	df 91       	pop	r29
    21f4:	08 95       	ret

000021f6 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    21f6:	df 93       	push	r29
    21f8:	cf 93       	push	r28
    21fa:	00 d0       	rcall	.+0      	; 0x21fc <UART_sendString+0x6>
    21fc:	0f 92       	push	r0
    21fe:	cd b7       	in	r28, 0x3d	; 61
    2200:	de b7       	in	r29, 0x3e	; 62
    2202:	9b 83       	std	Y+3, r25	; 0x03
    2204:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2206:	19 82       	std	Y+1, r1	; 0x01
    2208:	0e c0       	rjmp	.+28     	; 0x2226 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    220a:	89 81       	ldd	r24, Y+1	; 0x01
    220c:	28 2f       	mov	r18, r24
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	8a 81       	ldd	r24, Y+2	; 0x02
    2212:	9b 81       	ldd	r25, Y+3	; 0x03
    2214:	fc 01       	movw	r30, r24
    2216:	e2 0f       	add	r30, r18
    2218:	f3 1f       	adc	r31, r19
    221a:	80 81       	ld	r24, Z
    221c:	0e 94 da 10 	call	0x21b4	; 0x21b4 <UART_sendByte>
		i++;
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	8f 5f       	subi	r24, 0xFF	; 255
    2224:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2226:	89 81       	ldd	r24, Y+1	; 0x01
    2228:	28 2f       	mov	r18, r24
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	8a 81       	ldd	r24, Y+2	; 0x02
    222e:	9b 81       	ldd	r25, Y+3	; 0x03
    2230:	fc 01       	movw	r30, r24
    2232:	e2 0f       	add	r30, r18
    2234:	f3 1f       	adc	r31, r19
    2236:	80 81       	ld	r24, Z
    2238:	88 23       	and	r24, r24
    223a:	39 f7       	brne	.-50     	; 0x220a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    223c:	0f 90       	pop	r0
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	08 95       	ret

00002248 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2248:	0f 93       	push	r16
    224a:	1f 93       	push	r17
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	00 d0       	rcall	.+0      	; 0x2252 <UART_receiveString+0xa>
    2252:	0f 92       	push	r0
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
    2258:	9b 83       	std	Y+3, r25	; 0x03
    225a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    225c:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	28 2f       	mov	r18, r24
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	8a 81       	ldd	r24, Y+2	; 0x02
    2266:	9b 81       	ldd	r25, Y+3	; 0x03
    2268:	8c 01       	movw	r16, r24
    226a:	02 0f       	add	r16, r18
    226c:	13 1f       	adc	r17, r19
    226e:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <UART_recieveByte>
    2272:	f8 01       	movw	r30, r16
    2274:	80 83       	st	Z, r24
    2276:	0f c0       	rjmp	.+30     	; 0x2296 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	8f 5f       	subi	r24, 0xFF	; 255
    227c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    227e:	89 81       	ldd	r24, Y+1	; 0x01
    2280:	28 2f       	mov	r18, r24
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	8a 81       	ldd	r24, Y+2	; 0x02
    2286:	9b 81       	ldd	r25, Y+3	; 0x03
    2288:	8c 01       	movw	r16, r24
    228a:	02 0f       	add	r16, r18
    228c:	13 1f       	adc	r17, r19
    228e:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <UART_recieveByte>
    2292:	f8 01       	movw	r30, r16
    2294:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2296:	89 81       	ldd	r24, Y+1	; 0x01
    2298:	28 2f       	mov	r18, r24
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	8a 81       	ldd	r24, Y+2	; 0x02
    229e:	9b 81       	ldd	r25, Y+3	; 0x03
    22a0:	fc 01       	movw	r30, r24
    22a2:	e2 0f       	add	r30, r18
    22a4:	f3 1f       	adc	r31, r19
    22a6:	80 81       	ld	r24, Z
    22a8:	83 32       	cpi	r24, 0x23	; 35
    22aa:	31 f7       	brne	.-52     	; 0x2278 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    22ac:	89 81       	ldd	r24, Y+1	; 0x01
    22ae:	28 2f       	mov	r18, r24
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	8a 81       	ldd	r24, Y+2	; 0x02
    22b4:	9b 81       	ldd	r25, Y+3	; 0x03
    22b6:	fc 01       	movw	r30, r24
    22b8:	e2 0f       	add	r30, r18
    22ba:	f3 1f       	adc	r31, r19
    22bc:	10 82       	st	Z, r1
}
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	cf 91       	pop	r28
    22c6:	df 91       	pop	r29
    22c8:	1f 91       	pop	r17
    22ca:	0f 91       	pop	r16
    22cc:	08 95       	ret

000022ce <__udivmodsi4>:
    22ce:	a1 e2       	ldi	r26, 0x21	; 33
    22d0:	1a 2e       	mov	r1, r26
    22d2:	aa 1b       	sub	r26, r26
    22d4:	bb 1b       	sub	r27, r27
    22d6:	fd 01       	movw	r30, r26
    22d8:	0d c0       	rjmp	.+26     	; 0x22f4 <__udivmodsi4_ep>

000022da <__udivmodsi4_loop>:
    22da:	aa 1f       	adc	r26, r26
    22dc:	bb 1f       	adc	r27, r27
    22de:	ee 1f       	adc	r30, r30
    22e0:	ff 1f       	adc	r31, r31
    22e2:	a2 17       	cp	r26, r18
    22e4:	b3 07       	cpc	r27, r19
    22e6:	e4 07       	cpc	r30, r20
    22e8:	f5 07       	cpc	r31, r21
    22ea:	20 f0       	brcs	.+8      	; 0x22f4 <__udivmodsi4_ep>
    22ec:	a2 1b       	sub	r26, r18
    22ee:	b3 0b       	sbc	r27, r19
    22f0:	e4 0b       	sbc	r30, r20
    22f2:	f5 0b       	sbc	r31, r21

000022f4 <__udivmodsi4_ep>:
    22f4:	66 1f       	adc	r22, r22
    22f6:	77 1f       	adc	r23, r23
    22f8:	88 1f       	adc	r24, r24
    22fa:	99 1f       	adc	r25, r25
    22fc:	1a 94       	dec	r1
    22fe:	69 f7       	brne	.-38     	; 0x22da <__udivmodsi4_loop>
    2300:	60 95       	com	r22
    2302:	70 95       	com	r23
    2304:	80 95       	com	r24
    2306:	90 95       	com	r25
    2308:	9b 01       	movw	r18, r22
    230a:	ac 01       	movw	r20, r24
    230c:	bd 01       	movw	r22, r26
    230e:	cf 01       	movw	r24, r30
    2310:	08 95       	ret

00002312 <__prologue_saves__>:
    2312:	2f 92       	push	r2
    2314:	3f 92       	push	r3
    2316:	4f 92       	push	r4
    2318:	5f 92       	push	r5
    231a:	6f 92       	push	r6
    231c:	7f 92       	push	r7
    231e:	8f 92       	push	r8
    2320:	9f 92       	push	r9
    2322:	af 92       	push	r10
    2324:	bf 92       	push	r11
    2326:	cf 92       	push	r12
    2328:	df 92       	push	r13
    232a:	ef 92       	push	r14
    232c:	ff 92       	push	r15
    232e:	0f 93       	push	r16
    2330:	1f 93       	push	r17
    2332:	cf 93       	push	r28
    2334:	df 93       	push	r29
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
    233a:	ca 1b       	sub	r28, r26
    233c:	db 0b       	sbc	r29, r27
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	f8 94       	cli
    2342:	de bf       	out	0x3e, r29	; 62
    2344:	0f be       	out	0x3f, r0	; 63
    2346:	cd bf       	out	0x3d, r28	; 61
    2348:	09 94       	ijmp

0000234a <__epilogue_restores__>:
    234a:	2a 88       	ldd	r2, Y+18	; 0x12
    234c:	39 88       	ldd	r3, Y+17	; 0x11
    234e:	48 88       	ldd	r4, Y+16	; 0x10
    2350:	5f 84       	ldd	r5, Y+15	; 0x0f
    2352:	6e 84       	ldd	r6, Y+14	; 0x0e
    2354:	7d 84       	ldd	r7, Y+13	; 0x0d
    2356:	8c 84       	ldd	r8, Y+12	; 0x0c
    2358:	9b 84       	ldd	r9, Y+11	; 0x0b
    235a:	aa 84       	ldd	r10, Y+10	; 0x0a
    235c:	b9 84       	ldd	r11, Y+9	; 0x09
    235e:	c8 84       	ldd	r12, Y+8	; 0x08
    2360:	df 80       	ldd	r13, Y+7	; 0x07
    2362:	ee 80       	ldd	r14, Y+6	; 0x06
    2364:	fd 80       	ldd	r15, Y+5	; 0x05
    2366:	0c 81       	ldd	r16, Y+4	; 0x04
    2368:	1b 81       	ldd	r17, Y+3	; 0x03
    236a:	aa 81       	ldd	r26, Y+2	; 0x02
    236c:	b9 81       	ldd	r27, Y+1	; 0x01
    236e:	ce 0f       	add	r28, r30
    2370:	d1 1d       	adc	r29, r1
    2372:	0f b6       	in	r0, 0x3f	; 63
    2374:	f8 94       	cli
    2376:	de bf       	out	0x3e, r29	; 62
    2378:	0f be       	out	0x3f, r0	; 63
    237a:	cd bf       	out	0x3d, r28	; 61
    237c:	ed 01       	movw	r28, r26
    237e:	08 95       	ret

00002380 <_exit>:
    2380:	f8 94       	cli

00002382 <__stop_program>:
    2382:	ff cf       	rjmp	.-2      	; 0x2382 <__stop_program>
