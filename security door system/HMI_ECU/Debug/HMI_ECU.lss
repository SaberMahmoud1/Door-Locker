
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008e  00800060  00002b1e  00002bb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008000ee  008000ee  00002c40  2**0
                  ALLOC
  3 .stab         000027a8  00000000  00000000  00002c40  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000108a  00000000  00000000  000053e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006472  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000065b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006722  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000836b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009256  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a004  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a164  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a3f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000abbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e1       	ldi	r30, 0x1E	; 30
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3e       	cpi	r26, 0xEE	; 238
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae ee       	ldi	r26, 0xEE	; 238
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3f       	cpi	r26, 0xFA	; 250
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 72 09 	call	0x12e4	; 0x12e4 <main>
      8a:	0c 94 8d 15 	jmp	0x2b1a	; 0x2b1a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 11 15 	jmp	0x2a22	; 0x2a22 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae ed       	ldi	r26, 0xDE	; 222
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2d 15 	jmp	0x2a5a	; 0x2a5a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1d 15 	jmp	0x2a3a	; 0x2a3a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 39 15 	jmp	0x2a72	; 0x2a72 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1d 15 	jmp	0x2a3a	; 0x2a3a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 39 15 	jmp	0x2a72	; 0x2a72 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 11 15 	jmp	0x2a22	; 0x2a22 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e ed       	ldi	r24, 0xDE	; 222
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2d 15 	jmp	0x2a5a	; 0x2a5a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1d 15 	jmp	0x2a3a	; 0x2a3a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 39 15 	jmp	0x2a72	; 0x2a72 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 1d 15 	jmp	0x2a3a	; 0x2a3a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 39 15 	jmp	0x2a72	; 0x2a72 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 1d 15 	jmp	0x2a3a	; 0x2a3a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 39 15 	jmp	0x2a72	; 0x2a72 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 21 15 	jmp	0x2a42	; 0x2a42 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 3d 15 	jmp	0x2a7a	; 0x2a7a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <change_password>:
#include<util/delay.h>
#include<avr/io.h>
#include"common_macros.h"
uint8 password[11];
void change_password()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	ed 97       	sbiw	r28, 0x3d	; 61
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	unsigned char key;


	uint8 password_counter=1,password_counter2=6;
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	8c af       	std	Y+60, r24	; 0x3c
     b5e:	86 e0       	ldi	r24, 0x06	; 6
     b60:	8b af       	std	Y+59, r24	; 0x3b
	boolean flag=FALSE,flag2=FALSE;
     b62:	1a ae       	std	Y+58, r1	; 0x3a
     b64:	19 ae       	std	Y+57, r1	; 0x39
	while(TRUE)
	{
		if(flag==TRUE)
     b66:	8a ad       	ldd	r24, Y+58	; 0x3a
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	31 f4       	brne	.+12     	; 0xb78 <change_password+0x32>
		{
			password_counter=1;
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	8c af       	std	Y+60, r24	; 0x3c
			flag=FALSE;
     b70:	1a ae       	std	Y+58, r1	; 0x3a
				password_counter++;
			}
			_delay_ms(500); /* Press time */
		}
	}
	LCD_clearScreen();
     b72:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <LCD_clearScreen>
     b76:	21 c1       	rjmp	.+578    	; 0xdba <change_password+0x274>
		{
			password_counter=1;
			flag=FALSE;
			break;
		}
		LCD_displayString("plz enter pass:");
     b78:	80 e6       	ldi	r24, 0x60	; 96
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	0e 94 2a 13 	call	0x2654	; 0x2654 <LCD_displayString>
		LCD_moveCursor(1,0); /* Move the cursor to the second row */
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_moveCursor>
		/* Get the pressed key number, if any switch pressed for more than 500 ms it will considered more than one press */
		/* Get the pressed key number, if any switch pressed for more than 500 ms it will considered more than one press */
		while(1)
		{
			key = KEYPAD_getPressedKey();
     b88:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <KEYPAD_getPressedKey>
     b8c:	8d af       	std	Y+61, r24	; 0x3d
			if(key=='=')
     b8e:	8d ad       	ldd	r24, Y+61	; 0x3d
     b90:	8d 33       	cpi	r24, 0x3D	; 61
     b92:	09 f0       	breq	.+2      	; 0xb96 <change_password+0x50>
     b94:	91 c0       	rjmp	.+290    	; 0xcb8 <change_password+0x172>
			{
				if(password_counter!=6)
     b96:	8c ad       	ldd	r24, Y+60	; 0x3c
     b98:	86 30       	cpi	r24, 0x06	; 6
     b9a:	09 f4       	brne	.+2      	; 0xb9e <change_password+0x58>
     b9c:	8a c0       	rjmp	.+276    	; 0xcb2 <change_password+0x16c>
				{
					flag=FALSE;
     b9e:	1a ae       	std	Y+58, r1	; 0x3a
					LCD_clearScreen();
     ba0:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <LCD_clearScreen>
					LCD_moveCursor(0,2);
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	62 e0       	ldi	r22, 0x02	; 2
     ba8:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_moveCursor>
					LCD_displayString("choose five");
     bac:	80 e7       	ldi	r24, 0x70	; 112
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	0e 94 2a 13 	call	0x2654	; 0x2654 <LCD_displayString>
					LCD_moveCursor(1,4);
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	64 e0       	ldi	r22, 0x04	; 4
     bb8:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_moveCursor>
					LCD_displayString(" digits");
     bbc:	8c e7       	ldi	r24, 0x7C	; 124
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	0e 94 2a 13 	call	0x2654	; 0x2654 <LCD_displayString>
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	a8 ec       	ldi	r26, 0xC8	; 200
     bca:	b2 e4       	ldi	r27, 0x42	; 66
     bcc:	8d ab       	std	Y+53, r24	; 0x35
     bce:	9e ab       	std	Y+54, r25	; 0x36
     bd0:	af ab       	std	Y+55, r26	; 0x37
     bd2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bd4:	6d a9       	ldd	r22, Y+53	; 0x35
     bd6:	7e a9       	ldd	r23, Y+54	; 0x36
     bd8:	8f a9       	ldd	r24, Y+55	; 0x37
     bda:	98 ad       	ldd	r25, Y+56	; 0x38
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	4a e7       	ldi	r20, 0x7A	; 122
     be2:	53 e4       	ldi	r21, 0x43	; 67
     be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be8:	dc 01       	movw	r26, r24
     bea:	cb 01       	movw	r24, r22
     bec:	89 ab       	std	Y+49, r24	; 0x31
     bee:	9a ab       	std	Y+50, r25	; 0x32
     bf0:	ab ab       	std	Y+51, r26	; 0x33
     bf2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     bf4:	69 a9       	ldd	r22, Y+49	; 0x31
     bf6:	7a a9       	ldd	r23, Y+50	; 0x32
     bf8:	8b a9       	ldd	r24, Y+51	; 0x33
     bfa:	9c a9       	ldd	r25, Y+52	; 0x34
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	40 e8       	ldi	r20, 0x80	; 128
     c02:	5f e3       	ldi	r21, 0x3F	; 63
     c04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c08:	88 23       	and	r24, r24
     c0a:	2c f4       	brge	.+10     	; 0xc16 <change_password+0xd0>
		__ticks = 1;
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	98 ab       	std	Y+48, r25	; 0x30
     c12:	8f a7       	std	Y+47, r24	; 0x2f
     c14:	3f c0       	rjmp	.+126    	; 0xc94 <change_password+0x14e>
	else if (__tmp > 65535)
     c16:	69 a9       	ldd	r22, Y+49	; 0x31
     c18:	7a a9       	ldd	r23, Y+50	; 0x32
     c1a:	8b a9       	ldd	r24, Y+51	; 0x33
     c1c:	9c a9       	ldd	r25, Y+52	; 0x34
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	3f ef       	ldi	r19, 0xFF	; 255
     c22:	4f e7       	ldi	r20, 0x7F	; 127
     c24:	57 e4       	ldi	r21, 0x47	; 71
     c26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c2a:	18 16       	cp	r1, r24
     c2c:	4c f5       	brge	.+82     	; 0xc80 <change_password+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c2e:	6d a9       	ldd	r22, Y+53	; 0x35
     c30:	7e a9       	ldd	r23, Y+54	; 0x36
     c32:	8f a9       	ldd	r24, Y+55	; 0x37
     c34:	98 ad       	ldd	r25, Y+56	; 0x38
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	40 e2       	ldi	r20, 0x20	; 32
     c3c:	51 e4       	ldi	r21, 0x41	; 65
     c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	bc 01       	movw	r22, r24
     c48:	cd 01       	movw	r24, r26
     c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4e:	dc 01       	movw	r26, r24
     c50:	cb 01       	movw	r24, r22
     c52:	98 ab       	std	Y+48, r25	; 0x30
     c54:	8f a7       	std	Y+47, r24	; 0x2f
     c56:	0f c0       	rjmp	.+30     	; 0xc76 <change_password+0x130>
     c58:	89 e1       	ldi	r24, 0x19	; 25
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	9e a7       	std	Y+46, r25	; 0x2e
     c5e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c60:	8d a5       	ldd	r24, Y+45	; 0x2d
     c62:	9e a5       	ldd	r25, Y+46	; 0x2e
     c64:	01 97       	sbiw	r24, 0x01	; 1
     c66:	f1 f7       	brne	.-4      	; 0xc64 <change_password+0x11e>
     c68:	9e a7       	std	Y+46, r25	; 0x2e
     c6a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c6c:	8f a5       	ldd	r24, Y+47	; 0x2f
     c6e:	98 a9       	ldd	r25, Y+48	; 0x30
     c70:	01 97       	sbiw	r24, 0x01	; 1
     c72:	98 ab       	std	Y+48, r25	; 0x30
     c74:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c76:	8f a5       	ldd	r24, Y+47	; 0x2f
     c78:	98 a9       	ldd	r25, Y+48	; 0x30
     c7a:	00 97       	sbiw	r24, 0x00	; 0
     c7c:	69 f7       	brne	.-38     	; 0xc58 <change_password+0x112>
     c7e:	14 c0       	rjmp	.+40     	; 0xca8 <change_password+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c80:	69 a9       	ldd	r22, Y+49	; 0x31
     c82:	7a a9       	ldd	r23, Y+50	; 0x32
     c84:	8b a9       	ldd	r24, Y+51	; 0x33
     c86:	9c a9       	ldd	r25, Y+52	; 0x34
     c88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c8c:	dc 01       	movw	r26, r24
     c8e:	cb 01       	movw	r24, r22
     c90:	98 ab       	std	Y+48, r25	; 0x30
     c92:	8f a7       	std	Y+47, r24	; 0x2f
     c94:	8f a5       	ldd	r24, Y+47	; 0x2f
     c96:	98 a9       	ldd	r25, Y+48	; 0x30
     c98:	9c a7       	std	Y+44, r25	; 0x2c
     c9a:	8b a7       	std	Y+43, r24	; 0x2b
     c9c:	8b a5       	ldd	r24, Y+43	; 0x2b
     c9e:	9c a5       	ldd	r25, Y+44	; 0x2c
     ca0:	01 97       	sbiw	r24, 0x01	; 1
     ca2:	f1 f7       	brne	.-4      	; 0xca0 <change_password+0x15a>
     ca4:	9c a7       	std	Y+44, r25	; 0x2c
     ca6:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(100);
					LCD_clearScreen();
     ca8:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <LCD_clearScreen>
					password_counter=1;
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	8c af       	std	Y+60, r24	; 0x3c
     cb0:	5a cf       	rjmp	.-332    	; 0xb66 <change_password+0x20>
				}
				else
					flag=TRUE;
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	8a af       	std	Y+58, r24	; 0x3a
     cb6:	57 cf       	rjmp	.-338    	; 0xb66 <change_password+0x20>
				break;
			}
			else if(key<=9||key>=0)
			{
				password[password_counter]=key;
     cb8:	8c ad       	ldd	r24, Y+60	; 0x3c
     cba:	88 2f       	mov	r24, r24
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	fc 01       	movw	r30, r24
     cc0:	e1 51       	subi	r30, 0x11	; 17
     cc2:	ff 4f       	sbci	r31, 0xFF	; 255
     cc4:	8d ad       	ldd	r24, Y+61	; 0x3d
     cc6:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
     cc8:	8a e2       	ldi	r24, 0x2A	; 42
     cca:	0e 94 3b 11 	call	0x2276	; 0x2276 <LCD_displayCharacter>
				password_counter++;
     cce:	8c ad       	ldd	r24, Y+60	; 0x3c
     cd0:	8f 5f       	subi	r24, 0xFF	; 255
     cd2:	8c af       	std	Y+60, r24	; 0x3c
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	aa ef       	ldi	r26, 0xFA	; 250
     cda:	b3 e4       	ldi	r27, 0x43	; 67
     cdc:	8f a3       	std	Y+39, r24	; 0x27
     cde:	98 a7       	std	Y+40, r25	; 0x28
     ce0:	a9 a7       	std	Y+41, r26	; 0x29
     ce2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ce4:	6f a1       	ldd	r22, Y+39	; 0x27
     ce6:	78 a5       	ldd	r23, Y+40	; 0x28
     ce8:	89 a5       	ldd	r24, Y+41	; 0x29
     cea:	9a a5       	ldd	r25, Y+42	; 0x2a
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	4a e7       	ldi	r20, 0x7A	; 122
     cf2:	53 e4       	ldi	r21, 0x43	; 67
     cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cf8:	dc 01       	movw	r26, r24
     cfa:	cb 01       	movw	r24, r22
     cfc:	8b a3       	std	Y+35, r24	; 0x23
     cfe:	9c a3       	std	Y+36, r25	; 0x24
     d00:	ad a3       	std	Y+37, r26	; 0x25
     d02:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     d04:	6b a1       	ldd	r22, Y+35	; 0x23
     d06:	7c a1       	ldd	r23, Y+36	; 0x24
     d08:	8d a1       	ldd	r24, Y+37	; 0x25
     d0a:	9e a1       	ldd	r25, Y+38	; 0x26
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	40 e8       	ldi	r20, 0x80	; 128
     d12:	5f e3       	ldi	r21, 0x3F	; 63
     d14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d18:	88 23       	and	r24, r24
     d1a:	2c f4       	brge	.+10     	; 0xd26 <change_password+0x1e0>
		__ticks = 1;
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	9a a3       	std	Y+34, r25	; 0x22
     d22:	89 a3       	std	Y+33, r24	; 0x21
     d24:	3f c0       	rjmp	.+126    	; 0xda4 <change_password+0x25e>
	else if (__tmp > 65535)
     d26:	6b a1       	ldd	r22, Y+35	; 0x23
     d28:	7c a1       	ldd	r23, Y+36	; 0x24
     d2a:	8d a1       	ldd	r24, Y+37	; 0x25
     d2c:	9e a1       	ldd	r25, Y+38	; 0x26
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	3f ef       	ldi	r19, 0xFF	; 255
     d32:	4f e7       	ldi	r20, 0x7F	; 127
     d34:	57 e4       	ldi	r21, 0x47	; 71
     d36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d3a:	18 16       	cp	r1, r24
     d3c:	4c f5       	brge	.+82     	; 0xd90 <change_password+0x24a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d3e:	6f a1       	ldd	r22, Y+39	; 0x27
     d40:	78 a5       	ldd	r23, Y+40	; 0x28
     d42:	89 a5       	ldd	r24, Y+41	; 0x29
     d44:	9a a5       	ldd	r25, Y+42	; 0x2a
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	40 e2       	ldi	r20, 0x20	; 32
     d4c:	51 e4       	ldi	r21, 0x41	; 65
     d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d52:	dc 01       	movw	r26, r24
     d54:	cb 01       	movw	r24, r22
     d56:	bc 01       	movw	r22, r24
     d58:	cd 01       	movw	r24, r26
     d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d5e:	dc 01       	movw	r26, r24
     d60:	cb 01       	movw	r24, r22
     d62:	9a a3       	std	Y+34, r25	; 0x22
     d64:	89 a3       	std	Y+33, r24	; 0x21
     d66:	0f c0       	rjmp	.+30     	; 0xd86 <change_password+0x240>
     d68:	89 e1       	ldi	r24, 0x19	; 25
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	98 a3       	std	Y+32, r25	; 0x20
     d6e:	8f 8f       	std	Y+31, r24	; 0x1f
     d70:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d72:	98 a1       	ldd	r25, Y+32	; 0x20
     d74:	01 97       	sbiw	r24, 0x01	; 1
     d76:	f1 f7       	brne	.-4      	; 0xd74 <change_password+0x22e>
     d78:	98 a3       	std	Y+32, r25	; 0x20
     d7a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d7c:	89 a1       	ldd	r24, Y+33	; 0x21
     d7e:	9a a1       	ldd	r25, Y+34	; 0x22
     d80:	01 97       	sbiw	r24, 0x01	; 1
     d82:	9a a3       	std	Y+34, r25	; 0x22
     d84:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d86:	89 a1       	ldd	r24, Y+33	; 0x21
     d88:	9a a1       	ldd	r25, Y+34	; 0x22
     d8a:	00 97       	sbiw	r24, 0x00	; 0
     d8c:	69 f7       	brne	.-38     	; 0xd68 <change_password+0x222>
     d8e:	fc ce       	rjmp	.-520    	; 0xb88 <change_password+0x42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d90:	6b a1       	ldd	r22, Y+35	; 0x23
     d92:	7c a1       	ldd	r23, Y+36	; 0x24
     d94:	8d a1       	ldd	r24, Y+37	; 0x25
     d96:	9e a1       	ldd	r25, Y+38	; 0x26
     d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d9c:	dc 01       	movw	r26, r24
     d9e:	cb 01       	movw	r24, r22
     da0:	9a a3       	std	Y+34, r25	; 0x22
     da2:	89 a3       	std	Y+33, r24	; 0x21
     da4:	89 a1       	ldd	r24, Y+33	; 0x21
     da6:	9a a1       	ldd	r25, Y+34	; 0x22
     da8:	9e 8f       	std	Y+30, r25	; 0x1e
     daa:	8d 8f       	std	Y+29, r24	; 0x1d
     dac:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dae:	9e 8d       	ldd	r25, Y+30	; 0x1e
     db0:	01 97       	sbiw	r24, 0x01	; 1
     db2:	f1 f7       	brne	.-4      	; 0xdb0 <change_password+0x26a>
     db4:	9e 8f       	std	Y+30, r25	; 0x1e
     db6:	8d 8f       	std	Y+29, r24	; 0x1d
     db8:	e7 ce       	rjmp	.-562    	; 0xb88 <change_password+0x42>
		}
	}
	LCD_clearScreen();
	while(TRUE)
	{
		if(flag2==TRUE)
     dba:	89 ad       	ldd	r24, Y+57	; 0x39
     dbc:	81 30       	cpi	r24, 0x01	; 1
     dbe:	71 f4       	brne	.+28     	; 0xddc <change_password+0x296>
		{flag2=FALSE;
     dc0:	19 ae       	std	Y+57, r1	; 0x39
		password_counter2=1;
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	8b af       	std	Y+59, r24	; 0x3b

			}
			_delay_ms(500); /* Press time */
		}
	}
	LCD_clearScreen();
     dc6:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <LCD_clearScreen>
}
     dca:	ed 96       	adiw	r28, 0x3d	; 61
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	f8 94       	cli
     dd0:	de bf       	out	0x3e, r29	; 62
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	cd bf       	out	0x3d, r28	; 61
     dd6:	cf 91       	pop	r28
     dd8:	df 91       	pop	r29
     dda:	08 95       	ret
	{
		if(flag2==TRUE)
		{flag2=FALSE;
		password_counter2=1;
		break;}
		LCD_displayString("plz re_enter the");
     ddc:	84 e8       	ldi	r24, 0x84	; 132
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 94 2a 13 	call	0x2654	; 0x2654 <LCD_displayString>
		LCD_moveCursor(1,0); /* Move the cursor to the second row */
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	60 e0       	ldi	r22, 0x00	; 0
     de8:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_moveCursor>
		LCD_displayString("same pass:");
     dec:	85 e9       	ldi	r24, 0x95	; 149
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	0e 94 2a 13 	call	0x2654	; 0x2654 <LCD_displayString>
		/* Get the pressed key number, if any switch pressed for more than 500 ms it will considered more than one press */
		/* Get the pressed key number, if any switch pressed for more than 500 ms it will considered more than one press */
		while(1)
		{
			key = KEYPAD_getPressedKey();
     df4:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <KEYPAD_getPressedKey>
     df8:	8d af       	std	Y+61, r24	; 0x3d
			if(key=='=')
     dfa:	8d ad       	ldd	r24, Y+61	; 0x3d
     dfc:	8d 33       	cpi	r24, 0x3D	; 61
     dfe:	09 f0       	breq	.+2      	; 0xe02 <change_password+0x2bc>
     e00:	91 c0       	rjmp	.+290    	; 0xf24 <change_password+0x3de>
			{
				if(password_counter2!=11)
     e02:	8b ad       	ldd	r24, Y+59	; 0x3b
     e04:	8b 30       	cpi	r24, 0x0B	; 11
     e06:	09 f4       	brne	.+2      	; 0xe0a <change_password+0x2c4>
     e08:	8a c0       	rjmp	.+276    	; 0xf1e <change_password+0x3d8>
				{
					flag2=FALSE;
     e0a:	19 ae       	std	Y+57, r1	; 0x39
					LCD_clearScreen();
     e0c:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <LCD_clearScreen>
					LCD_moveCursor(0,2);
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	62 e0       	ldi	r22, 0x02	; 2
     e14:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_moveCursor>
					LCD_displayString("choose five");
     e18:	80 e7       	ldi	r24, 0x70	; 112
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	0e 94 2a 13 	call	0x2654	; 0x2654 <LCD_displayString>
					LCD_moveCursor(1,4);
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	64 e0       	ldi	r22, 0x04	; 4
     e24:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_moveCursor>
					LCD_displayString(" digits");
     e28:	8c e7       	ldi	r24, 0x7C	; 124
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	0e 94 2a 13 	call	0x2654	; 0x2654 <LCD_displayString>
					password_counter2=1;
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	8b af       	std	Y+59, r24	; 0x3b
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	a8 ec       	ldi	r26, 0xC8	; 200
     e3a:	b2 e4       	ldi	r27, 0x42	; 66
     e3c:	89 8f       	std	Y+25, r24	; 0x19
     e3e:	9a 8f       	std	Y+26, r25	; 0x1a
     e40:	ab 8f       	std	Y+27, r26	; 0x1b
     e42:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e44:	69 8d       	ldd	r22, Y+25	; 0x19
     e46:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e48:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	4a e7       	ldi	r20, 0x7A	; 122
     e52:	53 e4       	ldi	r21, 0x43	; 67
     e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e58:	dc 01       	movw	r26, r24
     e5a:	cb 01       	movw	r24, r22
     e5c:	8d 8b       	std	Y+21, r24	; 0x15
     e5e:	9e 8b       	std	Y+22, r25	; 0x16
     e60:	af 8b       	std	Y+23, r26	; 0x17
     e62:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e64:	6d 89       	ldd	r22, Y+21	; 0x15
     e66:	7e 89       	ldd	r23, Y+22	; 0x16
     e68:	8f 89       	ldd	r24, Y+23	; 0x17
     e6a:	98 8d       	ldd	r25, Y+24	; 0x18
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	40 e8       	ldi	r20, 0x80	; 128
     e72:	5f e3       	ldi	r21, 0x3F	; 63
     e74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e78:	88 23       	and	r24, r24
     e7a:	2c f4       	brge	.+10     	; 0xe86 <change_password+0x340>
		__ticks = 1;
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	9c 8b       	std	Y+20, r25	; 0x14
     e82:	8b 8b       	std	Y+19, r24	; 0x13
     e84:	3f c0       	rjmp	.+126    	; 0xf04 <change_password+0x3be>
	else if (__tmp > 65535)
     e86:	6d 89       	ldd	r22, Y+21	; 0x15
     e88:	7e 89       	ldd	r23, Y+22	; 0x16
     e8a:	8f 89       	ldd	r24, Y+23	; 0x17
     e8c:	98 8d       	ldd	r25, Y+24	; 0x18
     e8e:	20 e0       	ldi	r18, 0x00	; 0
     e90:	3f ef       	ldi	r19, 0xFF	; 255
     e92:	4f e7       	ldi	r20, 0x7F	; 127
     e94:	57 e4       	ldi	r21, 0x47	; 71
     e96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e9a:	18 16       	cp	r1, r24
     e9c:	4c f5       	brge	.+82     	; 0xef0 <change_password+0x3aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e9e:	69 8d       	ldd	r22, Y+25	; 0x19
     ea0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ea2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ea4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	40 e2       	ldi	r20, 0x20	; 32
     eac:	51 e4       	ldi	r21, 0x41	; 65
     eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb2:	dc 01       	movw	r26, r24
     eb4:	cb 01       	movw	r24, r22
     eb6:	bc 01       	movw	r22, r24
     eb8:	cd 01       	movw	r24, r26
     eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ebe:	dc 01       	movw	r26, r24
     ec0:	cb 01       	movw	r24, r22
     ec2:	9c 8b       	std	Y+20, r25	; 0x14
     ec4:	8b 8b       	std	Y+19, r24	; 0x13
     ec6:	0f c0       	rjmp	.+30     	; 0xee6 <change_password+0x3a0>
     ec8:	89 e1       	ldi	r24, 0x19	; 25
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	9a 8b       	std	Y+18, r25	; 0x12
     ece:	89 8b       	std	Y+17, r24	; 0x11
     ed0:	89 89       	ldd	r24, Y+17	; 0x11
     ed2:	9a 89       	ldd	r25, Y+18	; 0x12
     ed4:	01 97       	sbiw	r24, 0x01	; 1
     ed6:	f1 f7       	brne	.-4      	; 0xed4 <change_password+0x38e>
     ed8:	9a 8b       	std	Y+18, r25	; 0x12
     eda:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     edc:	8b 89       	ldd	r24, Y+19	; 0x13
     ede:	9c 89       	ldd	r25, Y+20	; 0x14
     ee0:	01 97       	sbiw	r24, 0x01	; 1
     ee2:	9c 8b       	std	Y+20, r25	; 0x14
     ee4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee6:	8b 89       	ldd	r24, Y+19	; 0x13
     ee8:	9c 89       	ldd	r25, Y+20	; 0x14
     eea:	00 97       	sbiw	r24, 0x00	; 0
     eec:	69 f7       	brne	.-38     	; 0xec8 <change_password+0x382>
     eee:	14 c0       	rjmp	.+40     	; 0xf18 <change_password+0x3d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef0:	6d 89       	ldd	r22, Y+21	; 0x15
     ef2:	7e 89       	ldd	r23, Y+22	; 0x16
     ef4:	8f 89       	ldd	r24, Y+23	; 0x17
     ef6:	98 8d       	ldd	r25, Y+24	; 0x18
     ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     efc:	dc 01       	movw	r26, r24
     efe:	cb 01       	movw	r24, r22
     f00:	9c 8b       	std	Y+20, r25	; 0x14
     f02:	8b 8b       	std	Y+19, r24	; 0x13
     f04:	8b 89       	ldd	r24, Y+19	; 0x13
     f06:	9c 89       	ldd	r25, Y+20	; 0x14
     f08:	98 8b       	std	Y+16, r25	; 0x10
     f0a:	8f 87       	std	Y+15, r24	; 0x0f
     f0c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f0e:	98 89       	ldd	r25, Y+16	; 0x10
     f10:	01 97       	sbiw	r24, 0x01	; 1
     f12:	f1 f7       	brne	.-4      	; 0xf10 <change_password+0x3ca>
     f14:	98 8b       	std	Y+16, r25	; 0x10
     f16:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(100);
					LCD_clearScreen();
     f18:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <LCD_clearScreen>
     f1c:	4e cf       	rjmp	.-356    	; 0xdba <change_password+0x274>
				}
				else
					flag2=TRUE;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	89 af       	std	Y+57, r24	; 0x39
     f22:	4b cf       	rjmp	.-362    	; 0xdba <change_password+0x274>
				break;
			}
			else if(key<=9||key>=0)
			{
				password[password_counter2]=key;
     f24:	8b ad       	ldd	r24, Y+59	; 0x3b
     f26:	88 2f       	mov	r24, r24
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	fc 01       	movw	r30, r24
     f2c:	e1 51       	subi	r30, 0x11	; 17
     f2e:	ff 4f       	sbci	r31, 0xFF	; 255
     f30:	8d ad       	ldd	r24, Y+61	; 0x3d
     f32:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
     f34:	8a e2       	ldi	r24, 0x2A	; 42
     f36:	0e 94 3b 11 	call	0x2276	; 0x2276 <LCD_displayCharacter>
				password_counter2++;
     f3a:	8b ad       	ldd	r24, Y+59	; 0x3b
     f3c:	8f 5f       	subi	r24, 0xFF	; 255
     f3e:	8b af       	std	Y+59, r24	; 0x3b
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	aa ef       	ldi	r26, 0xFA	; 250
     f46:	b3 e4       	ldi	r27, 0x43	; 67
     f48:	8b 87       	std	Y+11, r24	; 0x0b
     f4a:	9c 87       	std	Y+12, r25	; 0x0c
     f4c:	ad 87       	std	Y+13, r26	; 0x0d
     f4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f50:	6b 85       	ldd	r22, Y+11	; 0x0b
     f52:	7c 85       	ldd	r23, Y+12	; 0x0c
     f54:	8d 85       	ldd	r24, Y+13	; 0x0d
     f56:	9e 85       	ldd	r25, Y+14	; 0x0e
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	4a e7       	ldi	r20, 0x7A	; 122
     f5e:	53 e4       	ldi	r21, 0x43	; 67
     f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f64:	dc 01       	movw	r26, r24
     f66:	cb 01       	movw	r24, r22
     f68:	8f 83       	std	Y+7, r24	; 0x07
     f6a:	98 87       	std	Y+8, r25	; 0x08
     f6c:	a9 87       	std	Y+9, r26	; 0x09
     f6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f70:	6f 81       	ldd	r22, Y+7	; 0x07
     f72:	78 85       	ldd	r23, Y+8	; 0x08
     f74:	89 85       	ldd	r24, Y+9	; 0x09
     f76:	9a 85       	ldd	r25, Y+10	; 0x0a
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	40 e8       	ldi	r20, 0x80	; 128
     f7e:	5f e3       	ldi	r21, 0x3F	; 63
     f80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f84:	88 23       	and	r24, r24
     f86:	2c f4       	brge	.+10     	; 0xf92 <change_password+0x44c>
		__ticks = 1;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	9e 83       	std	Y+6, r25	; 0x06
     f8e:	8d 83       	std	Y+5, r24	; 0x05
     f90:	3f c0       	rjmp	.+126    	; 0x1010 <change_password+0x4ca>
	else if (__tmp > 65535)
     f92:	6f 81       	ldd	r22, Y+7	; 0x07
     f94:	78 85       	ldd	r23, Y+8	; 0x08
     f96:	89 85       	ldd	r24, Y+9	; 0x09
     f98:	9a 85       	ldd	r25, Y+10	; 0x0a
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	3f ef       	ldi	r19, 0xFF	; 255
     f9e:	4f e7       	ldi	r20, 0x7F	; 127
     fa0:	57 e4       	ldi	r21, 0x47	; 71
     fa2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fa6:	18 16       	cp	r1, r24
     fa8:	4c f5       	brge	.+82     	; 0xffc <change_password+0x4b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     faa:	6b 85       	ldd	r22, Y+11	; 0x0b
     fac:	7c 85       	ldd	r23, Y+12	; 0x0c
     fae:	8d 85       	ldd	r24, Y+13	; 0x0d
     fb0:	9e 85       	ldd	r25, Y+14	; 0x0e
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	40 e2       	ldi	r20, 0x20	; 32
     fb8:	51 e4       	ldi	r21, 0x41	; 65
     fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	bc 01       	movw	r22, r24
     fc4:	cd 01       	movw	r24, r26
     fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	9e 83       	std	Y+6, r25	; 0x06
     fd0:	8d 83       	std	Y+5, r24	; 0x05
     fd2:	0f c0       	rjmp	.+30     	; 0xff2 <change_password+0x4ac>
     fd4:	89 e1       	ldi	r24, 0x19	; 25
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	9c 83       	std	Y+4, r25	; 0x04
     fda:	8b 83       	std	Y+3, r24	; 0x03
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	9c 81       	ldd	r25, Y+4	; 0x04
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	f1 f7       	brne	.-4      	; 0xfe0 <change_password+0x49a>
     fe4:	9c 83       	std	Y+4, r25	; 0x04
     fe6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe8:	8d 81       	ldd	r24, Y+5	; 0x05
     fea:	9e 81       	ldd	r25, Y+6	; 0x06
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	9e 83       	std	Y+6, r25	; 0x06
     ff0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff2:	8d 81       	ldd	r24, Y+5	; 0x05
     ff4:	9e 81       	ldd	r25, Y+6	; 0x06
     ff6:	00 97       	sbiw	r24, 0x00	; 0
     ff8:	69 f7       	brne	.-38     	; 0xfd4 <change_password+0x48e>
     ffa:	fc ce       	rjmp	.-520    	; 0xdf4 <change_password+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ffc:	6f 81       	ldd	r22, Y+7	; 0x07
     ffe:	78 85       	ldd	r23, Y+8	; 0x08
    1000:	89 85       	ldd	r24, Y+9	; 0x09
    1002:	9a 85       	ldd	r25, Y+10	; 0x0a
    1004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1008:	dc 01       	movw	r26, r24
    100a:	cb 01       	movw	r24, r22
    100c:	9e 83       	std	Y+6, r25	; 0x06
    100e:	8d 83       	std	Y+5, r24	; 0x05
    1010:	8d 81       	ldd	r24, Y+5	; 0x05
    1012:	9e 81       	ldd	r25, Y+6	; 0x06
    1014:	9a 83       	std	Y+2, r25	; 0x02
    1016:	89 83       	std	Y+1, r24	; 0x01
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	9a 81       	ldd	r25, Y+2	; 0x02
    101c:	01 97       	sbiw	r24, 0x01	; 1
    101e:	f1 f7       	brne	.-4      	; 0x101c <change_password+0x4d6>
    1020:	9a 83       	std	Y+2, r25	; 0x02
    1022:	89 83       	std	Y+1, r24	; 0x01
    1024:	e7 ce       	rjmp	.-562    	; 0xdf4 <change_password+0x2ae>

00001026 <enter_password>:
		}
	}
	LCD_clearScreen();
}
void enter_password()
{
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	6f 97       	sbiw	r28, 0x1f	; 31
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	cd bf       	out	0x3d, r28	; 61
	uint8 key;
	uint8 password_counter3=1;
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	8e 8f       	std	Y+30, r24	; 0x1e
	boolean flag3=FALSE;
    103e:	1d 8e       	std	Y+29, r1	; 0x1d
	while(1)
	{
		LCD_clearScreen();
    1040:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <LCD_clearScreen>
		LCD_displayString("please enter");
    1044:	80 ea       	ldi	r24, 0xA0	; 160
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	0e 94 2a 13 	call	0x2654	; 0x2654 <LCD_displayString>
		LCD_moveCursor(1, 0);
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_moveCursor>
		LCD_displayString(" pass:");
    1054:	8d ea       	ldi	r24, 0xAD	; 173
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	0e 94 2a 13 	call	0x2654	; 0x2654 <LCD_displayString>
		key = KEYPAD_getPressedKey();
    105c:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <KEYPAD_getPressedKey>
    1060:	8f 8f       	std	Y+31, r24	; 0x1f
		while(1)
		{
			key = KEYPAD_getPressedKey();
    1062:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <KEYPAD_getPressedKey>
    1066:	8f 8f       	std	Y+31, r24	; 0x1f
			if(key=='=')
    1068:	8f 8d       	ldd	r24, Y+31	; 0x1f
    106a:	8d 33       	cpi	r24, 0x3D	; 61
    106c:	09 f0       	breq	.+2      	; 0x1070 <enter_password+0x4a>
    106e:	8e c0       	rjmp	.+284    	; 0x118c <enter_password+0x166>
			{
				if(password_counter3!=6)
    1070:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1072:	86 30       	cpi	r24, 0x06	; 6
    1074:	09 f4       	brne	.+2      	; 0x1078 <enter_password+0x52>
    1076:	0b c1       	rjmp	.+534    	; 0x128e <enter_password+0x268>
				{
					flag3=FALSE;
    1078:	1d 8e       	std	Y+29, r1	; 0x1d
					LCD_clearScreen();
    107a:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <LCD_clearScreen>
					LCD_moveCursor(0,2);
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	62 e0       	ldi	r22, 0x02	; 2
    1082:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_moveCursor>
					LCD_displayString("choose five");
    1086:	80 e7       	ldi	r24, 0x70	; 112
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	0e 94 2a 13 	call	0x2654	; 0x2654 <LCD_displayString>
					LCD_moveCursor(1,4);
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	64 e0       	ldi	r22, 0x04	; 4
    1092:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_moveCursor>
					LCD_displayString(" digits");
    1096:	8c e7       	ldi	r24, 0x7C	; 124
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	0e 94 2a 13 	call	0x2654	; 0x2654 <LCD_displayString>
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	a8 ec       	ldi	r26, 0xC8	; 200
    10a4:	b2 e4       	ldi	r27, 0x42	; 66
    10a6:	89 8f       	std	Y+25, r24	; 0x19
    10a8:	9a 8f       	std	Y+26, r25	; 0x1a
    10aa:	ab 8f       	std	Y+27, r26	; 0x1b
    10ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ae:	69 8d       	ldd	r22, Y+25	; 0x19
    10b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	4a e7       	ldi	r20, 0x7A	; 122
    10bc:	53 e4       	ldi	r21, 0x43	; 67
    10be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10c2:	dc 01       	movw	r26, r24
    10c4:	cb 01       	movw	r24, r22
    10c6:	8d 8b       	std	Y+21, r24	; 0x15
    10c8:	9e 8b       	std	Y+22, r25	; 0x16
    10ca:	af 8b       	std	Y+23, r26	; 0x17
    10cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    10ce:	6d 89       	ldd	r22, Y+21	; 0x15
    10d0:	7e 89       	ldd	r23, Y+22	; 0x16
    10d2:	8f 89       	ldd	r24, Y+23	; 0x17
    10d4:	98 8d       	ldd	r25, Y+24	; 0x18
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	40 e8       	ldi	r20, 0x80	; 128
    10dc:	5f e3       	ldi	r21, 0x3F	; 63
    10de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10e2:	88 23       	and	r24, r24
    10e4:	2c f4       	brge	.+10     	; 0x10f0 <enter_password+0xca>
		__ticks = 1;
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	9c 8b       	std	Y+20, r25	; 0x14
    10ec:	8b 8b       	std	Y+19, r24	; 0x13
    10ee:	3f c0       	rjmp	.+126    	; 0x116e <enter_password+0x148>
	else if (__tmp > 65535)
    10f0:	6d 89       	ldd	r22, Y+21	; 0x15
    10f2:	7e 89       	ldd	r23, Y+22	; 0x16
    10f4:	8f 89       	ldd	r24, Y+23	; 0x17
    10f6:	98 8d       	ldd	r25, Y+24	; 0x18
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	3f ef       	ldi	r19, 0xFF	; 255
    10fc:	4f e7       	ldi	r20, 0x7F	; 127
    10fe:	57 e4       	ldi	r21, 0x47	; 71
    1100:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1104:	18 16       	cp	r1, r24
    1106:	4c f5       	brge	.+82     	; 0x115a <enter_password+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1108:	69 8d       	ldd	r22, Y+25	; 0x19
    110a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    110c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    110e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	40 e2       	ldi	r20, 0x20	; 32
    1116:	51 e4       	ldi	r21, 0x41	; 65
    1118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	bc 01       	movw	r22, r24
    1122:	cd 01       	movw	r24, r26
    1124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	9c 8b       	std	Y+20, r25	; 0x14
    112e:	8b 8b       	std	Y+19, r24	; 0x13
    1130:	0f c0       	rjmp	.+30     	; 0x1150 <enter_password+0x12a>
    1132:	89 e1       	ldi	r24, 0x19	; 25
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	9a 8b       	std	Y+18, r25	; 0x12
    1138:	89 8b       	std	Y+17, r24	; 0x11
    113a:	89 89       	ldd	r24, Y+17	; 0x11
    113c:	9a 89       	ldd	r25, Y+18	; 0x12
    113e:	01 97       	sbiw	r24, 0x01	; 1
    1140:	f1 f7       	brne	.-4      	; 0x113e <enter_password+0x118>
    1142:	9a 8b       	std	Y+18, r25	; 0x12
    1144:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1146:	8b 89       	ldd	r24, Y+19	; 0x13
    1148:	9c 89       	ldd	r25, Y+20	; 0x14
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	9c 8b       	std	Y+20, r25	; 0x14
    114e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1150:	8b 89       	ldd	r24, Y+19	; 0x13
    1152:	9c 89       	ldd	r25, Y+20	; 0x14
    1154:	00 97       	sbiw	r24, 0x00	; 0
    1156:	69 f7       	brne	.-38     	; 0x1132 <enter_password+0x10c>
    1158:	14 c0       	rjmp	.+40     	; 0x1182 <enter_password+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    115a:	6d 89       	ldd	r22, Y+21	; 0x15
    115c:	7e 89       	ldd	r23, Y+22	; 0x16
    115e:	8f 89       	ldd	r24, Y+23	; 0x17
    1160:	98 8d       	ldd	r25, Y+24	; 0x18
    1162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	9c 8b       	std	Y+20, r25	; 0x14
    116c:	8b 8b       	std	Y+19, r24	; 0x13
    116e:	8b 89       	ldd	r24, Y+19	; 0x13
    1170:	9c 89       	ldd	r25, Y+20	; 0x14
    1172:	98 8b       	std	Y+16, r25	; 0x10
    1174:	8f 87       	std	Y+15, r24	; 0x0f
    1176:	8f 85       	ldd	r24, Y+15	; 0x0f
    1178:	98 89       	ldd	r25, Y+16	; 0x10
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	f1 f7       	brne	.-4      	; 0x117a <enter_password+0x154>
    117e:	98 8b       	std	Y+16, r25	; 0x10
    1180:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(100);
					LCD_clearScreen();
    1182:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <LCD_clearScreen>
					password_counter3=1;
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	8e 8f       	std	Y+30, r24	; 0x1e
    118a:	0e c0       	rjmp	.+28     	; 0x11a8 <enter_password+0x182>
				else
					return;
			}
			else if(key<=9||key>=0)
			{
				password[password_counter3]=key;
    118c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    118e:	88 2f       	mov	r24, r24
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	fc 01       	movw	r30, r24
    1194:	e1 51       	subi	r30, 0x11	; 17
    1196:	ff 4f       	sbci	r31, 0xFF	; 255
    1198:	8f 8d       	ldd	r24, Y+31	; 0x1f
    119a:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
    119c:	8a e2       	ldi	r24, 0x2A	; 42
    119e:	0e 94 3b 11 	call	0x2276	; 0x2276 <LCD_displayCharacter>
				password_counter3++;
    11a2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11a4:	8f 5f       	subi	r24, 0xFF	; 255
    11a6:	8e 8f       	std	Y+30, r24	; 0x1e
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	aa ef       	ldi	r26, 0xFA	; 250
    11ae:	b3 e4       	ldi	r27, 0x43	; 67
    11b0:	8b 87       	std	Y+11, r24	; 0x0b
    11b2:	9c 87       	std	Y+12, r25	; 0x0c
    11b4:	ad 87       	std	Y+13, r26	; 0x0d
    11b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    11bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    11be:	9e 85       	ldd	r25, Y+14	; 0x0e
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	4a e7       	ldi	r20, 0x7A	; 122
    11c6:	53 e4       	ldi	r21, 0x43	; 67
    11c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11cc:	dc 01       	movw	r26, r24
    11ce:	cb 01       	movw	r24, r22
    11d0:	8f 83       	std	Y+7, r24	; 0x07
    11d2:	98 87       	std	Y+8, r25	; 0x08
    11d4:	a9 87       	std	Y+9, r26	; 0x09
    11d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11d8:	6f 81       	ldd	r22, Y+7	; 0x07
    11da:	78 85       	ldd	r23, Y+8	; 0x08
    11dc:	89 85       	ldd	r24, Y+9	; 0x09
    11de:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	40 e8       	ldi	r20, 0x80	; 128
    11e6:	5f e3       	ldi	r21, 0x3F	; 63
    11e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ec:	88 23       	and	r24, r24
    11ee:	2c f4       	brge	.+10     	; 0x11fa <enter_password+0x1d4>
		__ticks = 1;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	9e 83       	std	Y+6, r25	; 0x06
    11f6:	8d 83       	std	Y+5, r24	; 0x05
    11f8:	3f c0       	rjmp	.+126    	; 0x1278 <enter_password+0x252>
	else if (__tmp > 65535)
    11fa:	6f 81       	ldd	r22, Y+7	; 0x07
    11fc:	78 85       	ldd	r23, Y+8	; 0x08
    11fe:	89 85       	ldd	r24, Y+9	; 0x09
    1200:	9a 85       	ldd	r25, Y+10	; 0x0a
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	3f ef       	ldi	r19, 0xFF	; 255
    1206:	4f e7       	ldi	r20, 0x7F	; 127
    1208:	57 e4       	ldi	r21, 0x47	; 71
    120a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    120e:	18 16       	cp	r1, r24
    1210:	4c f5       	brge	.+82     	; 0x1264 <enter_password+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1212:	6b 85       	ldd	r22, Y+11	; 0x0b
    1214:	7c 85       	ldd	r23, Y+12	; 0x0c
    1216:	8d 85       	ldd	r24, Y+13	; 0x0d
    1218:	9e 85       	ldd	r25, Y+14	; 0x0e
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	40 e2       	ldi	r20, 0x20	; 32
    1220:	51 e4       	ldi	r21, 0x41	; 65
    1222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1226:	dc 01       	movw	r26, r24
    1228:	cb 01       	movw	r24, r22
    122a:	bc 01       	movw	r22, r24
    122c:	cd 01       	movw	r24, r26
    122e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	9e 83       	std	Y+6, r25	; 0x06
    1238:	8d 83       	std	Y+5, r24	; 0x05
    123a:	0f c0       	rjmp	.+30     	; 0x125a <enter_password+0x234>
    123c:	89 e1       	ldi	r24, 0x19	; 25
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	9c 83       	std	Y+4, r25	; 0x04
    1242:	8b 83       	std	Y+3, r24	; 0x03
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	9c 81       	ldd	r25, Y+4	; 0x04
    1248:	01 97       	sbiw	r24, 0x01	; 1
    124a:	f1 f7       	brne	.-4      	; 0x1248 <enter_password+0x222>
    124c:	9c 83       	std	Y+4, r25	; 0x04
    124e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1250:	8d 81       	ldd	r24, Y+5	; 0x05
    1252:	9e 81       	ldd	r25, Y+6	; 0x06
    1254:	01 97       	sbiw	r24, 0x01	; 1
    1256:	9e 83       	std	Y+6, r25	; 0x06
    1258:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    125a:	8d 81       	ldd	r24, Y+5	; 0x05
    125c:	9e 81       	ldd	r25, Y+6	; 0x06
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	69 f7       	brne	.-38     	; 0x123c <enter_password+0x216>
    1262:	ff ce       	rjmp	.-514    	; 0x1062 <enter_password+0x3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1264:	6f 81       	ldd	r22, Y+7	; 0x07
    1266:	78 85       	ldd	r23, Y+8	; 0x08
    1268:	89 85       	ldd	r24, Y+9	; 0x09
    126a:	9a 85       	ldd	r25, Y+10	; 0x0a
    126c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	9e 83       	std	Y+6, r25	; 0x06
    1276:	8d 83       	std	Y+5, r24	; 0x05
    1278:	8d 81       	ldd	r24, Y+5	; 0x05
    127a:	9e 81       	ldd	r25, Y+6	; 0x06
    127c:	9a 83       	std	Y+2, r25	; 0x02
    127e:	89 83       	std	Y+1, r24	; 0x01
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	9a 81       	ldd	r25, Y+2	; 0x02
    1284:	01 97       	sbiw	r24, 0x01	; 1
    1286:	f1 f7       	brne	.-4      	; 0x1284 <enter_password+0x25e>
    1288:	9a 83       	std	Y+2, r25	; 0x02
    128a:	89 83       	std	Y+1, r24	; 0x01
    128c:	ea ce       	rjmp	.-556    	; 0x1062 <enter_password+0x3c>
			}
			_delay_ms(500); /* Press time */
		}
	}
}
    128e:	6f 96       	adiw	r28, 0x1f	; 31
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	f8 94       	cli
    1294:	de bf       	out	0x3e, r29	; 62
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	cd bf       	out	0x3d, r28	; 61
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <open_door>:
void open_door()
{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(4);
    12a8:	84 e0       	ldi	r24, 0x04	; 4
    12aa:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <UART_sendByte>
	while(g_flag);
    12ae:	80 91 e6 00 	lds	r24, 0x00E6
    12b2:	88 23       	and	r24, r24
    12b4:	e1 f7       	brne	.-8      	; 0x12ae <open_door+0xe>
	g_flag=TRUE;
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	80 93 e6 00 	sts	0x00E6, r24
}
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	08 95       	ret

000012c2 <run_buzzer>:
void run_buzzer()
{
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(3);
    12ca:	83 e0       	ldi	r24, 0x03	; 3
    12cc:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <UART_sendByte>
	while(g_flag);
    12d0:	80 91 e6 00 	lds	r24, 0x00E6
    12d4:	88 23       	and	r24, r24
    12d6:	e1 f7       	brne	.-8      	; 0x12d0 <run_buzzer+0xe>
	g_flag=TRUE;
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	80 93 e6 00 	sts	0x00E6, r24
}
    12de:	cf 91       	pop	r28
    12e0:	df 91       	pop	r29
    12e2:	08 95       	ret

000012e4 <main>:
int main(void)
{
    12e4:	df 93       	push	r29
    12e6:	cf 93       	push	r28
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	6f 97       	sbiw	r28, 0x1f	; 31
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	de bf       	out	0x3e, r29	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	cd bf       	out	0x3d, r28	; 61
	/*initialize the LCD*/
	LCD_init();
    12f8:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <LCD_init>
	/*variable to hold the pressed key*/
	uint8 key;
	/*config the UART*/
	UART_ConfigType UART_config={BITS_8,Disabled,One_bit,BaudRate9600};
    12fc:	ce 01       	movw	r24, r28
    12fe:	44 96       	adiw	r24, 0x14	; 20
    1300:	9c 8f       	std	Y+28, r25	; 0x1c
    1302:	8b 8f       	std	Y+27, r24	; 0x1b
    1304:	e7 ee       	ldi	r30, 0xE7	; 231
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	fe 8f       	std	Y+30, r31	; 0x1e
    130a:	ed 8f       	std	Y+29, r30	; 0x1d
    130c:	f7 e0       	ldi	r31, 0x07	; 7
    130e:	ff 8f       	std	Y+31, r31	; 0x1f
    1310:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1312:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1314:	00 80       	ld	r0, Z
    1316:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1318:	9e 8d       	ldd	r25, Y+30	; 0x1e
    131a:	01 96       	adiw	r24, 0x01	; 1
    131c:	9e 8f       	std	Y+30, r25	; 0x1e
    131e:	8d 8f       	std	Y+29, r24	; 0x1d
    1320:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1322:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1324:	00 82       	st	Z, r0
    1326:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1328:	9c 8d       	ldd	r25, Y+28	; 0x1c
    132a:	01 96       	adiw	r24, 0x01	; 1
    132c:	9c 8f       	std	Y+28, r25	; 0x1c
    132e:	8b 8f       	std	Y+27, r24	; 0x1b
    1330:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1332:	91 50       	subi	r25, 0x01	; 1
    1334:	9f 8f       	std	Y+31, r25	; 0x1f
    1336:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1338:	ee 23       	and	r30, r30
    133a:	51 f7       	brne	.-44     	; 0x1310 <main+0x2c>
	/*initialize the UART*/
	UART_init(&UART_config);
    133c:	ce 01       	movw	r24, r28
    133e:	44 96       	adiw	r24, 0x14	; 20
    1340:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <UART_init>
	/*variable to count how many times the user entered a wrong password*/
	uint8 buzzer_counter=0;
    1344:	1a 8a       	std	Y+18, r1	; 0x12
	/*holds the number of operations the operations are opening the door and changing the password*/
	uint8 operation_number;
	/*enable global interrupts*/
	SET_BIT(SREG,7);
    1346:	af e5       	ldi	r26, 0x5F	; 95
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	ef e5       	ldi	r30, 0x5F	; 95
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	80 68       	ori	r24, 0x80	; 128
    1352:	8c 93       	st	X, r24
	while(1)
	{

		restart:
		change_password();
    1354:	0e 94 a3 05 	call	0xb46	; 0xb46 <change_password>
		for(uint8 i=0;i<11;i++)	/*sends the pass to the other MCU*/
    1358:	18 8a       	std	Y+16, r1	; 0x10
    135a:	81 c0       	rjmp	.+258    	; 0x145e <main+0x17a>
		{
			password[0]=1;
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	80 93 ef 00 	sts	0x00EF, r24
			UART_sendByte(password[i]);
    1362:	88 89       	ldd	r24, Y+16	; 0x10
    1364:	88 2f       	mov	r24, r24
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	fc 01       	movw	r30, r24
    136a:	e1 51       	subi	r30, 0x11	; 17
    136c:	ff 4f       	sbci	r31, 0xFF	; 255
    136e:	80 81       	ld	r24, Z
    1370:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <UART_sendByte>
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	a8 e4       	ldi	r26, 0x48	; 72
    137a:	b3 e4       	ldi	r27, 0x43	; 67
    137c:	8b 87       	std	Y+11, r24	; 0x0b
    137e:	9c 87       	std	Y+12, r25	; 0x0c
    1380:	ad 87       	std	Y+13, r26	; 0x0d
    1382:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1384:	6b 85       	ldd	r22, Y+11	; 0x0b
    1386:	7c 85       	ldd	r23, Y+12	; 0x0c
    1388:	8d 85       	ldd	r24, Y+13	; 0x0d
    138a:	9e 85       	ldd	r25, Y+14	; 0x0e
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	4a e7       	ldi	r20, 0x7A	; 122
    1392:	53 e4       	ldi	r21, 0x43	; 67
    1394:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1398:	dc 01       	movw	r26, r24
    139a:	cb 01       	movw	r24, r22
    139c:	8f 83       	std	Y+7, r24	; 0x07
    139e:	98 87       	std	Y+8, r25	; 0x08
    13a0:	a9 87       	std	Y+9, r26	; 0x09
    13a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13a4:	6f 81       	ldd	r22, Y+7	; 0x07
    13a6:	78 85       	ldd	r23, Y+8	; 0x08
    13a8:	89 85       	ldd	r24, Y+9	; 0x09
    13aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	40 e8       	ldi	r20, 0x80	; 128
    13b2:	5f e3       	ldi	r21, 0x3F	; 63
    13b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13b8:	88 23       	and	r24, r24
    13ba:	2c f4       	brge	.+10     	; 0x13c6 <main+0xe2>
		__ticks = 1;
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	9e 83       	std	Y+6, r25	; 0x06
    13c2:	8d 83       	std	Y+5, r24	; 0x05
    13c4:	3f c0       	rjmp	.+126    	; 0x1444 <main+0x160>
	else if (__tmp > 65535)
    13c6:	6f 81       	ldd	r22, Y+7	; 0x07
    13c8:	78 85       	ldd	r23, Y+8	; 0x08
    13ca:	89 85       	ldd	r24, Y+9	; 0x09
    13cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	3f ef       	ldi	r19, 0xFF	; 255
    13d2:	4f e7       	ldi	r20, 0x7F	; 127
    13d4:	57 e4       	ldi	r21, 0x47	; 71
    13d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13da:	18 16       	cp	r1, r24
    13dc:	4c f5       	brge	.+82     	; 0x1430 <main+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13de:	6b 85       	ldd	r22, Y+11	; 0x0b
    13e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    13e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	40 e2       	ldi	r20, 0x20	; 32
    13ec:	51 e4       	ldi	r21, 0x41	; 65
    13ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
    13f6:	bc 01       	movw	r22, r24
    13f8:	cd 01       	movw	r24, r26
    13fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	9e 83       	std	Y+6, r25	; 0x06
    1404:	8d 83       	std	Y+5, r24	; 0x05
    1406:	0f c0       	rjmp	.+30     	; 0x1426 <main+0x142>
    1408:	89 e1       	ldi	r24, 0x19	; 25
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	9c 83       	std	Y+4, r25	; 0x04
    140e:	8b 83       	std	Y+3, r24	; 0x03
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	9c 81       	ldd	r25, Y+4	; 0x04
    1414:	01 97       	sbiw	r24, 0x01	; 1
    1416:	f1 f7       	brne	.-4      	; 0x1414 <main+0x130>
    1418:	9c 83       	std	Y+4, r25	; 0x04
    141a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    141c:	8d 81       	ldd	r24, Y+5	; 0x05
    141e:	9e 81       	ldd	r25, Y+6	; 0x06
    1420:	01 97       	sbiw	r24, 0x01	; 1
    1422:	9e 83       	std	Y+6, r25	; 0x06
    1424:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1426:	8d 81       	ldd	r24, Y+5	; 0x05
    1428:	9e 81       	ldd	r25, Y+6	; 0x06
    142a:	00 97       	sbiw	r24, 0x00	; 0
    142c:	69 f7       	brne	.-38     	; 0x1408 <main+0x124>
    142e:	14 c0       	rjmp	.+40     	; 0x1458 <main+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1430:	6f 81       	ldd	r22, Y+7	; 0x07
    1432:	78 85       	ldd	r23, Y+8	; 0x08
    1434:	89 85       	ldd	r24, Y+9	; 0x09
    1436:	9a 85       	ldd	r25, Y+10	; 0x0a
    1438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	9e 83       	std	Y+6, r25	; 0x06
    1442:	8d 83       	std	Y+5, r24	; 0x05
    1444:	8d 81       	ldd	r24, Y+5	; 0x05
    1446:	9e 81       	ldd	r25, Y+6	; 0x06
    1448:	9a 83       	std	Y+2, r25	; 0x02
    144a:	89 83       	std	Y+1, r24	; 0x01
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	9a 81       	ldd	r25, Y+2	; 0x02
    1450:	01 97       	sbiw	r24, 0x01	; 1
    1452:	f1 f7       	brne	.-4      	; 0x1450 <main+0x16c>
    1454:	9a 83       	std	Y+2, r25	; 0x02
    1456:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{

		restart:
		change_password();
		for(uint8 i=0;i<11;i++)	/*sends the pass to the other MCU*/
    1458:	88 89       	ldd	r24, Y+16	; 0x10
    145a:	8f 5f       	subi	r24, 0xFF	; 255
    145c:	88 8b       	std	Y+16, r24	; 0x10
    145e:	88 89       	ldd	r24, Y+16	; 0x10
    1460:	8b 30       	cpi	r24, 0x0B	; 11
    1462:	08 f4       	brcc	.+2      	; 0x1466 <main+0x182>
    1464:	7b cf       	rjmp	.-266    	; 0x135c <main+0x78>
		{
			password[0]=1;
			UART_sendByte(password[i]);
			_delay_ms(200);
		}
		while(g_flag);	/*wait for the second MCU to respond with a bite*/
    1466:	80 91 e6 00 	lds	r24, 0x00E6
    146a:	88 23       	and	r24, r24
    146c:	e1 f7       	brne	.-8      	; 0x1466 <main+0x182>
		g_flag=TRUE;	/*make the flag true to use it again*/
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	80 93 e6 00 	sts	0x00E6, r24
		LCD_clearScreen();
    1474:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <LCD_clearScreen>
		if(g_check)		/*after storing the pass ask user for the operation he want to do*/
    1478:	80 91 ee 00 	lds	r24, 0x00EE
    147c:	88 23       	and	r24, r24
    147e:	f1 f0       	breq	.+60     	; 0x14bc <main+0x1d8>
		{
			LCD_displayString("+ : open Door");
    1480:	84 eb       	ldi	r24, 0xB4	; 180
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	0e 94 2a 13 	call	0x2654	; 0x2654 <LCD_displayString>
			LCD_moveCursor(1,0);
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	60 e0       	ldi	r22, 0x00	; 0
    148c:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_moveCursor>
			LCD_displayString("- : change pass");
    1490:	82 ec       	ldi	r24, 0xC2	; 194
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	0e 94 2a 13 	call	0x2654	; 0x2654 <LCD_displayString>
			while(1)
			{
				key=KEYPAD_getPressedKey();
    1498:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <KEYPAD_getPressedKey>
    149c:	8b 8b       	std	Y+19, r24	; 0x13
				if(key=='+')
    149e:	8b 89       	ldd	r24, Y+19	; 0x13
    14a0:	8b 32       	cpi	r24, 0x2B	; 43
    14a2:	21 f4       	brne	.+8      	; 0x14ac <main+0x1c8>
				{
					operation_number=0;
    14a4:	19 8a       	std	Y+17, r1	; 0x11
					enter_password();
    14a6:	0e 94 13 08 	call	0x1026	; 0x1026 <enter_password>
    14aa:	f6 cf       	rjmp	.-20     	; 0x1498 <main+0x1b4>
				}
				else if(key=='-')
    14ac:	8b 89       	ldd	r24, Y+19	; 0x13
    14ae:	8d 32       	cpi	r24, 0x2D	; 45
    14b0:	99 f7       	brne	.-26     	; 0x1498 <main+0x1b4>
				{
					operation_number=1;
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	89 8b       	std	Y+17, r24	; 0x11
					enter_password();
    14b6:	0e 94 13 08 	call	0x1026	; 0x1026 <enter_password>
    14ba:	ee cf       	rjmp	.-36     	; 0x1498 <main+0x1b4>
				enter_password();
			}
		}
		else
		{
			LCD_displayString("NOT MATCHED");
    14bc:	82 ed       	ldi	r24, 0xD2	; 210
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	0e 94 2a 13 	call	0x2654	; 0x2654 <LCD_displayString>
    14c4:	47 cf       	rjmp	.-370    	; 0x1354 <main+0x70>

000014c6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <GPIO_setupPinDirection+0x6>
    14cc:	00 d0       	rcall	.+0      	; 0x14ce <GPIO_setupPinDirection+0x8>
    14ce:	0f 92       	push	r0
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	89 83       	std	Y+1, r24	; 0x01
    14d6:	6a 83       	std	Y+2, r22	; 0x02
    14d8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	88 30       	cpi	r24, 0x08	; 8
    14de:	08 f0       	brcs	.+2      	; 0x14e2 <GPIO_setupPinDirection+0x1c>
    14e0:	d5 c0       	rjmp	.+426    	; 0x168c <GPIO_setupPinDirection+0x1c6>
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	84 30       	cpi	r24, 0x04	; 4
    14e6:	08 f0       	brcs	.+2      	; 0x14ea <GPIO_setupPinDirection+0x24>
    14e8:	d1 c0       	rjmp	.+418    	; 0x168c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	3d 83       	std	Y+5, r19	; 0x05
    14f2:	2c 83       	std	Y+4, r18	; 0x04
    14f4:	8c 81       	ldd	r24, Y+4	; 0x04
    14f6:	9d 81       	ldd	r25, Y+5	; 0x05
    14f8:	81 30       	cpi	r24, 0x01	; 1
    14fa:	91 05       	cpc	r25, r1
    14fc:	09 f4       	brne	.+2      	; 0x1500 <GPIO_setupPinDirection+0x3a>
    14fe:	43 c0       	rjmp	.+134    	; 0x1586 <GPIO_setupPinDirection+0xc0>
    1500:	2c 81       	ldd	r18, Y+4	; 0x04
    1502:	3d 81       	ldd	r19, Y+5	; 0x05
    1504:	22 30       	cpi	r18, 0x02	; 2
    1506:	31 05       	cpc	r19, r1
    1508:	2c f4       	brge	.+10     	; 0x1514 <GPIO_setupPinDirection+0x4e>
    150a:	8c 81       	ldd	r24, Y+4	; 0x04
    150c:	9d 81       	ldd	r25, Y+5	; 0x05
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	71 f0       	breq	.+28     	; 0x152e <GPIO_setupPinDirection+0x68>
    1512:	bc c0       	rjmp	.+376    	; 0x168c <GPIO_setupPinDirection+0x1c6>
    1514:	2c 81       	ldd	r18, Y+4	; 0x04
    1516:	3d 81       	ldd	r19, Y+5	; 0x05
    1518:	22 30       	cpi	r18, 0x02	; 2
    151a:	31 05       	cpc	r19, r1
    151c:	09 f4       	brne	.+2      	; 0x1520 <GPIO_setupPinDirection+0x5a>
    151e:	5f c0       	rjmp	.+190    	; 0x15de <GPIO_setupPinDirection+0x118>
    1520:	8c 81       	ldd	r24, Y+4	; 0x04
    1522:	9d 81       	ldd	r25, Y+5	; 0x05
    1524:	83 30       	cpi	r24, 0x03	; 3
    1526:	91 05       	cpc	r25, r1
    1528:	09 f4       	brne	.+2      	; 0x152c <GPIO_setupPinDirection+0x66>
    152a:	85 c0       	rjmp	.+266    	; 0x1636 <GPIO_setupPinDirection+0x170>
    152c:	af c0       	rjmp	.+350    	; 0x168c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	81 30       	cpi	r24, 0x01	; 1
    1532:	a1 f4       	brne	.+40     	; 0x155c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1534:	aa e3       	ldi	r26, 0x3A	; 58
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	ea e3       	ldi	r30, 0x3A	; 58
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	48 2f       	mov	r20, r24
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	02 2e       	mov	r0, r18
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <GPIO_setupPinDirection+0x8c>
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	0a 94       	dec	r0
    1554:	e2 f7       	brpl	.-8      	; 0x154e <GPIO_setupPinDirection+0x88>
    1556:	84 2b       	or	r24, r20
    1558:	8c 93       	st	X, r24
    155a:	98 c0       	rjmp	.+304    	; 0x168c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    155c:	aa e3       	ldi	r26, 0x3A	; 58
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	ea e3       	ldi	r30, 0x3A	; 58
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	48 2f       	mov	r20, r24
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	02 2e       	mov	r0, r18
    1574:	02 c0       	rjmp	.+4      	; 0x157a <GPIO_setupPinDirection+0xb4>
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	0a 94       	dec	r0
    157c:	e2 f7       	brpl	.-8      	; 0x1576 <GPIO_setupPinDirection+0xb0>
    157e:	80 95       	com	r24
    1580:	84 23       	and	r24, r20
    1582:	8c 93       	st	X, r24
    1584:	83 c0       	rjmp	.+262    	; 0x168c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	81 30       	cpi	r24, 0x01	; 1
    158a:	a1 f4       	brne	.+40     	; 0x15b4 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    158c:	a7 e3       	ldi	r26, 0x37	; 55
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e7 e3       	ldi	r30, 0x37	; 55
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	48 2f       	mov	r20, r24
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	02 2e       	mov	r0, r18
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <GPIO_setupPinDirection+0xe4>
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	0a 94       	dec	r0
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <GPIO_setupPinDirection+0xe0>
    15ae:	84 2b       	or	r24, r20
    15b0:	8c 93       	st	X, r24
    15b2:	6c c0       	rjmp	.+216    	; 0x168c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    15b4:	a7 e3       	ldi	r26, 0x37	; 55
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e7 e3       	ldi	r30, 0x37	; 55
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	48 2f       	mov	r20, r24
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	02 2e       	mov	r0, r18
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <GPIO_setupPinDirection+0x10c>
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	0a 94       	dec	r0
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <GPIO_setupPinDirection+0x108>
    15d6:	80 95       	com	r24
    15d8:	84 23       	and	r24, r20
    15da:	8c 93       	st	X, r24
    15dc:	57 c0       	rjmp	.+174    	; 0x168c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	81 30       	cpi	r24, 0x01	; 1
    15e2:	a1 f4       	brne	.+40     	; 0x160c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    15e4:	a4 e3       	ldi	r26, 0x34	; 52
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e4 e3       	ldi	r30, 0x34	; 52
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	48 2f       	mov	r20, r24
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	02 2e       	mov	r0, r18
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <GPIO_setupPinDirection+0x13c>
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	0a 94       	dec	r0
    1604:	e2 f7       	brpl	.-8      	; 0x15fe <GPIO_setupPinDirection+0x138>
    1606:	84 2b       	or	r24, r20
    1608:	8c 93       	st	X, r24
    160a:	40 c0       	rjmp	.+128    	; 0x168c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    160c:	a4 e3       	ldi	r26, 0x34	; 52
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e4 e3       	ldi	r30, 0x34	; 52
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	48 2f       	mov	r20, r24
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	02 2e       	mov	r0, r18
    1624:	02 c0       	rjmp	.+4      	; 0x162a <GPIO_setupPinDirection+0x164>
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	0a 94       	dec	r0
    162c:	e2 f7       	brpl	.-8      	; 0x1626 <GPIO_setupPinDirection+0x160>
    162e:	80 95       	com	r24
    1630:	84 23       	and	r24, r20
    1632:	8c 93       	st	X, r24
    1634:	2b c0       	rjmp	.+86     	; 0x168c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	81 30       	cpi	r24, 0x01	; 1
    163a:	a1 f4       	brne	.+40     	; 0x1664 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    163c:	a1 e3       	ldi	r26, 0x31	; 49
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	e1 e3       	ldi	r30, 0x31	; 49
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	48 2f       	mov	r20, r24
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	02 2e       	mov	r0, r18
    1654:	02 c0       	rjmp	.+4      	; 0x165a <GPIO_setupPinDirection+0x194>
    1656:	88 0f       	add	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	0a 94       	dec	r0
    165c:	e2 f7       	brpl	.-8      	; 0x1656 <GPIO_setupPinDirection+0x190>
    165e:	84 2b       	or	r24, r20
    1660:	8c 93       	st	X, r24
    1662:	14 c0       	rjmp	.+40     	; 0x168c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1664:	a1 e3       	ldi	r26, 0x31	; 49
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e1 e3       	ldi	r30, 0x31	; 49
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	48 2f       	mov	r20, r24
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	28 2f       	mov	r18, r24
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	02 2e       	mov	r0, r18
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <GPIO_setupPinDirection+0x1bc>
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	0a 94       	dec	r0
    1684:	e2 f7       	brpl	.-8      	; 0x167e <GPIO_setupPinDirection+0x1b8>
    1686:	80 95       	com	r24
    1688:	84 23       	and	r24, r20
    168a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	08 95       	ret

0000169c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <GPIO_writePin+0x6>
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <GPIO_writePin+0x8>
    16a4:	0f 92       	push	r0
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	89 83       	std	Y+1, r24	; 0x01
    16ac:	6a 83       	std	Y+2, r22	; 0x02
    16ae:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	88 30       	cpi	r24, 0x08	; 8
    16b4:	08 f0       	brcs	.+2      	; 0x16b8 <GPIO_writePin+0x1c>
    16b6:	d5 c0       	rjmp	.+426    	; 0x1862 <GPIO_writePin+0x1c6>
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	84 30       	cpi	r24, 0x04	; 4
    16bc:	08 f0       	brcs	.+2      	; 0x16c0 <GPIO_writePin+0x24>
    16be:	d1 c0       	rjmp	.+418    	; 0x1862 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	3d 83       	std	Y+5, r19	; 0x05
    16c8:	2c 83       	std	Y+4, r18	; 0x04
    16ca:	8c 81       	ldd	r24, Y+4	; 0x04
    16cc:	9d 81       	ldd	r25, Y+5	; 0x05
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	91 05       	cpc	r25, r1
    16d2:	09 f4       	brne	.+2      	; 0x16d6 <GPIO_writePin+0x3a>
    16d4:	43 c0       	rjmp	.+134    	; 0x175c <GPIO_writePin+0xc0>
    16d6:	2c 81       	ldd	r18, Y+4	; 0x04
    16d8:	3d 81       	ldd	r19, Y+5	; 0x05
    16da:	22 30       	cpi	r18, 0x02	; 2
    16dc:	31 05       	cpc	r19, r1
    16de:	2c f4       	brge	.+10     	; 0x16ea <GPIO_writePin+0x4e>
    16e0:	8c 81       	ldd	r24, Y+4	; 0x04
    16e2:	9d 81       	ldd	r25, Y+5	; 0x05
    16e4:	00 97       	sbiw	r24, 0x00	; 0
    16e6:	71 f0       	breq	.+28     	; 0x1704 <GPIO_writePin+0x68>
    16e8:	bc c0       	rjmp	.+376    	; 0x1862 <GPIO_writePin+0x1c6>
    16ea:	2c 81       	ldd	r18, Y+4	; 0x04
    16ec:	3d 81       	ldd	r19, Y+5	; 0x05
    16ee:	22 30       	cpi	r18, 0x02	; 2
    16f0:	31 05       	cpc	r19, r1
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <GPIO_writePin+0x5a>
    16f4:	5f c0       	rjmp	.+190    	; 0x17b4 <GPIO_writePin+0x118>
    16f6:	8c 81       	ldd	r24, Y+4	; 0x04
    16f8:	9d 81       	ldd	r25, Y+5	; 0x05
    16fa:	83 30       	cpi	r24, 0x03	; 3
    16fc:	91 05       	cpc	r25, r1
    16fe:	09 f4       	brne	.+2      	; 0x1702 <GPIO_writePin+0x66>
    1700:	85 c0       	rjmp	.+266    	; 0x180c <GPIO_writePin+0x170>
    1702:	af c0       	rjmp	.+350    	; 0x1862 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	81 30       	cpi	r24, 0x01	; 1
    1708:	a1 f4       	brne	.+40     	; 0x1732 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    170a:	ab e3       	ldi	r26, 0x3B	; 59
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	eb e3       	ldi	r30, 0x3B	; 59
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	48 2f       	mov	r20, r24
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	28 2f       	mov	r18, r24
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	02 2e       	mov	r0, r18
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <GPIO_writePin+0x8c>
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	0a 94       	dec	r0
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <GPIO_writePin+0x88>
    172c:	84 2b       	or	r24, r20
    172e:	8c 93       	st	X, r24
    1730:	98 c0       	rjmp	.+304    	; 0x1862 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1732:	ab e3       	ldi	r26, 0x3B	; 59
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	eb e3       	ldi	r30, 0x3B	; 59
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	48 2f       	mov	r20, r24
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	02 2e       	mov	r0, r18
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <GPIO_writePin+0xb4>
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	0a 94       	dec	r0
    1752:	e2 f7       	brpl	.-8      	; 0x174c <GPIO_writePin+0xb0>
    1754:	80 95       	com	r24
    1756:	84 23       	and	r24, r20
    1758:	8c 93       	st	X, r24
    175a:	83 c0       	rjmp	.+262    	; 0x1862 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    175c:	8b 81       	ldd	r24, Y+3	; 0x03
    175e:	81 30       	cpi	r24, 0x01	; 1
    1760:	a1 f4       	brne	.+40     	; 0x178a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1762:	a8 e3       	ldi	r26, 0x38	; 56
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	e8 e3       	ldi	r30, 0x38	; 56
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	48 2f       	mov	r20, r24
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	02 2e       	mov	r0, r18
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <GPIO_writePin+0xe4>
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	0a 94       	dec	r0
    1782:	e2 f7       	brpl	.-8      	; 0x177c <GPIO_writePin+0xe0>
    1784:	84 2b       	or	r24, r20
    1786:	8c 93       	st	X, r24
    1788:	6c c0       	rjmp	.+216    	; 0x1862 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    178a:	a8 e3       	ldi	r26, 0x38	; 56
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e8 e3       	ldi	r30, 0x38	; 56
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	48 2f       	mov	r20, r24
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	02 2e       	mov	r0, r18
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <GPIO_writePin+0x10c>
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	0a 94       	dec	r0
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <GPIO_writePin+0x108>
    17ac:	80 95       	com	r24
    17ae:	84 23       	and	r24, r20
    17b0:	8c 93       	st	X, r24
    17b2:	57 c0       	rjmp	.+174    	; 0x1862 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	81 30       	cpi	r24, 0x01	; 1
    17b8:	a1 f4       	brne	.+40     	; 0x17e2 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    17ba:	a5 e3       	ldi	r26, 0x35	; 53
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e5 e3       	ldi	r30, 0x35	; 53
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	48 2f       	mov	r20, r24
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	02 2e       	mov	r0, r18
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <GPIO_writePin+0x13c>
    17d4:	88 0f       	add	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	0a 94       	dec	r0
    17da:	e2 f7       	brpl	.-8      	; 0x17d4 <GPIO_writePin+0x138>
    17dc:	84 2b       	or	r24, r20
    17de:	8c 93       	st	X, r24
    17e0:	40 c0       	rjmp	.+128    	; 0x1862 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    17e2:	a5 e3       	ldi	r26, 0x35	; 53
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e5 e3       	ldi	r30, 0x35	; 53
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	48 2f       	mov	r20, r24
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	02 2e       	mov	r0, r18
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <GPIO_writePin+0x164>
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	0a 94       	dec	r0
    1802:	e2 f7       	brpl	.-8      	; 0x17fc <GPIO_writePin+0x160>
    1804:	80 95       	com	r24
    1806:	84 23       	and	r24, r20
    1808:	8c 93       	st	X, r24
    180a:	2b c0       	rjmp	.+86     	; 0x1862 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	81 30       	cpi	r24, 0x01	; 1
    1810:	a1 f4       	brne	.+40     	; 0x183a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1812:	a2 e3       	ldi	r26, 0x32	; 50
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	e2 e3       	ldi	r30, 0x32	; 50
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	48 2f       	mov	r20, r24
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	02 2e       	mov	r0, r18
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <GPIO_writePin+0x194>
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	0a 94       	dec	r0
    1832:	e2 f7       	brpl	.-8      	; 0x182c <GPIO_writePin+0x190>
    1834:	84 2b       	or	r24, r20
    1836:	8c 93       	st	X, r24
    1838:	14 c0       	rjmp	.+40     	; 0x1862 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    183a:	a2 e3       	ldi	r26, 0x32	; 50
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e2 e3       	ldi	r30, 0x32	; 50
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	48 2f       	mov	r20, r24
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	02 2e       	mov	r0, r18
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <GPIO_writePin+0x1bc>
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	0a 94       	dec	r0
    185a:	e2 f7       	brpl	.-8      	; 0x1854 <GPIO_writePin+0x1b8>
    185c:	80 95       	com	r24
    185e:	84 23       	and	r24, r20
    1860:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	08 95       	ret

00001872 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1872:	df 93       	push	r29
    1874:	cf 93       	push	r28
    1876:	00 d0       	rcall	.+0      	; 0x1878 <GPIO_readPin+0x6>
    1878:	00 d0       	rcall	.+0      	; 0x187a <GPIO_readPin+0x8>
    187a:	0f 92       	push	r0
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
    1880:	8a 83       	std	Y+2, r24	; 0x02
    1882:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1884:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1886:	8b 81       	ldd	r24, Y+3	; 0x03
    1888:	88 30       	cpi	r24, 0x08	; 8
    188a:	08 f0       	brcs	.+2      	; 0x188e <GPIO_readPin+0x1c>
    188c:	84 c0       	rjmp	.+264    	; 0x1996 <GPIO_readPin+0x124>
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	84 30       	cpi	r24, 0x04	; 4
    1892:	08 f0       	brcs	.+2      	; 0x1896 <GPIO_readPin+0x24>
    1894:	80 c0       	rjmp	.+256    	; 0x1996 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	3d 83       	std	Y+5, r19	; 0x05
    189e:	2c 83       	std	Y+4, r18	; 0x04
    18a0:	4c 81       	ldd	r20, Y+4	; 0x04
    18a2:	5d 81       	ldd	r21, Y+5	; 0x05
    18a4:	41 30       	cpi	r20, 0x01	; 1
    18a6:	51 05       	cpc	r21, r1
    18a8:	79 f1       	breq	.+94     	; 0x1908 <GPIO_readPin+0x96>
    18aa:	8c 81       	ldd	r24, Y+4	; 0x04
    18ac:	9d 81       	ldd	r25, Y+5	; 0x05
    18ae:	82 30       	cpi	r24, 0x02	; 2
    18b0:	91 05       	cpc	r25, r1
    18b2:	34 f4       	brge	.+12     	; 0x18c0 <GPIO_readPin+0x4e>
    18b4:	2c 81       	ldd	r18, Y+4	; 0x04
    18b6:	3d 81       	ldd	r19, Y+5	; 0x05
    18b8:	21 15       	cp	r18, r1
    18ba:	31 05       	cpc	r19, r1
    18bc:	69 f0       	breq	.+26     	; 0x18d8 <GPIO_readPin+0x66>
    18be:	6b c0       	rjmp	.+214    	; 0x1996 <GPIO_readPin+0x124>
    18c0:	4c 81       	ldd	r20, Y+4	; 0x04
    18c2:	5d 81       	ldd	r21, Y+5	; 0x05
    18c4:	42 30       	cpi	r20, 0x02	; 2
    18c6:	51 05       	cpc	r21, r1
    18c8:	b9 f1       	breq	.+110    	; 0x1938 <GPIO_readPin+0xc6>
    18ca:	8c 81       	ldd	r24, Y+4	; 0x04
    18cc:	9d 81       	ldd	r25, Y+5	; 0x05
    18ce:	83 30       	cpi	r24, 0x03	; 3
    18d0:	91 05       	cpc	r25, r1
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <GPIO_readPin+0x64>
    18d4:	49 c0       	rjmp	.+146    	; 0x1968 <GPIO_readPin+0xf6>
    18d6:	5f c0       	rjmp	.+190    	; 0x1996 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    18d8:	e9 e3       	ldi	r30, 0x39	; 57
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	88 2f       	mov	r24, r24
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	a9 01       	movw	r20, r18
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <GPIO_readPin+0x7e>
    18ec:	55 95       	asr	r21
    18ee:	47 95       	ror	r20
    18f0:	8a 95       	dec	r24
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <GPIO_readPin+0x7a>
    18f4:	ca 01       	movw	r24, r20
    18f6:	81 70       	andi	r24, 0x01	; 1
    18f8:	90 70       	andi	r25, 0x00	; 0
    18fa:	88 23       	and	r24, r24
    18fc:	19 f0       	breq	.+6      	; 0x1904 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	89 83       	std	Y+1, r24	; 0x01
    1902:	49 c0       	rjmp	.+146    	; 0x1996 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1904:	19 82       	std	Y+1, r1	; 0x01
    1906:	47 c0       	rjmp	.+142    	; 0x1996 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1908:	e6 e3       	ldi	r30, 0x36	; 54
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	88 2f       	mov	r24, r24
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	a9 01       	movw	r20, r18
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <GPIO_readPin+0xae>
    191c:	55 95       	asr	r21
    191e:	47 95       	ror	r20
    1920:	8a 95       	dec	r24
    1922:	e2 f7       	brpl	.-8      	; 0x191c <GPIO_readPin+0xaa>
    1924:	ca 01       	movw	r24, r20
    1926:	81 70       	andi	r24, 0x01	; 1
    1928:	90 70       	andi	r25, 0x00	; 0
    192a:	88 23       	and	r24, r24
    192c:	19 f0       	breq	.+6      	; 0x1934 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	89 83       	std	Y+1, r24	; 0x01
    1932:	31 c0       	rjmp	.+98     	; 0x1996 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1934:	19 82       	std	Y+1, r1	; 0x01
    1936:	2f c0       	rjmp	.+94     	; 0x1996 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1938:	e3 e3       	ldi	r30, 0x33	; 51
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	88 2f       	mov	r24, r24
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	a9 01       	movw	r20, r18
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <GPIO_readPin+0xde>
    194c:	55 95       	asr	r21
    194e:	47 95       	ror	r20
    1950:	8a 95       	dec	r24
    1952:	e2 f7       	brpl	.-8      	; 0x194c <GPIO_readPin+0xda>
    1954:	ca 01       	movw	r24, r20
    1956:	81 70       	andi	r24, 0x01	; 1
    1958:	90 70       	andi	r25, 0x00	; 0
    195a:	88 23       	and	r24, r24
    195c:	19 f0       	breq	.+6      	; 0x1964 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	89 83       	std	Y+1, r24	; 0x01
    1962:	19 c0       	rjmp	.+50     	; 0x1996 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1964:	19 82       	std	Y+1, r1	; 0x01
    1966:	17 c0       	rjmp	.+46     	; 0x1996 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1968:	e0 e3       	ldi	r30, 0x30	; 48
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	28 2f       	mov	r18, r24
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	88 2f       	mov	r24, r24
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	a9 01       	movw	r20, r18
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <GPIO_readPin+0x10e>
    197c:	55 95       	asr	r21
    197e:	47 95       	ror	r20
    1980:	8a 95       	dec	r24
    1982:	e2 f7       	brpl	.-8      	; 0x197c <GPIO_readPin+0x10a>
    1984:	ca 01       	movw	r24, r20
    1986:	81 70       	andi	r24, 0x01	; 1
    1988:	90 70       	andi	r25, 0x00	; 0
    198a:	88 23       	and	r24, r24
    198c:	19 f0       	breq	.+6      	; 0x1994 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	89 83       	std	Y+1, r24	; 0x01
    1992:	01 c0       	rjmp	.+2      	; 0x1996 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1994:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1996:	89 81       	ldd	r24, Y+1	; 0x01
}
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	cf 91       	pop	r28
    19a4:	df 91       	pop	r29
    19a6:	08 95       	ret

000019a8 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	00 d0       	rcall	.+0      	; 0x19ae <GPIO_setupPortDirection+0x6>
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <GPIO_setupPortDirection+0x8>
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	89 83       	std	Y+1, r24	; 0x01
    19b6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	84 30       	cpi	r24, 0x04	; 4
    19bc:	90 f5       	brcc	.+100    	; 0x1a22 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	3c 83       	std	Y+4, r19	; 0x04
    19c6:	2b 83       	std	Y+3, r18	; 0x03
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	9c 81       	ldd	r25, Y+4	; 0x04
    19cc:	81 30       	cpi	r24, 0x01	; 1
    19ce:	91 05       	cpc	r25, r1
    19d0:	d1 f0       	breq	.+52     	; 0x1a06 <GPIO_setupPortDirection+0x5e>
    19d2:	2b 81       	ldd	r18, Y+3	; 0x03
    19d4:	3c 81       	ldd	r19, Y+4	; 0x04
    19d6:	22 30       	cpi	r18, 0x02	; 2
    19d8:	31 05       	cpc	r19, r1
    19da:	2c f4       	brge	.+10     	; 0x19e6 <GPIO_setupPortDirection+0x3e>
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	9c 81       	ldd	r25, Y+4	; 0x04
    19e0:	00 97       	sbiw	r24, 0x00	; 0
    19e2:	61 f0       	breq	.+24     	; 0x19fc <GPIO_setupPortDirection+0x54>
    19e4:	1e c0       	rjmp	.+60     	; 0x1a22 <GPIO_setupPortDirection+0x7a>
    19e6:	2b 81       	ldd	r18, Y+3	; 0x03
    19e8:	3c 81       	ldd	r19, Y+4	; 0x04
    19ea:	22 30       	cpi	r18, 0x02	; 2
    19ec:	31 05       	cpc	r19, r1
    19ee:	81 f0       	breq	.+32     	; 0x1a10 <GPIO_setupPortDirection+0x68>
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	9c 81       	ldd	r25, Y+4	; 0x04
    19f4:	83 30       	cpi	r24, 0x03	; 3
    19f6:	91 05       	cpc	r25, r1
    19f8:	81 f0       	breq	.+32     	; 0x1a1a <GPIO_setupPortDirection+0x72>
    19fa:	13 c0       	rjmp	.+38     	; 0x1a22 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    19fc:	ea e3       	ldi	r30, 0x3A	; 58
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	80 83       	st	Z, r24
    1a04:	0e c0       	rjmp	.+28     	; 0x1a22 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1a06:	e7 e3       	ldi	r30, 0x37	; 55
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	80 83       	st	Z, r24
    1a0e:	09 c0       	rjmp	.+18     	; 0x1a22 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1a10:	e4 e3       	ldi	r30, 0x34	; 52
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	80 83       	st	Z, r24
    1a18:	04 c0       	rjmp	.+8      	; 0x1a22 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1a1a:	e1 e3       	ldi	r30, 0x31	; 49
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a20:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	00 d0       	rcall	.+0      	; 0x1a36 <GPIO_writePort+0x6>
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <GPIO_writePort+0x8>
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    1a3c:	89 83       	std	Y+1, r24	; 0x01
    1a3e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a40:	89 81       	ldd	r24, Y+1	; 0x01
    1a42:	84 30       	cpi	r24, 0x04	; 4
    1a44:	90 f5       	brcc	.+100    	; 0x1aaa <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1a46:	89 81       	ldd	r24, Y+1	; 0x01
    1a48:	28 2f       	mov	r18, r24
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	3c 83       	std	Y+4, r19	; 0x04
    1a4e:	2b 83       	std	Y+3, r18	; 0x03
    1a50:	8b 81       	ldd	r24, Y+3	; 0x03
    1a52:	9c 81       	ldd	r25, Y+4	; 0x04
    1a54:	81 30       	cpi	r24, 0x01	; 1
    1a56:	91 05       	cpc	r25, r1
    1a58:	d1 f0       	breq	.+52     	; 0x1a8e <GPIO_writePort+0x5e>
    1a5a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a5c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a5e:	22 30       	cpi	r18, 0x02	; 2
    1a60:	31 05       	cpc	r19, r1
    1a62:	2c f4       	brge	.+10     	; 0x1a6e <GPIO_writePort+0x3e>
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	9c 81       	ldd	r25, Y+4	; 0x04
    1a68:	00 97       	sbiw	r24, 0x00	; 0
    1a6a:	61 f0       	breq	.+24     	; 0x1a84 <GPIO_writePort+0x54>
    1a6c:	1e c0       	rjmp	.+60     	; 0x1aaa <GPIO_writePort+0x7a>
    1a6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a70:	3c 81       	ldd	r19, Y+4	; 0x04
    1a72:	22 30       	cpi	r18, 0x02	; 2
    1a74:	31 05       	cpc	r19, r1
    1a76:	81 f0       	breq	.+32     	; 0x1a98 <GPIO_writePort+0x68>
    1a78:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7c:	83 30       	cpi	r24, 0x03	; 3
    1a7e:	91 05       	cpc	r25, r1
    1a80:	81 f0       	breq	.+32     	; 0x1aa2 <GPIO_writePort+0x72>
    1a82:	13 c0       	rjmp	.+38     	; 0x1aaa <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1a84:	eb e3       	ldi	r30, 0x3B	; 59
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8a:	80 83       	st	Z, r24
    1a8c:	0e c0       	rjmp	.+28     	; 0x1aaa <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1a8e:	e8 e3       	ldi	r30, 0x38	; 56
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
    1a94:	80 83       	st	Z, r24
    1a96:	09 c0       	rjmp	.+18     	; 0x1aaa <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1a98:	e5 e3       	ldi	r30, 0x35	; 53
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9e:	80 83       	st	Z, r24
    1aa0:	04 c0       	rjmp	.+8      	; 0x1aaa <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1aa2:	e2 e3       	ldi	r30, 0x32	; 50
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	80 83       	st	Z, r24
			break;
		}
	}
}
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	08 95       	ret

00001ab8 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	00 d0       	rcall	.+0      	; 0x1abe <GPIO_readPort+0x6>
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <GPIO_readPort+0x8>
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
    1ac4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1ac6:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aca:	84 30       	cpi	r24, 0x04	; 4
    1acc:	90 f5       	brcc	.+100    	; 0x1b32 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1ace:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad0:	28 2f       	mov	r18, r24
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	3c 83       	std	Y+4, r19	; 0x04
    1ad6:	2b 83       	std	Y+3, r18	; 0x03
    1ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ada:	9c 81       	ldd	r25, Y+4	; 0x04
    1adc:	81 30       	cpi	r24, 0x01	; 1
    1ade:	91 05       	cpc	r25, r1
    1ae0:	d1 f0       	breq	.+52     	; 0x1b16 <GPIO_readPort+0x5e>
    1ae2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae6:	22 30       	cpi	r18, 0x02	; 2
    1ae8:	31 05       	cpc	r19, r1
    1aea:	2c f4       	brge	.+10     	; 0x1af6 <GPIO_readPort+0x3e>
    1aec:	8b 81       	ldd	r24, Y+3	; 0x03
    1aee:	9c 81       	ldd	r25, Y+4	; 0x04
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	61 f0       	breq	.+24     	; 0x1b0c <GPIO_readPort+0x54>
    1af4:	1e c0       	rjmp	.+60     	; 0x1b32 <GPIO_readPort+0x7a>
    1af6:	2b 81       	ldd	r18, Y+3	; 0x03
    1af8:	3c 81       	ldd	r19, Y+4	; 0x04
    1afa:	22 30       	cpi	r18, 0x02	; 2
    1afc:	31 05       	cpc	r19, r1
    1afe:	81 f0       	breq	.+32     	; 0x1b20 <GPIO_readPort+0x68>
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	9c 81       	ldd	r25, Y+4	; 0x04
    1b04:	83 30       	cpi	r24, 0x03	; 3
    1b06:	91 05       	cpc	r25, r1
    1b08:	81 f0       	breq	.+32     	; 0x1b2a <GPIO_readPort+0x72>
    1b0a:	13 c0       	rjmp	.+38     	; 0x1b32 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1b0c:	e9 e3       	ldi	r30, 0x39	; 57
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	89 83       	std	Y+1, r24	; 0x01
    1b14:	0e c0       	rjmp	.+28     	; 0x1b32 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1b16:	e6 e3       	ldi	r30, 0x36	; 54
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	89 83       	std	Y+1, r24	; 0x01
    1b1e:	09 c0       	rjmp	.+18     	; 0x1b32 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1b20:	e3 e3       	ldi	r30, 0x33	; 51
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	89 83       	std	Y+1, r24	; 0x01
    1b28:	04 c0       	rjmp	.+8      	; 0x1b32 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1b2a:	e0 e3       	ldi	r30, 0x30	; 48
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	08 95       	ret

00001b42 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	00 d0       	rcall	.+0      	; 0x1b48 <KEYPAD_getPressedKey+0x6>
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	60 e0       	ldi	r22, 0x00	; 0
    1b50:	40 e0       	ldi	r20, 0x00	; 0
    1b52:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	61 e0       	ldi	r22, 0x01	; 1
    1b5a:	40 e0       	ldi	r20, 0x00	; 0
    1b5c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	62 e0       	ldi	r22, 0x02	; 2
    1b64:	40 e0       	ldi	r20, 0x00	; 0
    1b66:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	63 e0       	ldi	r22, 0x03	; 3
    1b6e:	40 e0       	ldi	r20, 0x00	; 0
    1b70:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	64 e0       	ldi	r22, 0x04	; 4
    1b78:	40 e0       	ldi	r20, 0x00	; 0
    1b7a:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	65 e0       	ldi	r22, 0x05	; 5
    1b82:	40 e0       	ldi	r20, 0x00	; 0
    1b84:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	66 e0       	ldi	r22, 0x06	; 6
    1b8c:	40 e0       	ldi	r20, 0x00	; 0
    1b8e:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1b92:	80 e0       	ldi	r24, 0x00	; 0
    1b94:	67 e0       	ldi	r22, 0x07	; 7
    1b96:	40 e0       	ldi	r20, 0x00	; 0
    1b98:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1b9c:	19 82       	std	Y+1, r1	; 0x01
    1b9e:	35 c0       	rjmp	.+106    	; 0x1c0a <KEYPAD_getPressedKey+0xc8>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	69 81       	ldd	r22, Y+1	; 0x01
    1ba4:	41 e0       	ldi	r20, 0x01	; 1
    1ba6:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	69 81       	ldd	r22, Y+1	; 0x01
    1bae:	40 e0       	ldi	r20, 0x00	; 0
    1bb0:	0e 94 4e 0b 	call	0x169c	; 0x169c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1bb4:	1a 82       	std	Y+2, r1	; 0x02
    1bb6:	1e c0       	rjmp	.+60     	; 0x1bf4 <KEYPAD_getPressedKey+0xb2>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bba:	98 2f       	mov	r25, r24
    1bbc:	9c 5f       	subi	r25, 0xFC	; 252
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	69 2f       	mov	r22, r25
    1bc2:	0e 94 39 0c 	call	0x1872	; 0x1872 <GPIO_readPin>
    1bc6:	88 23       	and	r24, r24
    1bc8:	91 f4       	brne	.+36     	; 0x1bee <KEYPAD_getPressedKey+0xac>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	88 2f       	mov	r24, r24
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	88 0f       	add	r24, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	88 0f       	add	r24, r24
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	98 2f       	mov	r25, r24
    1bda:	8a 81       	ldd	r24, Y+2	; 0x02
    1bdc:	89 0f       	add	r24, r25
    1bde:	8f 5f       	subi	r24, 0xFF	; 255
    1be0:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1bee:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf0:	8f 5f       	subi	r24, 0xFF	; 255
    1bf2:	8a 83       	std	Y+2, r24	; 0x02
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	84 30       	cpi	r24, 0x04	; 4
    1bf8:	f8 f2       	brcs	.-66     	; 0x1bb8 <KEYPAD_getPressedKey+0x76>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	69 81       	ldd	r22, Y+1	; 0x01
    1bfe:	40 e0       	ldi	r20, 0x00	; 0
    1c00:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	8f 5f       	subi	r24, 0xFF	; 255
    1c08:	89 83       	std	Y+1, r24	; 0x01
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
    1c0c:	84 30       	cpi	r24, 0x04	; 4
    1c0e:	40 f2       	brcs	.-112    	; 0x1ba0 <KEYPAD_getPressedKey+0x5e>
    1c10:	c5 cf       	rjmp	.-118    	; 0x1b9c <KEYPAD_getPressedKey+0x5a>

00001c12 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1c12:	df 93       	push	r29
    1c14:	cf 93       	push	r28
    1c16:	00 d0       	rcall	.+0      	; 0x1c18 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1c18:	00 d0       	rcall	.+0      	; 0x1c1a <KEYPAD_4x4_adjustKeyNumber+0x8>
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
    1c1e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1c20:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	3c 83       	std	Y+4, r19	; 0x04
    1c2a:	2b 83       	std	Y+3, r18	; 0x03
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c30:	88 30       	cpi	r24, 0x08	; 8
    1c32:	91 05       	cpc	r25, r1
    1c34:	09 f4       	brne	.+2      	; 0x1c38 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1c36:	70 c0       	rjmp	.+224    	; 0x1d18 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1c38:	2b 81       	ldd	r18, Y+3	; 0x03
    1c3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c3c:	29 30       	cpi	r18, 0x09	; 9
    1c3e:	31 05       	cpc	r19, r1
    1c40:	5c f5       	brge	.+86     	; 0x1c98 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	9c 81       	ldd	r25, Y+4	; 0x04
    1c46:	84 30       	cpi	r24, 0x04	; 4
    1c48:	91 05       	cpc	r25, r1
    1c4a:	09 f4       	brne	.+2      	; 0x1c4e <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1c4c:	59 c0       	rjmp	.+178    	; 0x1d00 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1c4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c50:	3c 81       	ldd	r19, Y+4	; 0x04
    1c52:	25 30       	cpi	r18, 0x05	; 5
    1c54:	31 05       	cpc	r19, r1
    1c56:	9c f4       	brge	.+38     	; 0x1c7e <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5c:	82 30       	cpi	r24, 0x02	; 2
    1c5e:	91 05       	cpc	r25, r1
    1c60:	09 f4       	brne	.+2      	; 0x1c64 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1c62:	48 c0       	rjmp	.+144    	; 0x1cf4 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1c64:	2b 81       	ldd	r18, Y+3	; 0x03
    1c66:	3c 81       	ldd	r19, Y+4	; 0x04
    1c68:	23 30       	cpi	r18, 0x03	; 3
    1c6a:	31 05       	cpc	r19, r1
    1c6c:	0c f0       	brlt	.+2      	; 0x1c70 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1c6e:	45 c0       	rjmp	.+138    	; 0x1cfa <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	9c 81       	ldd	r25, Y+4	; 0x04
    1c74:	81 30       	cpi	r24, 0x01	; 1
    1c76:	91 05       	cpc	r25, r1
    1c78:	09 f4       	brne	.+2      	; 0x1c7c <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1c7a:	39 c0       	rjmp	.+114    	; 0x1cee <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1c7c:	67 c0       	rjmp	.+206    	; 0x1d4c <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1c7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c80:	3c 81       	ldd	r19, Y+4	; 0x04
    1c82:	26 30       	cpi	r18, 0x06	; 6
    1c84:	31 05       	cpc	r19, r1
    1c86:	09 f4       	brne	.+2      	; 0x1c8a <KEYPAD_4x4_adjustKeyNumber+0x78>
    1c88:	41 c0       	rjmp	.+130    	; 0x1d0c <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8e:	87 30       	cpi	r24, 0x07	; 7
    1c90:	91 05       	cpc	r25, r1
    1c92:	0c f0       	brlt	.+2      	; 0x1c96 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1c94:	3e c0       	rjmp	.+124    	; 0x1d12 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1c96:	37 c0       	rjmp	.+110    	; 0x1d06 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1c98:	2b 81       	ldd	r18, Y+3	; 0x03
    1c9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c9c:	2c 30       	cpi	r18, 0x0C	; 12
    1c9e:	31 05       	cpc	r19, r1
    1ca0:	09 f4       	brne	.+2      	; 0x1ca4 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1ca2:	46 c0       	rjmp	.+140    	; 0x1d30 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca8:	8d 30       	cpi	r24, 0x0D	; 13
    1caa:	91 05       	cpc	r25, r1
    1cac:	5c f4       	brge	.+22     	; 0x1cc4 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1cae:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb0:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb2:	2a 30       	cpi	r18, 0x0A	; 10
    1cb4:	31 05       	cpc	r19, r1
    1cb6:	b1 f1       	breq	.+108    	; 0x1d24 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	9c 81       	ldd	r25, Y+4	; 0x04
    1cbc:	8b 30       	cpi	r24, 0x0B	; 11
    1cbe:	91 05       	cpc	r25, r1
    1cc0:	a4 f5       	brge	.+104    	; 0x1d2a <KEYPAD_4x4_adjustKeyNumber+0x118>
    1cc2:	2d c0       	rjmp	.+90     	; 0x1d1e <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1cc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1cc6:	3c 81       	ldd	r19, Y+4	; 0x04
    1cc8:	2e 30       	cpi	r18, 0x0E	; 14
    1cca:	31 05       	cpc	r19, r1
    1ccc:	b9 f1       	breq	.+110    	; 0x1d3c <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd2:	8e 30       	cpi	r24, 0x0E	; 14
    1cd4:	91 05       	cpc	r25, r1
    1cd6:	7c f1       	brlt	.+94     	; 0x1d36 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1cd8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cda:	3c 81       	ldd	r19, Y+4	; 0x04
    1cdc:	2f 30       	cpi	r18, 0x0F	; 15
    1cde:	31 05       	cpc	r19, r1
    1ce0:	79 f1       	breq	.+94     	; 0x1d40 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce6:	80 31       	cpi	r24, 0x10	; 16
    1ce8:	91 05       	cpc	r25, r1
    1cea:	69 f1       	breq	.+90     	; 0x1d46 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1cec:	2f c0       	rjmp	.+94     	; 0x1d4c <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1cee:	87 e0       	ldi	r24, 0x07	; 7
    1cf0:	89 83       	std	Y+1, r24	; 0x01
    1cf2:	2e c0       	rjmp	.+92     	; 0x1d50 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1cf4:	88 e0       	ldi	r24, 0x08	; 8
    1cf6:	89 83       	std	Y+1, r24	; 0x01
    1cf8:	2b c0       	rjmp	.+86     	; 0x1d50 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1cfa:	89 e0       	ldi	r24, 0x09	; 9
    1cfc:	89 83       	std	Y+1, r24	; 0x01
    1cfe:	28 c0       	rjmp	.+80     	; 0x1d50 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1d00:	85 e2       	ldi	r24, 0x25	; 37
    1d02:	89 83       	std	Y+1, r24	; 0x01
    1d04:	25 c0       	rjmp	.+74     	; 0x1d50 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1d06:	84 e0       	ldi	r24, 0x04	; 4
    1d08:	89 83       	std	Y+1, r24	; 0x01
    1d0a:	22 c0       	rjmp	.+68     	; 0x1d50 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1d0c:	85 e0       	ldi	r24, 0x05	; 5
    1d0e:	89 83       	std	Y+1, r24	; 0x01
    1d10:	1f c0       	rjmp	.+62     	; 0x1d50 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1d12:	86 e0       	ldi	r24, 0x06	; 6
    1d14:	89 83       	std	Y+1, r24	; 0x01
    1d16:	1c c0       	rjmp	.+56     	; 0x1d50 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1d18:	8a e2       	ldi	r24, 0x2A	; 42
    1d1a:	89 83       	std	Y+1, r24	; 0x01
    1d1c:	19 c0       	rjmp	.+50     	; 0x1d50 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	89 83       	std	Y+1, r24	; 0x01
    1d22:	16 c0       	rjmp	.+44     	; 0x1d50 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1d24:	82 e0       	ldi	r24, 0x02	; 2
    1d26:	89 83       	std	Y+1, r24	; 0x01
    1d28:	13 c0       	rjmp	.+38     	; 0x1d50 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1d2a:	83 e0       	ldi	r24, 0x03	; 3
    1d2c:	89 83       	std	Y+1, r24	; 0x01
    1d2e:	10 c0       	rjmp	.+32     	; 0x1d50 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1d30:	8d e2       	ldi	r24, 0x2D	; 45
    1d32:	89 83       	std	Y+1, r24	; 0x01
    1d34:	0d c0       	rjmp	.+26     	; 0x1d50 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1d36:	8d e0       	ldi	r24, 0x0D	; 13
    1d38:	89 83       	std	Y+1, r24	; 0x01
    1d3a:	0a c0       	rjmp	.+20     	; 0x1d50 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1d3c:	19 82       	std	Y+1, r1	; 0x01
    1d3e:	08 c0       	rjmp	.+16     	; 0x1d50 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1d40:	8d e3       	ldi	r24, 0x3D	; 61
    1d42:	89 83       	std	Y+1, r24	; 0x01
    1d44:	05 c0       	rjmp	.+10     	; 0x1d50 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1d46:	8b e2       	ldi	r24, 0x2B	; 43
    1d48:	89 83       	std	Y+1, r24	; 0x01
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	cf 91       	pop	r28
    1d5c:	df 91       	pop	r29
    1d5e:	08 95       	ret

00001d60 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1d60:	df 93       	push	r29
    1d62:	cf 93       	push	r28
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
    1d68:	2e 97       	sbiw	r28, 0x0e	; 14
    1d6a:	0f b6       	in	r0, 0x3f	; 63
    1d6c:	f8 94       	cli
    1d6e:	de bf       	out	0x3e, r29	; 62
    1d70:	0f be       	out	0x3f, r0	; 63
    1d72:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1d74:	83 e0       	ldi	r24, 0x03	; 3
    1d76:	64 e0       	ldi	r22, 0x04	; 4
    1d78:	41 e0       	ldi	r20, 0x01	; 1
    1d7a:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1d7e:	83 e0       	ldi	r24, 0x03	; 3
    1d80:	65 e0       	ldi	r22, 0x05	; 5
    1d82:	41 e0       	ldi	r20, 0x01	; 1
    1d84:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_setupPinDirection>
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	a0 ea       	ldi	r26, 0xA0	; 160
    1d8e:	b1 e4       	ldi	r27, 0x41	; 65
    1d90:	8b 87       	std	Y+11, r24	; 0x0b
    1d92:	9c 87       	std	Y+12, r25	; 0x0c
    1d94:	ad 87       	std	Y+13, r26	; 0x0d
    1d96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d98:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	4a e7       	ldi	r20, 0x7A	; 122
    1da6:	53 e4       	ldi	r21, 0x43	; 67
    1da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	8f 83       	std	Y+7, r24	; 0x07
    1db2:	98 87       	std	Y+8, r25	; 0x08
    1db4:	a9 87       	std	Y+9, r26	; 0x09
    1db6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1db8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dba:	78 85       	ldd	r23, Y+8	; 0x08
    1dbc:	89 85       	ldd	r24, Y+9	; 0x09
    1dbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	40 e8       	ldi	r20, 0x80	; 128
    1dc6:	5f e3       	ldi	r21, 0x3F	; 63
    1dc8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dcc:	88 23       	and	r24, r24
    1dce:	2c f4       	brge	.+10     	; 0x1dda <LCD_init+0x7a>
		__ticks = 1;
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	9e 83       	std	Y+6, r25	; 0x06
    1dd6:	8d 83       	std	Y+5, r24	; 0x05
    1dd8:	3f c0       	rjmp	.+126    	; 0x1e58 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1dda:	6f 81       	ldd	r22, Y+7	; 0x07
    1ddc:	78 85       	ldd	r23, Y+8	; 0x08
    1dde:	89 85       	ldd	r24, Y+9	; 0x09
    1de0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	3f ef       	ldi	r19, 0xFF	; 255
    1de6:	4f e7       	ldi	r20, 0x7F	; 127
    1de8:	57 e4       	ldi	r21, 0x47	; 71
    1dea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dee:	18 16       	cp	r1, r24
    1df0:	4c f5       	brge	.+82     	; 0x1e44 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1df6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	40 e2       	ldi	r20, 0x20	; 32
    1e00:	51 e4       	ldi	r21, 0x41	; 65
    1e02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	bc 01       	movw	r22, r24
    1e0c:	cd 01       	movw	r24, r26
    1e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	9e 83       	std	Y+6, r25	; 0x06
    1e18:	8d 83       	std	Y+5, r24	; 0x05
    1e1a:	0f c0       	rjmp	.+30     	; 0x1e3a <LCD_init+0xda>
    1e1c:	89 e1       	ldi	r24, 0x19	; 25
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	9c 83       	std	Y+4, r25	; 0x04
    1e22:	8b 83       	std	Y+3, r24	; 0x03
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
    1e26:	9c 81       	ldd	r25, Y+4	; 0x04
    1e28:	01 97       	sbiw	r24, 0x01	; 1
    1e2a:	f1 f7       	brne	.-4      	; 0x1e28 <LCD_init+0xc8>
    1e2c:	9c 83       	std	Y+4, r25	; 0x04
    1e2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e30:	8d 81       	ldd	r24, Y+5	; 0x05
    1e32:	9e 81       	ldd	r25, Y+6	; 0x06
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	9e 83       	std	Y+6, r25	; 0x06
    1e38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3e:	00 97       	sbiw	r24, 0x00	; 0
    1e40:	69 f7       	brne	.-38     	; 0x1e1c <LCD_init+0xbc>
    1e42:	14 c0       	rjmp	.+40     	; 0x1e6c <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e44:	6f 81       	ldd	r22, Y+7	; 0x07
    1e46:	78 85       	ldd	r23, Y+8	; 0x08
    1e48:	89 85       	ldd	r24, Y+9	; 0x09
    1e4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	9e 83       	std	Y+6, r25	; 0x06
    1e56:	8d 83       	std	Y+5, r24	; 0x05
    1e58:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5c:	9a 83       	std	Y+2, r25	; 0x02
    1e5e:	89 83       	std	Y+1, r24	; 0x01
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	9a 81       	ldd	r25, Y+2	; 0x02
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	f1 f7       	brne	.-4      	; 0x1e64 <LCD_init+0x104>
    1e68:	9a 83       	std	Y+2, r25	; 0x02
    1e6a:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1e6c:	82 e0       	ldi	r24, 0x02	; 2
    1e6e:	6f ef       	ldi	r22, 0xFF	; 255
    1e70:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1e74:	88 e3       	ldi	r24, 0x38	; 56
    1e76:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1e7a:	8c e0       	ldi	r24, 0x0C	; 12
    1e7c:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_sendCommand>
}
    1e86:	2e 96       	adiw	r28, 0x0e	; 14
    1e88:	0f b6       	in	r0, 0x3f	; 63
    1e8a:	f8 94       	cli
    1e8c:	de bf       	out	0x3e, r29	; 62
    1e8e:	0f be       	out	0x3f, r0	; 63
    1e90:	cd bf       	out	0x3d, r28	; 61
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	08 95       	ret

00001e98 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	cd b7       	in	r28, 0x3d	; 61
    1e9e:	de b7       	in	r29, 0x3e	; 62
    1ea0:	e9 97       	sbiw	r28, 0x39	; 57
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	f8 94       	cli
    1ea6:	de bf       	out	0x3e, r29	; 62
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	cd bf       	out	0x3d, r28	; 61
    1eac:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1eae:	83 e0       	ldi	r24, 0x03	; 3
    1eb0:	64 e0       	ldi	r22, 0x04	; 4
    1eb2:	40 e0       	ldi	r20, 0x00	; 0
    1eb4:	0e 94 4e 0b 	call	0x169c	; 0x169c <GPIO_writePin>
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	a0 e8       	ldi	r26, 0x80	; 128
    1ebe:	bf e3       	ldi	r27, 0x3F	; 63
    1ec0:	8d ab       	std	Y+53, r24	; 0x35
    1ec2:	9e ab       	std	Y+54, r25	; 0x36
    1ec4:	af ab       	std	Y+55, r26	; 0x37
    1ec6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec8:	6d a9       	ldd	r22, Y+53	; 0x35
    1eca:	7e a9       	ldd	r23, Y+54	; 0x36
    1ecc:	8f a9       	ldd	r24, Y+55	; 0x37
    1ece:	98 ad       	ldd	r25, Y+56	; 0x38
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	4a e7       	ldi	r20, 0x7A	; 122
    1ed6:	53 e4       	ldi	r21, 0x43	; 67
    1ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	89 ab       	std	Y+49, r24	; 0x31
    1ee2:	9a ab       	std	Y+50, r25	; 0x32
    1ee4:	ab ab       	std	Y+51, r26	; 0x33
    1ee6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ee8:	69 a9       	ldd	r22, Y+49	; 0x31
    1eea:	7a a9       	ldd	r23, Y+50	; 0x32
    1eec:	8b a9       	ldd	r24, Y+51	; 0x33
    1eee:	9c a9       	ldd	r25, Y+52	; 0x34
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	40 e8       	ldi	r20, 0x80	; 128
    1ef6:	5f e3       	ldi	r21, 0x3F	; 63
    1ef8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1efc:	88 23       	and	r24, r24
    1efe:	2c f4       	brge	.+10     	; 0x1f0a <LCD_sendCommand+0x72>
		__ticks = 1;
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	98 ab       	std	Y+48, r25	; 0x30
    1f06:	8f a7       	std	Y+47, r24	; 0x2f
    1f08:	3f c0       	rjmp	.+126    	; 0x1f88 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1f0a:	69 a9       	ldd	r22, Y+49	; 0x31
    1f0c:	7a a9       	ldd	r23, Y+50	; 0x32
    1f0e:	8b a9       	ldd	r24, Y+51	; 0x33
    1f10:	9c a9       	ldd	r25, Y+52	; 0x34
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	3f ef       	ldi	r19, 0xFF	; 255
    1f16:	4f e7       	ldi	r20, 0x7F	; 127
    1f18:	57 e4       	ldi	r21, 0x47	; 71
    1f1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f1e:	18 16       	cp	r1, r24
    1f20:	4c f5       	brge	.+82     	; 0x1f74 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f22:	6d a9       	ldd	r22, Y+53	; 0x35
    1f24:	7e a9       	ldd	r23, Y+54	; 0x36
    1f26:	8f a9       	ldd	r24, Y+55	; 0x37
    1f28:	98 ad       	ldd	r25, Y+56	; 0x38
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	40 e2       	ldi	r20, 0x20	; 32
    1f30:	51 e4       	ldi	r21, 0x41	; 65
    1f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	bc 01       	movw	r22, r24
    1f3c:	cd 01       	movw	r24, r26
    1f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	98 ab       	std	Y+48, r25	; 0x30
    1f48:	8f a7       	std	Y+47, r24	; 0x2f
    1f4a:	0f c0       	rjmp	.+30     	; 0x1f6a <LCD_sendCommand+0xd2>
    1f4c:	89 e1       	ldi	r24, 0x19	; 25
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	9e a7       	std	Y+46, r25	; 0x2e
    1f52:	8d a7       	std	Y+45, r24	; 0x2d
    1f54:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f56:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	f1 f7       	brne	.-4      	; 0x1f58 <LCD_sendCommand+0xc0>
    1f5c:	9e a7       	std	Y+46, r25	; 0x2e
    1f5e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f60:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f62:	98 a9       	ldd	r25, Y+48	; 0x30
    1f64:	01 97       	sbiw	r24, 0x01	; 1
    1f66:	98 ab       	std	Y+48, r25	; 0x30
    1f68:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f6c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f6e:	00 97       	sbiw	r24, 0x00	; 0
    1f70:	69 f7       	brne	.-38     	; 0x1f4c <LCD_sendCommand+0xb4>
    1f72:	14 c0       	rjmp	.+40     	; 0x1f9c <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f74:	69 a9       	ldd	r22, Y+49	; 0x31
    1f76:	7a a9       	ldd	r23, Y+50	; 0x32
    1f78:	8b a9       	ldd	r24, Y+51	; 0x33
    1f7a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	98 ab       	std	Y+48, r25	; 0x30
    1f86:	8f a7       	std	Y+47, r24	; 0x2f
    1f88:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f8a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f8c:	9c a7       	std	Y+44, r25	; 0x2c
    1f8e:	8b a7       	std	Y+43, r24	; 0x2b
    1f90:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f92:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f94:	01 97       	sbiw	r24, 0x01	; 1
    1f96:	f1 f7       	brne	.-4      	; 0x1f94 <LCD_sendCommand+0xfc>
    1f98:	9c a7       	std	Y+44, r25	; 0x2c
    1f9a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1f9c:	83 e0       	ldi	r24, 0x03	; 3
    1f9e:	65 e0       	ldi	r22, 0x05	; 5
    1fa0:	41 e0       	ldi	r20, 0x01	; 1
    1fa2:	0e 94 4e 0b 	call	0x169c	; 0x169c <GPIO_writePin>
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	a0 e8       	ldi	r26, 0x80	; 128
    1fac:	bf e3       	ldi	r27, 0x3F	; 63
    1fae:	8f a3       	std	Y+39, r24	; 0x27
    1fb0:	98 a7       	std	Y+40, r25	; 0x28
    1fb2:	a9 a7       	std	Y+41, r26	; 0x29
    1fb4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb6:	6f a1       	ldd	r22, Y+39	; 0x27
    1fb8:	78 a5       	ldd	r23, Y+40	; 0x28
    1fba:	89 a5       	ldd	r24, Y+41	; 0x29
    1fbc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	4a e7       	ldi	r20, 0x7A	; 122
    1fc4:	53 e4       	ldi	r21, 0x43	; 67
    1fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	8b a3       	std	Y+35, r24	; 0x23
    1fd0:	9c a3       	std	Y+36, r25	; 0x24
    1fd2:	ad a3       	std	Y+37, r26	; 0x25
    1fd4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fd6:	6b a1       	ldd	r22, Y+35	; 0x23
    1fd8:	7c a1       	ldd	r23, Y+36	; 0x24
    1fda:	8d a1       	ldd	r24, Y+37	; 0x25
    1fdc:	9e a1       	ldd	r25, Y+38	; 0x26
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	40 e8       	ldi	r20, 0x80	; 128
    1fe4:	5f e3       	ldi	r21, 0x3F	; 63
    1fe6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fea:	88 23       	and	r24, r24
    1fec:	2c f4       	brge	.+10     	; 0x1ff8 <LCD_sendCommand+0x160>
		__ticks = 1;
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	9a a3       	std	Y+34, r25	; 0x22
    1ff4:	89 a3       	std	Y+33, r24	; 0x21
    1ff6:	3f c0       	rjmp	.+126    	; 0x2076 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1ff8:	6b a1       	ldd	r22, Y+35	; 0x23
    1ffa:	7c a1       	ldd	r23, Y+36	; 0x24
    1ffc:	8d a1       	ldd	r24, Y+37	; 0x25
    1ffe:	9e a1       	ldd	r25, Y+38	; 0x26
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	3f ef       	ldi	r19, 0xFF	; 255
    2004:	4f e7       	ldi	r20, 0x7F	; 127
    2006:	57 e4       	ldi	r21, 0x47	; 71
    2008:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    200c:	18 16       	cp	r1, r24
    200e:	4c f5       	brge	.+82     	; 0x2062 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2010:	6f a1       	ldd	r22, Y+39	; 0x27
    2012:	78 a5       	ldd	r23, Y+40	; 0x28
    2014:	89 a5       	ldd	r24, Y+41	; 0x29
    2016:	9a a5       	ldd	r25, Y+42	; 0x2a
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	40 e2       	ldi	r20, 0x20	; 32
    201e:	51 e4       	ldi	r21, 0x41	; 65
    2020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	bc 01       	movw	r22, r24
    202a:	cd 01       	movw	r24, r26
    202c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	9a a3       	std	Y+34, r25	; 0x22
    2036:	89 a3       	std	Y+33, r24	; 0x21
    2038:	0f c0       	rjmp	.+30     	; 0x2058 <LCD_sendCommand+0x1c0>
    203a:	89 e1       	ldi	r24, 0x19	; 25
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	98 a3       	std	Y+32, r25	; 0x20
    2040:	8f 8f       	std	Y+31, r24	; 0x1f
    2042:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2044:	98 a1       	ldd	r25, Y+32	; 0x20
    2046:	01 97       	sbiw	r24, 0x01	; 1
    2048:	f1 f7       	brne	.-4      	; 0x2046 <LCD_sendCommand+0x1ae>
    204a:	98 a3       	std	Y+32, r25	; 0x20
    204c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204e:	89 a1       	ldd	r24, Y+33	; 0x21
    2050:	9a a1       	ldd	r25, Y+34	; 0x22
    2052:	01 97       	sbiw	r24, 0x01	; 1
    2054:	9a a3       	std	Y+34, r25	; 0x22
    2056:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2058:	89 a1       	ldd	r24, Y+33	; 0x21
    205a:	9a a1       	ldd	r25, Y+34	; 0x22
    205c:	00 97       	sbiw	r24, 0x00	; 0
    205e:	69 f7       	brne	.-38     	; 0x203a <LCD_sendCommand+0x1a2>
    2060:	14 c0       	rjmp	.+40     	; 0x208a <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2062:	6b a1       	ldd	r22, Y+35	; 0x23
    2064:	7c a1       	ldd	r23, Y+36	; 0x24
    2066:	8d a1       	ldd	r24, Y+37	; 0x25
    2068:	9e a1       	ldd	r25, Y+38	; 0x26
    206a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	9a a3       	std	Y+34, r25	; 0x22
    2074:	89 a3       	std	Y+33, r24	; 0x21
    2076:	89 a1       	ldd	r24, Y+33	; 0x21
    2078:	9a a1       	ldd	r25, Y+34	; 0x22
    207a:	9e 8f       	std	Y+30, r25	; 0x1e
    207c:	8d 8f       	std	Y+29, r24	; 0x1d
    207e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2080:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2082:	01 97       	sbiw	r24, 0x01	; 1
    2084:	f1 f7       	brne	.-4      	; 0x2082 <LCD_sendCommand+0x1ea>
    2086:	9e 8f       	std	Y+30, r25	; 0x1e
    2088:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    208a:	82 e0       	ldi	r24, 0x02	; 2
    208c:	69 ad       	ldd	r22, Y+57	; 0x39
    208e:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <GPIO_writePort>
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	a0 e8       	ldi	r26, 0x80	; 128
    2098:	bf e3       	ldi	r27, 0x3F	; 63
    209a:	89 8f       	std	Y+25, r24	; 0x19
    209c:	9a 8f       	std	Y+26, r25	; 0x1a
    209e:	ab 8f       	std	Y+27, r26	; 0x1b
    20a0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a2:	69 8d       	ldd	r22, Y+25	; 0x19
    20a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	4a e7       	ldi	r20, 0x7A	; 122
    20b0:	53 e4       	ldi	r21, 0x43	; 67
    20b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	8d 8b       	std	Y+21, r24	; 0x15
    20bc:	9e 8b       	std	Y+22, r25	; 0x16
    20be:	af 8b       	std	Y+23, r26	; 0x17
    20c0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20c2:	6d 89       	ldd	r22, Y+21	; 0x15
    20c4:	7e 89       	ldd	r23, Y+22	; 0x16
    20c6:	8f 89       	ldd	r24, Y+23	; 0x17
    20c8:	98 8d       	ldd	r25, Y+24	; 0x18
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e8       	ldi	r20, 0x80	; 128
    20d0:	5f e3       	ldi	r21, 0x3F	; 63
    20d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20d6:	88 23       	and	r24, r24
    20d8:	2c f4       	brge	.+10     	; 0x20e4 <LCD_sendCommand+0x24c>
		__ticks = 1;
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	9c 8b       	std	Y+20, r25	; 0x14
    20e0:	8b 8b       	std	Y+19, r24	; 0x13
    20e2:	3f c0       	rjmp	.+126    	; 0x2162 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    20e4:	6d 89       	ldd	r22, Y+21	; 0x15
    20e6:	7e 89       	ldd	r23, Y+22	; 0x16
    20e8:	8f 89       	ldd	r24, Y+23	; 0x17
    20ea:	98 8d       	ldd	r25, Y+24	; 0x18
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	3f ef       	ldi	r19, 0xFF	; 255
    20f0:	4f e7       	ldi	r20, 0x7F	; 127
    20f2:	57 e4       	ldi	r21, 0x47	; 71
    20f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20f8:	18 16       	cp	r1, r24
    20fa:	4c f5       	brge	.+82     	; 0x214e <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fc:	69 8d       	ldd	r22, Y+25	; 0x19
    20fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2100:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2102:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e2       	ldi	r20, 0x20	; 32
    210a:	51 e4       	ldi	r21, 0x41	; 65
    210c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	bc 01       	movw	r22, r24
    2116:	cd 01       	movw	r24, r26
    2118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	9c 8b       	std	Y+20, r25	; 0x14
    2122:	8b 8b       	std	Y+19, r24	; 0x13
    2124:	0f c0       	rjmp	.+30     	; 0x2144 <LCD_sendCommand+0x2ac>
    2126:	89 e1       	ldi	r24, 0x19	; 25
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	9a 8b       	std	Y+18, r25	; 0x12
    212c:	89 8b       	std	Y+17, r24	; 0x11
    212e:	89 89       	ldd	r24, Y+17	; 0x11
    2130:	9a 89       	ldd	r25, Y+18	; 0x12
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	f1 f7       	brne	.-4      	; 0x2132 <LCD_sendCommand+0x29a>
    2136:	9a 8b       	std	Y+18, r25	; 0x12
    2138:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213a:	8b 89       	ldd	r24, Y+19	; 0x13
    213c:	9c 89       	ldd	r25, Y+20	; 0x14
    213e:	01 97       	sbiw	r24, 0x01	; 1
    2140:	9c 8b       	std	Y+20, r25	; 0x14
    2142:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2144:	8b 89       	ldd	r24, Y+19	; 0x13
    2146:	9c 89       	ldd	r25, Y+20	; 0x14
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	69 f7       	brne	.-38     	; 0x2126 <LCD_sendCommand+0x28e>
    214c:	14 c0       	rjmp	.+40     	; 0x2176 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    214e:	6d 89       	ldd	r22, Y+21	; 0x15
    2150:	7e 89       	ldd	r23, Y+22	; 0x16
    2152:	8f 89       	ldd	r24, Y+23	; 0x17
    2154:	98 8d       	ldd	r25, Y+24	; 0x18
    2156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	9c 8b       	std	Y+20, r25	; 0x14
    2160:	8b 8b       	std	Y+19, r24	; 0x13
    2162:	8b 89       	ldd	r24, Y+19	; 0x13
    2164:	9c 89       	ldd	r25, Y+20	; 0x14
    2166:	98 8b       	std	Y+16, r25	; 0x10
    2168:	8f 87       	std	Y+15, r24	; 0x0f
    216a:	8f 85       	ldd	r24, Y+15	; 0x0f
    216c:	98 89       	ldd	r25, Y+16	; 0x10
    216e:	01 97       	sbiw	r24, 0x01	; 1
    2170:	f1 f7       	brne	.-4      	; 0x216e <LCD_sendCommand+0x2d6>
    2172:	98 8b       	std	Y+16, r25	; 0x10
    2174:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2176:	83 e0       	ldi	r24, 0x03	; 3
    2178:	65 e0       	ldi	r22, 0x05	; 5
    217a:	40 e0       	ldi	r20, 0x00	; 0
    217c:	0e 94 4e 0b 	call	0x169c	; 0x169c <GPIO_writePin>
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	a0 e8       	ldi	r26, 0x80	; 128
    2186:	bf e3       	ldi	r27, 0x3F	; 63
    2188:	8b 87       	std	Y+11, r24	; 0x0b
    218a:	9c 87       	std	Y+12, r25	; 0x0c
    218c:	ad 87       	std	Y+13, r26	; 0x0d
    218e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2190:	6b 85       	ldd	r22, Y+11	; 0x0b
    2192:	7c 85       	ldd	r23, Y+12	; 0x0c
    2194:	8d 85       	ldd	r24, Y+13	; 0x0d
    2196:	9e 85       	ldd	r25, Y+14	; 0x0e
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	4a e7       	ldi	r20, 0x7A	; 122
    219e:	53 e4       	ldi	r21, 0x43	; 67
    21a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	8f 83       	std	Y+7, r24	; 0x07
    21aa:	98 87       	std	Y+8, r25	; 0x08
    21ac:	a9 87       	std	Y+9, r26	; 0x09
    21ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21b0:	6f 81       	ldd	r22, Y+7	; 0x07
    21b2:	78 85       	ldd	r23, Y+8	; 0x08
    21b4:	89 85       	ldd	r24, Y+9	; 0x09
    21b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	40 e8       	ldi	r20, 0x80	; 128
    21be:	5f e3       	ldi	r21, 0x3F	; 63
    21c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21c4:	88 23       	and	r24, r24
    21c6:	2c f4       	brge	.+10     	; 0x21d2 <LCD_sendCommand+0x33a>
		__ticks = 1;
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	9e 83       	std	Y+6, r25	; 0x06
    21ce:	8d 83       	std	Y+5, r24	; 0x05
    21d0:	3f c0       	rjmp	.+126    	; 0x2250 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    21d2:	6f 81       	ldd	r22, Y+7	; 0x07
    21d4:	78 85       	ldd	r23, Y+8	; 0x08
    21d6:	89 85       	ldd	r24, Y+9	; 0x09
    21d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	3f ef       	ldi	r19, 0xFF	; 255
    21de:	4f e7       	ldi	r20, 0x7F	; 127
    21e0:	57 e4       	ldi	r21, 0x47	; 71
    21e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21e6:	18 16       	cp	r1, r24
    21e8:	4c f5       	brge	.+82     	; 0x223c <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	40 e2       	ldi	r20, 0x20	; 32
    21f8:	51 e4       	ldi	r21, 0x41	; 65
    21fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	bc 01       	movw	r22, r24
    2204:	cd 01       	movw	r24, r26
    2206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	9e 83       	std	Y+6, r25	; 0x06
    2210:	8d 83       	std	Y+5, r24	; 0x05
    2212:	0f c0       	rjmp	.+30     	; 0x2232 <LCD_sendCommand+0x39a>
    2214:	89 e1       	ldi	r24, 0x19	; 25
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	9c 83       	std	Y+4, r25	; 0x04
    221a:	8b 83       	std	Y+3, r24	; 0x03
    221c:	8b 81       	ldd	r24, Y+3	; 0x03
    221e:	9c 81       	ldd	r25, Y+4	; 0x04
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	f1 f7       	brne	.-4      	; 0x2220 <LCD_sendCommand+0x388>
    2224:	9c 83       	std	Y+4, r25	; 0x04
    2226:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2228:	8d 81       	ldd	r24, Y+5	; 0x05
    222a:	9e 81       	ldd	r25, Y+6	; 0x06
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	9e 83       	std	Y+6, r25	; 0x06
    2230:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2232:	8d 81       	ldd	r24, Y+5	; 0x05
    2234:	9e 81       	ldd	r25, Y+6	; 0x06
    2236:	00 97       	sbiw	r24, 0x00	; 0
    2238:	69 f7       	brne	.-38     	; 0x2214 <LCD_sendCommand+0x37c>
    223a:	14 c0       	rjmp	.+40     	; 0x2264 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    223c:	6f 81       	ldd	r22, Y+7	; 0x07
    223e:	78 85       	ldd	r23, Y+8	; 0x08
    2240:	89 85       	ldd	r24, Y+9	; 0x09
    2242:	9a 85       	ldd	r25, Y+10	; 0x0a
    2244:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	9e 83       	std	Y+6, r25	; 0x06
    224e:	8d 83       	std	Y+5, r24	; 0x05
    2250:	8d 81       	ldd	r24, Y+5	; 0x05
    2252:	9e 81       	ldd	r25, Y+6	; 0x06
    2254:	9a 83       	std	Y+2, r25	; 0x02
    2256:	89 83       	std	Y+1, r24	; 0x01
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	9a 81       	ldd	r25, Y+2	; 0x02
    225c:	01 97       	sbiw	r24, 0x01	; 1
    225e:	f1 f7       	brne	.-4      	; 0x225c <LCD_sendCommand+0x3c4>
    2260:	9a 83       	std	Y+2, r25	; 0x02
    2262:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2264:	e9 96       	adiw	r28, 0x39	; 57
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	f8 94       	cli
    226a:	de bf       	out	0x3e, r29	; 62
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	cd bf       	out	0x3d, r28	; 61
    2270:	cf 91       	pop	r28
    2272:	df 91       	pop	r29
    2274:	08 95       	ret

00002276 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2276:	df 93       	push	r29
    2278:	cf 93       	push	r28
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
    227e:	e9 97       	sbiw	r28, 0x39	; 57
    2280:	0f b6       	in	r0, 0x3f	; 63
    2282:	f8 94       	cli
    2284:	de bf       	out	0x3e, r29	; 62
    2286:	0f be       	out	0x3f, r0	; 63
    2288:	cd bf       	out	0x3d, r28	; 61
    228a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    228c:	83 e0       	ldi	r24, 0x03	; 3
    228e:	64 e0       	ldi	r22, 0x04	; 4
    2290:	41 e0       	ldi	r20, 0x01	; 1
    2292:	0e 94 4e 0b 	call	0x169c	; 0x169c <GPIO_writePin>
    2296:	80 e0       	ldi	r24, 0x00	; 0
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	a0 e8       	ldi	r26, 0x80	; 128
    229c:	bf e3       	ldi	r27, 0x3F	; 63
    229e:	8d ab       	std	Y+53, r24	; 0x35
    22a0:	9e ab       	std	Y+54, r25	; 0x36
    22a2:	af ab       	std	Y+55, r26	; 0x37
    22a4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a6:	6d a9       	ldd	r22, Y+53	; 0x35
    22a8:	7e a9       	ldd	r23, Y+54	; 0x36
    22aa:	8f a9       	ldd	r24, Y+55	; 0x37
    22ac:	98 ad       	ldd	r25, Y+56	; 0x38
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	4a e7       	ldi	r20, 0x7A	; 122
    22b4:	53 e4       	ldi	r21, 0x43	; 67
    22b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ba:	dc 01       	movw	r26, r24
    22bc:	cb 01       	movw	r24, r22
    22be:	89 ab       	std	Y+49, r24	; 0x31
    22c0:	9a ab       	std	Y+50, r25	; 0x32
    22c2:	ab ab       	std	Y+51, r26	; 0x33
    22c4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22c6:	69 a9       	ldd	r22, Y+49	; 0x31
    22c8:	7a a9       	ldd	r23, Y+50	; 0x32
    22ca:	8b a9       	ldd	r24, Y+51	; 0x33
    22cc:	9c a9       	ldd	r25, Y+52	; 0x34
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	40 e8       	ldi	r20, 0x80	; 128
    22d4:	5f e3       	ldi	r21, 0x3F	; 63
    22d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22da:	88 23       	and	r24, r24
    22dc:	2c f4       	brge	.+10     	; 0x22e8 <LCD_displayCharacter+0x72>
		__ticks = 1;
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	98 ab       	std	Y+48, r25	; 0x30
    22e4:	8f a7       	std	Y+47, r24	; 0x2f
    22e6:	3f c0       	rjmp	.+126    	; 0x2366 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    22e8:	69 a9       	ldd	r22, Y+49	; 0x31
    22ea:	7a a9       	ldd	r23, Y+50	; 0x32
    22ec:	8b a9       	ldd	r24, Y+51	; 0x33
    22ee:	9c a9       	ldd	r25, Y+52	; 0x34
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	3f ef       	ldi	r19, 0xFF	; 255
    22f4:	4f e7       	ldi	r20, 0x7F	; 127
    22f6:	57 e4       	ldi	r21, 0x47	; 71
    22f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22fc:	18 16       	cp	r1, r24
    22fe:	4c f5       	brge	.+82     	; 0x2352 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2300:	6d a9       	ldd	r22, Y+53	; 0x35
    2302:	7e a9       	ldd	r23, Y+54	; 0x36
    2304:	8f a9       	ldd	r24, Y+55	; 0x37
    2306:	98 ad       	ldd	r25, Y+56	; 0x38
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	40 e2       	ldi	r20, 0x20	; 32
    230e:	51 e4       	ldi	r21, 0x41	; 65
    2310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	bc 01       	movw	r22, r24
    231a:	cd 01       	movw	r24, r26
    231c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	98 ab       	std	Y+48, r25	; 0x30
    2326:	8f a7       	std	Y+47, r24	; 0x2f
    2328:	0f c0       	rjmp	.+30     	; 0x2348 <LCD_displayCharacter+0xd2>
    232a:	89 e1       	ldi	r24, 0x19	; 25
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	9e a7       	std	Y+46, r25	; 0x2e
    2330:	8d a7       	std	Y+45, r24	; 0x2d
    2332:	8d a5       	ldd	r24, Y+45	; 0x2d
    2334:	9e a5       	ldd	r25, Y+46	; 0x2e
    2336:	01 97       	sbiw	r24, 0x01	; 1
    2338:	f1 f7       	brne	.-4      	; 0x2336 <LCD_displayCharacter+0xc0>
    233a:	9e a7       	std	Y+46, r25	; 0x2e
    233c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    233e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2340:	98 a9       	ldd	r25, Y+48	; 0x30
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	98 ab       	std	Y+48, r25	; 0x30
    2346:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2348:	8f a5       	ldd	r24, Y+47	; 0x2f
    234a:	98 a9       	ldd	r25, Y+48	; 0x30
    234c:	00 97       	sbiw	r24, 0x00	; 0
    234e:	69 f7       	brne	.-38     	; 0x232a <LCD_displayCharacter+0xb4>
    2350:	14 c0       	rjmp	.+40     	; 0x237a <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2352:	69 a9       	ldd	r22, Y+49	; 0x31
    2354:	7a a9       	ldd	r23, Y+50	; 0x32
    2356:	8b a9       	ldd	r24, Y+51	; 0x33
    2358:	9c a9       	ldd	r25, Y+52	; 0x34
    235a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	98 ab       	std	Y+48, r25	; 0x30
    2364:	8f a7       	std	Y+47, r24	; 0x2f
    2366:	8f a5       	ldd	r24, Y+47	; 0x2f
    2368:	98 a9       	ldd	r25, Y+48	; 0x30
    236a:	9c a7       	std	Y+44, r25	; 0x2c
    236c:	8b a7       	std	Y+43, r24	; 0x2b
    236e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2370:	9c a5       	ldd	r25, Y+44	; 0x2c
    2372:	01 97       	sbiw	r24, 0x01	; 1
    2374:	f1 f7       	brne	.-4      	; 0x2372 <LCD_displayCharacter+0xfc>
    2376:	9c a7       	std	Y+44, r25	; 0x2c
    2378:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    237a:	83 e0       	ldi	r24, 0x03	; 3
    237c:	65 e0       	ldi	r22, 0x05	; 5
    237e:	41 e0       	ldi	r20, 0x01	; 1
    2380:	0e 94 4e 0b 	call	0x169c	; 0x169c <GPIO_writePin>
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	a0 e8       	ldi	r26, 0x80	; 128
    238a:	bf e3       	ldi	r27, 0x3F	; 63
    238c:	8f a3       	std	Y+39, r24	; 0x27
    238e:	98 a7       	std	Y+40, r25	; 0x28
    2390:	a9 a7       	std	Y+41, r26	; 0x29
    2392:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2394:	6f a1       	ldd	r22, Y+39	; 0x27
    2396:	78 a5       	ldd	r23, Y+40	; 0x28
    2398:	89 a5       	ldd	r24, Y+41	; 0x29
    239a:	9a a5       	ldd	r25, Y+42	; 0x2a
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	4a e7       	ldi	r20, 0x7A	; 122
    23a2:	53 e4       	ldi	r21, 0x43	; 67
    23a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	8b a3       	std	Y+35, r24	; 0x23
    23ae:	9c a3       	std	Y+36, r25	; 0x24
    23b0:	ad a3       	std	Y+37, r26	; 0x25
    23b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23b4:	6b a1       	ldd	r22, Y+35	; 0x23
    23b6:	7c a1       	ldd	r23, Y+36	; 0x24
    23b8:	8d a1       	ldd	r24, Y+37	; 0x25
    23ba:	9e a1       	ldd	r25, Y+38	; 0x26
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e8       	ldi	r20, 0x80	; 128
    23c2:	5f e3       	ldi	r21, 0x3F	; 63
    23c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23c8:	88 23       	and	r24, r24
    23ca:	2c f4       	brge	.+10     	; 0x23d6 <LCD_displayCharacter+0x160>
		__ticks = 1;
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	9a a3       	std	Y+34, r25	; 0x22
    23d2:	89 a3       	std	Y+33, r24	; 0x21
    23d4:	3f c0       	rjmp	.+126    	; 0x2454 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    23d6:	6b a1       	ldd	r22, Y+35	; 0x23
    23d8:	7c a1       	ldd	r23, Y+36	; 0x24
    23da:	8d a1       	ldd	r24, Y+37	; 0x25
    23dc:	9e a1       	ldd	r25, Y+38	; 0x26
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	3f ef       	ldi	r19, 0xFF	; 255
    23e2:	4f e7       	ldi	r20, 0x7F	; 127
    23e4:	57 e4       	ldi	r21, 0x47	; 71
    23e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ea:	18 16       	cp	r1, r24
    23ec:	4c f5       	brge	.+82     	; 0x2440 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ee:	6f a1       	ldd	r22, Y+39	; 0x27
    23f0:	78 a5       	ldd	r23, Y+40	; 0x28
    23f2:	89 a5       	ldd	r24, Y+41	; 0x29
    23f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	40 e2       	ldi	r20, 0x20	; 32
    23fc:	51 e4       	ldi	r21, 0x41	; 65
    23fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	bc 01       	movw	r22, r24
    2408:	cd 01       	movw	r24, r26
    240a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	9a a3       	std	Y+34, r25	; 0x22
    2414:	89 a3       	std	Y+33, r24	; 0x21
    2416:	0f c0       	rjmp	.+30     	; 0x2436 <LCD_displayCharacter+0x1c0>
    2418:	89 e1       	ldi	r24, 0x19	; 25
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	98 a3       	std	Y+32, r25	; 0x20
    241e:	8f 8f       	std	Y+31, r24	; 0x1f
    2420:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2422:	98 a1       	ldd	r25, Y+32	; 0x20
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	f1 f7       	brne	.-4      	; 0x2424 <LCD_displayCharacter+0x1ae>
    2428:	98 a3       	std	Y+32, r25	; 0x20
    242a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242c:	89 a1       	ldd	r24, Y+33	; 0x21
    242e:	9a a1       	ldd	r25, Y+34	; 0x22
    2430:	01 97       	sbiw	r24, 0x01	; 1
    2432:	9a a3       	std	Y+34, r25	; 0x22
    2434:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2436:	89 a1       	ldd	r24, Y+33	; 0x21
    2438:	9a a1       	ldd	r25, Y+34	; 0x22
    243a:	00 97       	sbiw	r24, 0x00	; 0
    243c:	69 f7       	brne	.-38     	; 0x2418 <LCD_displayCharacter+0x1a2>
    243e:	14 c0       	rjmp	.+40     	; 0x2468 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2440:	6b a1       	ldd	r22, Y+35	; 0x23
    2442:	7c a1       	ldd	r23, Y+36	; 0x24
    2444:	8d a1       	ldd	r24, Y+37	; 0x25
    2446:	9e a1       	ldd	r25, Y+38	; 0x26
    2448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	9a a3       	std	Y+34, r25	; 0x22
    2452:	89 a3       	std	Y+33, r24	; 0x21
    2454:	89 a1       	ldd	r24, Y+33	; 0x21
    2456:	9a a1       	ldd	r25, Y+34	; 0x22
    2458:	9e 8f       	std	Y+30, r25	; 0x1e
    245a:	8d 8f       	std	Y+29, r24	; 0x1d
    245c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    245e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2460:	01 97       	sbiw	r24, 0x01	; 1
    2462:	f1 f7       	brne	.-4      	; 0x2460 <LCD_displayCharacter+0x1ea>
    2464:	9e 8f       	std	Y+30, r25	; 0x1e
    2466:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2468:	82 e0       	ldi	r24, 0x02	; 2
    246a:	69 ad       	ldd	r22, Y+57	; 0x39
    246c:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <GPIO_writePort>
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	a0 e8       	ldi	r26, 0x80	; 128
    2476:	bf e3       	ldi	r27, 0x3F	; 63
    2478:	89 8f       	std	Y+25, r24	; 0x19
    247a:	9a 8f       	std	Y+26, r25	; 0x1a
    247c:	ab 8f       	std	Y+27, r26	; 0x1b
    247e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2480:	69 8d       	ldd	r22, Y+25	; 0x19
    2482:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2484:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2486:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	4a e7       	ldi	r20, 0x7A	; 122
    248e:	53 e4       	ldi	r21, 0x43	; 67
    2490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	8d 8b       	std	Y+21, r24	; 0x15
    249a:	9e 8b       	std	Y+22, r25	; 0x16
    249c:	af 8b       	std	Y+23, r26	; 0x17
    249e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24a0:	6d 89       	ldd	r22, Y+21	; 0x15
    24a2:	7e 89       	ldd	r23, Y+22	; 0x16
    24a4:	8f 89       	ldd	r24, Y+23	; 0x17
    24a6:	98 8d       	ldd	r25, Y+24	; 0x18
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	40 e8       	ldi	r20, 0x80	; 128
    24ae:	5f e3       	ldi	r21, 0x3F	; 63
    24b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24b4:	88 23       	and	r24, r24
    24b6:	2c f4       	brge	.+10     	; 0x24c2 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	9c 8b       	std	Y+20, r25	; 0x14
    24be:	8b 8b       	std	Y+19, r24	; 0x13
    24c0:	3f c0       	rjmp	.+126    	; 0x2540 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    24c2:	6d 89       	ldd	r22, Y+21	; 0x15
    24c4:	7e 89       	ldd	r23, Y+22	; 0x16
    24c6:	8f 89       	ldd	r24, Y+23	; 0x17
    24c8:	98 8d       	ldd	r25, Y+24	; 0x18
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	3f ef       	ldi	r19, 0xFF	; 255
    24ce:	4f e7       	ldi	r20, 0x7F	; 127
    24d0:	57 e4       	ldi	r21, 0x47	; 71
    24d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24d6:	18 16       	cp	r1, r24
    24d8:	4c f5       	brge	.+82     	; 0x252c <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24da:	69 8d       	ldd	r22, Y+25	; 0x19
    24dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	40 e2       	ldi	r20, 0x20	; 32
    24e8:	51 e4       	ldi	r21, 0x41	; 65
    24ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	bc 01       	movw	r22, r24
    24f4:	cd 01       	movw	r24, r26
    24f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	9c 8b       	std	Y+20, r25	; 0x14
    2500:	8b 8b       	std	Y+19, r24	; 0x13
    2502:	0f c0       	rjmp	.+30     	; 0x2522 <LCD_displayCharacter+0x2ac>
    2504:	89 e1       	ldi	r24, 0x19	; 25
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	9a 8b       	std	Y+18, r25	; 0x12
    250a:	89 8b       	std	Y+17, r24	; 0x11
    250c:	89 89       	ldd	r24, Y+17	; 0x11
    250e:	9a 89       	ldd	r25, Y+18	; 0x12
    2510:	01 97       	sbiw	r24, 0x01	; 1
    2512:	f1 f7       	brne	.-4      	; 0x2510 <LCD_displayCharacter+0x29a>
    2514:	9a 8b       	std	Y+18, r25	; 0x12
    2516:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2518:	8b 89       	ldd	r24, Y+19	; 0x13
    251a:	9c 89       	ldd	r25, Y+20	; 0x14
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	9c 8b       	std	Y+20, r25	; 0x14
    2520:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2522:	8b 89       	ldd	r24, Y+19	; 0x13
    2524:	9c 89       	ldd	r25, Y+20	; 0x14
    2526:	00 97       	sbiw	r24, 0x00	; 0
    2528:	69 f7       	brne	.-38     	; 0x2504 <LCD_displayCharacter+0x28e>
    252a:	14 c0       	rjmp	.+40     	; 0x2554 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    252c:	6d 89       	ldd	r22, Y+21	; 0x15
    252e:	7e 89       	ldd	r23, Y+22	; 0x16
    2530:	8f 89       	ldd	r24, Y+23	; 0x17
    2532:	98 8d       	ldd	r25, Y+24	; 0x18
    2534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	9c 8b       	std	Y+20, r25	; 0x14
    253e:	8b 8b       	std	Y+19, r24	; 0x13
    2540:	8b 89       	ldd	r24, Y+19	; 0x13
    2542:	9c 89       	ldd	r25, Y+20	; 0x14
    2544:	98 8b       	std	Y+16, r25	; 0x10
    2546:	8f 87       	std	Y+15, r24	; 0x0f
    2548:	8f 85       	ldd	r24, Y+15	; 0x0f
    254a:	98 89       	ldd	r25, Y+16	; 0x10
    254c:	01 97       	sbiw	r24, 0x01	; 1
    254e:	f1 f7       	brne	.-4      	; 0x254c <LCD_displayCharacter+0x2d6>
    2550:	98 8b       	std	Y+16, r25	; 0x10
    2552:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2554:	83 e0       	ldi	r24, 0x03	; 3
    2556:	65 e0       	ldi	r22, 0x05	; 5
    2558:	40 e0       	ldi	r20, 0x00	; 0
    255a:	0e 94 4e 0b 	call	0x169c	; 0x169c <GPIO_writePin>
    255e:	80 e0       	ldi	r24, 0x00	; 0
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	a0 e8       	ldi	r26, 0x80	; 128
    2564:	bf e3       	ldi	r27, 0x3F	; 63
    2566:	8b 87       	std	Y+11, r24	; 0x0b
    2568:	9c 87       	std	Y+12, r25	; 0x0c
    256a:	ad 87       	std	Y+13, r26	; 0x0d
    256c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    256e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2570:	7c 85       	ldd	r23, Y+12	; 0x0c
    2572:	8d 85       	ldd	r24, Y+13	; 0x0d
    2574:	9e 85       	ldd	r25, Y+14	; 0x0e
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	4a e7       	ldi	r20, 0x7A	; 122
    257c:	53 e4       	ldi	r21, 0x43	; 67
    257e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	8f 83       	std	Y+7, r24	; 0x07
    2588:	98 87       	std	Y+8, r25	; 0x08
    258a:	a9 87       	std	Y+9, r26	; 0x09
    258c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    258e:	6f 81       	ldd	r22, Y+7	; 0x07
    2590:	78 85       	ldd	r23, Y+8	; 0x08
    2592:	89 85       	ldd	r24, Y+9	; 0x09
    2594:	9a 85       	ldd	r25, Y+10	; 0x0a
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	40 e8       	ldi	r20, 0x80	; 128
    259c:	5f e3       	ldi	r21, 0x3F	; 63
    259e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25a2:	88 23       	and	r24, r24
    25a4:	2c f4       	brge	.+10     	; 0x25b0 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	9e 83       	std	Y+6, r25	; 0x06
    25ac:	8d 83       	std	Y+5, r24	; 0x05
    25ae:	3f c0       	rjmp	.+126    	; 0x262e <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    25b0:	6f 81       	ldd	r22, Y+7	; 0x07
    25b2:	78 85       	ldd	r23, Y+8	; 0x08
    25b4:	89 85       	ldd	r24, Y+9	; 0x09
    25b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	3f ef       	ldi	r19, 0xFF	; 255
    25bc:	4f e7       	ldi	r20, 0x7F	; 127
    25be:	57 e4       	ldi	r21, 0x47	; 71
    25c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25c4:	18 16       	cp	r1, r24
    25c6:	4c f5       	brge	.+82     	; 0x261a <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    25cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	40 e2       	ldi	r20, 0x20	; 32
    25d6:	51 e4       	ldi	r21, 0x41	; 65
    25d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	bc 01       	movw	r22, r24
    25e2:	cd 01       	movw	r24, r26
    25e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	9e 83       	std	Y+6, r25	; 0x06
    25ee:	8d 83       	std	Y+5, r24	; 0x05
    25f0:	0f c0       	rjmp	.+30     	; 0x2610 <LCD_displayCharacter+0x39a>
    25f2:	89 e1       	ldi	r24, 0x19	; 25
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	9c 83       	std	Y+4, r25	; 0x04
    25f8:	8b 83       	std	Y+3, r24	; 0x03
    25fa:	8b 81       	ldd	r24, Y+3	; 0x03
    25fc:	9c 81       	ldd	r25, Y+4	; 0x04
    25fe:	01 97       	sbiw	r24, 0x01	; 1
    2600:	f1 f7       	brne	.-4      	; 0x25fe <LCD_displayCharacter+0x388>
    2602:	9c 83       	std	Y+4, r25	; 0x04
    2604:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2606:	8d 81       	ldd	r24, Y+5	; 0x05
    2608:	9e 81       	ldd	r25, Y+6	; 0x06
    260a:	01 97       	sbiw	r24, 0x01	; 1
    260c:	9e 83       	std	Y+6, r25	; 0x06
    260e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2610:	8d 81       	ldd	r24, Y+5	; 0x05
    2612:	9e 81       	ldd	r25, Y+6	; 0x06
    2614:	00 97       	sbiw	r24, 0x00	; 0
    2616:	69 f7       	brne	.-38     	; 0x25f2 <LCD_displayCharacter+0x37c>
    2618:	14 c0       	rjmp	.+40     	; 0x2642 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261a:	6f 81       	ldd	r22, Y+7	; 0x07
    261c:	78 85       	ldd	r23, Y+8	; 0x08
    261e:	89 85       	ldd	r24, Y+9	; 0x09
    2620:	9a 85       	ldd	r25, Y+10	; 0x0a
    2622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	9e 83       	std	Y+6, r25	; 0x06
    262c:	8d 83       	std	Y+5, r24	; 0x05
    262e:	8d 81       	ldd	r24, Y+5	; 0x05
    2630:	9e 81       	ldd	r25, Y+6	; 0x06
    2632:	9a 83       	std	Y+2, r25	; 0x02
    2634:	89 83       	std	Y+1, r24	; 0x01
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	9a 81       	ldd	r25, Y+2	; 0x02
    263a:	01 97       	sbiw	r24, 0x01	; 1
    263c:	f1 f7       	brne	.-4      	; 0x263a <LCD_displayCharacter+0x3c4>
    263e:	9a 83       	std	Y+2, r25	; 0x02
    2640:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2642:	e9 96       	adiw	r28, 0x39	; 57
    2644:	0f b6       	in	r0, 0x3f	; 63
    2646:	f8 94       	cli
    2648:	de bf       	out	0x3e, r29	; 62
    264a:	0f be       	out	0x3f, r0	; 63
    264c:	cd bf       	out	0x3d, r28	; 61
    264e:	cf 91       	pop	r28
    2650:	df 91       	pop	r29
    2652:	08 95       	ret

00002654 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2654:	df 93       	push	r29
    2656:	cf 93       	push	r28
    2658:	00 d0       	rcall	.+0      	; 0x265a <LCD_displayString+0x6>
    265a:	0f 92       	push	r0
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
    2660:	9b 83       	std	Y+3, r25	; 0x03
    2662:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2664:	19 82       	std	Y+1, r1	; 0x01
    2666:	0e c0       	rjmp	.+28     	; 0x2684 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2668:	89 81       	ldd	r24, Y+1	; 0x01
    266a:	28 2f       	mov	r18, r24
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	8a 81       	ldd	r24, Y+2	; 0x02
    2670:	9b 81       	ldd	r25, Y+3	; 0x03
    2672:	fc 01       	movw	r30, r24
    2674:	e2 0f       	add	r30, r18
    2676:	f3 1f       	adc	r31, r19
    2678:	80 81       	ld	r24, Z
    267a:	0e 94 3b 11 	call	0x2276	; 0x2276 <LCD_displayCharacter>
		i++;
    267e:	89 81       	ldd	r24, Y+1	; 0x01
    2680:	8f 5f       	subi	r24, 0xFF	; 255
    2682:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2684:	89 81       	ldd	r24, Y+1	; 0x01
    2686:	28 2f       	mov	r18, r24
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	8a 81       	ldd	r24, Y+2	; 0x02
    268c:	9b 81       	ldd	r25, Y+3	; 0x03
    268e:	fc 01       	movw	r30, r24
    2690:	e2 0f       	add	r30, r18
    2692:	f3 1f       	adc	r31, r19
    2694:	80 81       	ld	r24, Z
    2696:	88 23       	and	r24, r24
    2698:	39 f7       	brne	.-50     	; 0x2668 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	cf 91       	pop	r28
    26a2:	df 91       	pop	r29
    26a4:	08 95       	ret

000026a6 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    26a6:	df 93       	push	r29
    26a8:	cf 93       	push	r28
    26aa:	00 d0       	rcall	.+0      	; 0x26ac <LCD_moveCursor+0x6>
    26ac:	00 d0       	rcall	.+0      	; 0x26ae <LCD_moveCursor+0x8>
    26ae:	0f 92       	push	r0
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62
    26b4:	8a 83       	std	Y+2, r24	; 0x02
    26b6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    26b8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ba:	28 2f       	mov	r18, r24
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	3d 83       	std	Y+5, r19	; 0x05
    26c0:	2c 83       	std	Y+4, r18	; 0x04
    26c2:	8c 81       	ldd	r24, Y+4	; 0x04
    26c4:	9d 81       	ldd	r25, Y+5	; 0x05
    26c6:	81 30       	cpi	r24, 0x01	; 1
    26c8:	91 05       	cpc	r25, r1
    26ca:	c1 f0       	breq	.+48     	; 0x26fc <LCD_moveCursor+0x56>
    26cc:	2c 81       	ldd	r18, Y+4	; 0x04
    26ce:	3d 81       	ldd	r19, Y+5	; 0x05
    26d0:	22 30       	cpi	r18, 0x02	; 2
    26d2:	31 05       	cpc	r19, r1
    26d4:	2c f4       	brge	.+10     	; 0x26e0 <LCD_moveCursor+0x3a>
    26d6:	8c 81       	ldd	r24, Y+4	; 0x04
    26d8:	9d 81       	ldd	r25, Y+5	; 0x05
    26da:	00 97       	sbiw	r24, 0x00	; 0
    26dc:	61 f0       	breq	.+24     	; 0x26f6 <LCD_moveCursor+0x50>
    26de:	19 c0       	rjmp	.+50     	; 0x2712 <LCD_moveCursor+0x6c>
    26e0:	2c 81       	ldd	r18, Y+4	; 0x04
    26e2:	3d 81       	ldd	r19, Y+5	; 0x05
    26e4:	22 30       	cpi	r18, 0x02	; 2
    26e6:	31 05       	cpc	r19, r1
    26e8:	69 f0       	breq	.+26     	; 0x2704 <LCD_moveCursor+0x5e>
    26ea:	8c 81       	ldd	r24, Y+4	; 0x04
    26ec:	9d 81       	ldd	r25, Y+5	; 0x05
    26ee:	83 30       	cpi	r24, 0x03	; 3
    26f0:	91 05       	cpc	r25, r1
    26f2:	61 f0       	breq	.+24     	; 0x270c <LCD_moveCursor+0x66>
    26f4:	0e c0       	rjmp	.+28     	; 0x2712 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    26f6:	8b 81       	ldd	r24, Y+3	; 0x03
    26f8:	89 83       	std	Y+1, r24	; 0x01
    26fa:	0b c0       	rjmp	.+22     	; 0x2712 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    26fc:	8b 81       	ldd	r24, Y+3	; 0x03
    26fe:	80 5c       	subi	r24, 0xC0	; 192
    2700:	89 83       	std	Y+1, r24	; 0x01
    2702:	07 c0       	rjmp	.+14     	; 0x2712 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2704:	8b 81       	ldd	r24, Y+3	; 0x03
    2706:	80 5f       	subi	r24, 0xF0	; 240
    2708:	89 83       	std	Y+1, r24	; 0x01
    270a:	03 c0       	rjmp	.+6      	; 0x2712 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    270c:	8b 81       	ldd	r24, Y+3	; 0x03
    270e:	80 5b       	subi	r24, 0xB0	; 176
    2710:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2712:	89 81       	ldd	r24, Y+1	; 0x01
    2714:	80 68       	ori	r24, 0x80	; 128
    2716:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_sendCommand>
}
    271a:	0f 90       	pop	r0
    271c:	0f 90       	pop	r0
    271e:	0f 90       	pop	r0
    2720:	0f 90       	pop	r0
    2722:	0f 90       	pop	r0
    2724:	cf 91       	pop	r28
    2726:	df 91       	pop	r29
    2728:	08 95       	ret

0000272a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    272a:	df 93       	push	r29
    272c:	cf 93       	push	r28
    272e:	00 d0       	rcall	.+0      	; 0x2730 <LCD_displayStringRowColumn+0x6>
    2730:	00 d0       	rcall	.+0      	; 0x2732 <LCD_displayStringRowColumn+0x8>
    2732:	cd b7       	in	r28, 0x3d	; 61
    2734:	de b7       	in	r29, 0x3e	; 62
    2736:	89 83       	std	Y+1, r24	; 0x01
    2738:	6a 83       	std	Y+2, r22	; 0x02
    273a:	5c 83       	std	Y+4, r21	; 0x04
    273c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    273e:	89 81       	ldd	r24, Y+1	; 0x01
    2740:	6a 81       	ldd	r22, Y+2	; 0x02
    2742:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2746:	8b 81       	ldd	r24, Y+3	; 0x03
    2748:	9c 81       	ldd	r25, Y+4	; 0x04
    274a:	0e 94 2a 13 	call	0x2654	; 0x2654 <LCD_displayString>
}
    274e:	0f 90       	pop	r0
    2750:	0f 90       	pop	r0
    2752:	0f 90       	pop	r0
    2754:	0f 90       	pop	r0
    2756:	cf 91       	pop	r28
    2758:	df 91       	pop	r29
    275a:	08 95       	ret

0000275c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    275c:	df 93       	push	r29
    275e:	cf 93       	push	r28
    2760:	cd b7       	in	r28, 0x3d	; 61
    2762:	de b7       	in	r29, 0x3e	; 62
    2764:	62 97       	sbiw	r28, 0x12	; 18
    2766:	0f b6       	in	r0, 0x3f	; 63
    2768:	f8 94       	cli
    276a:	de bf       	out	0x3e, r29	; 62
    276c:	0f be       	out	0x3f, r0	; 63
    276e:	cd bf       	out	0x3d, r28	; 61
    2770:	9a 8b       	std	Y+18, r25	; 0x12
    2772:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2774:	89 89       	ldd	r24, Y+17	; 0x11
    2776:	9a 89       	ldd	r25, Y+18	; 0x12
    2778:	9e 01       	movw	r18, r28
    277a:	2f 5f       	subi	r18, 0xFF	; 255
    277c:	3f 4f       	sbci	r19, 0xFF	; 255
    277e:	b9 01       	movw	r22, r18
    2780:	4a e0       	ldi	r20, 0x0A	; 10
    2782:	50 e0       	ldi	r21, 0x00	; 0
    2784:	0e 94 48 15 	call	0x2a90	; 0x2a90 <itoa>
   LCD_displayString(buff); /* Display the string */
    2788:	ce 01       	movw	r24, r28
    278a:	01 96       	adiw	r24, 0x01	; 1
    278c:	0e 94 2a 13 	call	0x2654	; 0x2654 <LCD_displayString>
}
    2790:	62 96       	adiw	r28, 0x12	; 18
    2792:	0f b6       	in	r0, 0x3f	; 63
    2794:	f8 94       	cli
    2796:	de bf       	out	0x3e, r29	; 62
    2798:	0f be       	out	0x3f, r0	; 63
    279a:	cd bf       	out	0x3d, r28	; 61
    279c:	cf 91       	pop	r28
    279e:	df 91       	pop	r29
    27a0:	08 95       	ret

000027a2 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    27a2:	df 93       	push	r29
    27a4:	cf 93       	push	r28
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_sendCommand>
}
    27b0:	cf 91       	pop	r28
    27b2:	df 91       	pop	r29
    27b4:	08 95       	ret

000027b6 <__vector_13>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
ISR(USART_RXC_vect)
{
    27b6:	1f 92       	push	r1
    27b8:	0f 92       	push	r0
    27ba:	0f b6       	in	r0, 0x3f	; 63
    27bc:	0f 92       	push	r0
    27be:	11 24       	eor	r1, r1
    27c0:	8f 93       	push	r24
    27c2:	ef 93       	push	r30
    27c4:	ff 93       	push	r31
    27c6:	df 93       	push	r29
    27c8:	cf 93       	push	r28
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
	g_check=UDR;
    27ce:	ec e2       	ldi	r30, 0x2C	; 44
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	80 81       	ld	r24, Z
    27d4:	80 93 ee 00 	sts	0x00EE, r24
	g_flag=FALSE;
    27d8:	10 92 e6 00 	sts	0x00E6, r1
}
    27dc:	cf 91       	pop	r28
    27de:	df 91       	pop	r29
    27e0:	ff 91       	pop	r31
    27e2:	ef 91       	pop	r30
    27e4:	8f 91       	pop	r24
    27e6:	0f 90       	pop	r0
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	0f 90       	pop	r0
    27ec:	1f 90       	pop	r1
    27ee:	18 95       	reti

000027f0 <UART_init>:
void UART_init(const UART_ConfigType * Config_Ptr)
{
    27f0:	df 93       	push	r29
    27f2:	cf 93       	push	r28
    27f4:	00 d0       	rcall	.+0      	; 0x27f6 <UART_init+0x6>
    27f6:	00 d0       	rcall	.+0      	; 0x27f8 <UART_init+0x8>
    27f8:	cd b7       	in	r28, 0x3d	; 61
    27fa:	de b7       	in	r29, 0x3e	; 62
    27fc:	9c 83       	std	Y+4, r25	; 0x04
    27fe:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2800:	1a 82       	std	Y+2, r1	; 0x02
    2802:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2804:	eb e2       	ldi	r30, 0x2B	; 43
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	82 e0       	ldi	r24, 0x02	; 2
    280a:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN)|(1<<RXCIE);
    280c:	ea e2       	ldi	r30, 0x2A	; 42
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	88 e9       	ldi	r24, 0x98	; 152
    2812:	80 83       	st	Z, r24
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    2814:	e0 e4       	ldi	r30, 0x40	; 64
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	86 e8       	ldi	r24, 0x86	; 134
    281a:	80 83       	st	Z, r24
	UCSRC|=(Config_Ptr->parity);
    281c:	a0 e4       	ldi	r26, 0x40	; 64
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	e0 e4       	ldi	r30, 0x40	; 64
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	90 81       	ld	r25, Z
    2826:	eb 81       	ldd	r30, Y+3	; 0x03
    2828:	fc 81       	ldd	r31, Y+4	; 0x04
    282a:	81 81       	ldd	r24, Z+1	; 0x01
    282c:	89 2b       	or	r24, r25
    282e:	8c 93       	st	X, r24
	UCSRC|=(Config_Ptr->stop_bit);
    2830:	a0 e4       	ldi	r26, 0x40	; 64
    2832:	b0 e0       	ldi	r27, 0x00	; 0
    2834:	e0 e4       	ldi	r30, 0x40	; 64
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	90 81       	ld	r25, Z
    283a:	eb 81       	ldd	r30, Y+3	; 0x03
    283c:	fc 81       	ldd	r31, Y+4	; 0x04
    283e:	82 81       	ldd	r24, Z+2	; 0x02
    2840:	89 2b       	or	r24, r25
    2842:	8c 93       	st	X, r24
	UCSRC|=(Config_Ptr->bit_data);
    2844:	a0 e4       	ldi	r26, 0x40	; 64
    2846:	b0 e0       	ldi	r27, 0x00	; 0
    2848:	e0 e4       	ldi	r30, 0x40	; 64
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	90 81       	ld	r25, Z
    284e:	eb 81       	ldd	r30, Y+3	; 0x03
    2850:	fc 81       	ldd	r31, Y+4	; 0x04
    2852:	80 81       	ld	r24, Z
    2854:	89 2b       	or	r24, r25
    2856:	8c 93       	st	X, r24
	if(Config_Ptr->bit_data==BITS_9)
    2858:	eb 81       	ldd	r30, Y+3	; 0x03
    285a:	fc 81       	ldd	r31, Y+4	; 0x04
    285c:	80 81       	ld	r24, Z
    285e:	86 30       	cpi	r24, 0x06	; 6
    2860:	39 f4       	brne	.+14     	; 0x2870 <UART_init+0x80>
	{
		SET_BIT(UCSRC,UCSZ2);
    2862:	a0 e4       	ldi	r26, 0x40	; 64
    2864:	b0 e0       	ldi	r27, 0x00	; 0
    2866:	e0 e4       	ldi	r30, 0x40	; 64
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	80 81       	ld	r24, Z
    286c:	84 60       	ori	r24, 0x04	; 4
    286e:	8c 93       	st	X, r24
	}
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2870:	eb 81       	ldd	r30, Y+3	; 0x03
    2872:	fc 81       	ldd	r31, Y+4	; 0x04
    2874:	83 81       	ldd	r24, Z+3	; 0x03
    2876:	94 81       	ldd	r25, Z+4	; 0x04
    2878:	a5 81       	ldd	r26, Z+5	; 0x05
    287a:	b6 81       	ldd	r27, Z+6	; 0x06
    287c:	88 0f       	add	r24, r24
    287e:	99 1f       	adc	r25, r25
    2880:	aa 1f       	adc	r26, r26
    2882:	bb 1f       	adc	r27, r27
    2884:	88 0f       	add	r24, r24
    2886:	99 1f       	adc	r25, r25
    2888:	aa 1f       	adc	r26, r26
    288a:	bb 1f       	adc	r27, r27
    288c:	88 0f       	add	r24, r24
    288e:	99 1f       	adc	r25, r25
    2890:	aa 1f       	adc	r26, r26
    2892:	bb 1f       	adc	r27, r27
    2894:	9c 01       	movw	r18, r24
    2896:	ad 01       	movw	r20, r26
    2898:	80 e4       	ldi	r24, 0x40	; 64
    289a:	92 e4       	ldi	r25, 0x42	; 66
    289c:	af e0       	ldi	r26, 0x0F	; 15
    289e:	b0 e0       	ldi	r27, 0x00	; 0
    28a0:	bc 01       	movw	r22, r24
    28a2:	cd 01       	movw	r24, r26
    28a4:	0e 94 ef 14 	call	0x29de	; 0x29de <__udivmodsi4>
    28a8:	da 01       	movw	r26, r20
    28aa:	c9 01       	movw	r24, r18
    28ac:	01 97       	sbiw	r24, 0x01	; 1
    28ae:	9a 83       	std	Y+2, r25	; 0x02
    28b0:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    28b2:	e0 e4       	ldi	r30, 0x40	; 64
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	89 81       	ldd	r24, Y+1	; 0x01
    28b8:	9a 81       	ldd	r25, Y+2	; 0x02
    28ba:	89 2f       	mov	r24, r25
    28bc:	99 27       	eor	r25, r25
    28be:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    28c0:	e9 e2       	ldi	r30, 0x29	; 41
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	89 81       	ldd	r24, Y+1	; 0x01
    28c6:	80 83       	st	Z, r24
}
    28c8:	0f 90       	pop	r0
    28ca:	0f 90       	pop	r0
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0
    28d0:	cf 91       	pop	r28
    28d2:	df 91       	pop	r29
    28d4:	08 95       	ret

000028d6 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    28d6:	df 93       	push	r29
    28d8:	cf 93       	push	r28
    28da:	0f 92       	push	r0
    28dc:	cd b7       	in	r28, 0x3d	; 61
    28de:	de b7       	in	r29, 0x3e	; 62
    28e0:	89 83       	std	Y+1, r24	; 0x01

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    28e2:	ec e2       	ldi	r30, 0x2C	; 44
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	89 81       	ldd	r24, Y+1	; 0x01
    28e8:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    28ea:	0f 90       	pop	r0
    28ec:	cf 91       	pop	r28
    28ee:	df 91       	pop	r29
    28f0:	08 95       	ret

000028f2 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    28f2:	df 93       	push	r29
    28f4:	cf 93       	push	r28
    28f6:	cd b7       	in	r28, 0x3d	; 61
    28f8:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    28fa:	ec e2       	ldi	r30, 0x2C	; 44
    28fc:	f0 e0       	ldi	r31, 0x00	; 0
    28fe:	80 81       	ld	r24, Z
}
    2900:	cf 91       	pop	r28
    2902:	df 91       	pop	r29
    2904:	08 95       	ret

00002906 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2906:	df 93       	push	r29
    2908:	cf 93       	push	r28
    290a:	00 d0       	rcall	.+0      	; 0x290c <UART_sendString+0x6>
    290c:	0f 92       	push	r0
    290e:	cd b7       	in	r28, 0x3d	; 61
    2910:	de b7       	in	r29, 0x3e	; 62
    2912:	9b 83       	std	Y+3, r25	; 0x03
    2914:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2916:	19 82       	std	Y+1, r1	; 0x01
    2918:	0e c0       	rjmp	.+28     	; 0x2936 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    291a:	89 81       	ldd	r24, Y+1	; 0x01
    291c:	28 2f       	mov	r18, r24
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	8a 81       	ldd	r24, Y+2	; 0x02
    2922:	9b 81       	ldd	r25, Y+3	; 0x03
    2924:	fc 01       	movw	r30, r24
    2926:	e2 0f       	add	r30, r18
    2928:	f3 1f       	adc	r31, r19
    292a:	80 81       	ld	r24, Z
    292c:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <UART_sendByte>
		i++;
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	8f 5f       	subi	r24, 0xFF	; 255
    2934:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2936:	89 81       	ldd	r24, Y+1	; 0x01
    2938:	28 2f       	mov	r18, r24
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	8a 81       	ldd	r24, Y+2	; 0x02
    293e:	9b 81       	ldd	r25, Y+3	; 0x03
    2940:	fc 01       	movw	r30, r24
    2942:	e2 0f       	add	r30, r18
    2944:	f3 1f       	adc	r31, r19
    2946:	80 81       	ld	r24, Z
    2948:	88 23       	and	r24, r24
    294a:	39 f7       	brne	.-50     	; 0x291a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    294c:	0f 90       	pop	r0
    294e:	0f 90       	pop	r0
    2950:	0f 90       	pop	r0
    2952:	cf 91       	pop	r28
    2954:	df 91       	pop	r29
    2956:	08 95       	ret

00002958 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2958:	0f 93       	push	r16
    295a:	1f 93       	push	r17
    295c:	df 93       	push	r29
    295e:	cf 93       	push	r28
    2960:	00 d0       	rcall	.+0      	; 0x2962 <UART_receiveString+0xa>
    2962:	0f 92       	push	r0
    2964:	cd b7       	in	r28, 0x3d	; 61
    2966:	de b7       	in	r29, 0x3e	; 62
    2968:	9b 83       	std	Y+3, r25	; 0x03
    296a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    296c:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    296e:	89 81       	ldd	r24, Y+1	; 0x01
    2970:	28 2f       	mov	r18, r24
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	8a 81       	ldd	r24, Y+2	; 0x02
    2976:	9b 81       	ldd	r25, Y+3	; 0x03
    2978:	8c 01       	movw	r16, r24
    297a:	02 0f       	add	r16, r18
    297c:	13 1f       	adc	r17, r19
    297e:	0e 94 79 14 	call	0x28f2	; 0x28f2 <UART_recieveByte>
    2982:	f8 01       	movw	r30, r16
    2984:	80 83       	st	Z, r24
    2986:	0f c0       	rjmp	.+30     	; 0x29a6 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2988:	89 81       	ldd	r24, Y+1	; 0x01
    298a:	8f 5f       	subi	r24, 0xFF	; 255
    298c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    298e:	89 81       	ldd	r24, Y+1	; 0x01
    2990:	28 2f       	mov	r18, r24
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	8a 81       	ldd	r24, Y+2	; 0x02
    2996:	9b 81       	ldd	r25, Y+3	; 0x03
    2998:	8c 01       	movw	r16, r24
    299a:	02 0f       	add	r16, r18
    299c:	13 1f       	adc	r17, r19
    299e:	0e 94 79 14 	call	0x28f2	; 0x28f2 <UART_recieveByte>
    29a2:	f8 01       	movw	r30, r16
    29a4:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    29a6:	89 81       	ldd	r24, Y+1	; 0x01
    29a8:	28 2f       	mov	r18, r24
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	8a 81       	ldd	r24, Y+2	; 0x02
    29ae:	9b 81       	ldd	r25, Y+3	; 0x03
    29b0:	fc 01       	movw	r30, r24
    29b2:	e2 0f       	add	r30, r18
    29b4:	f3 1f       	adc	r31, r19
    29b6:	80 81       	ld	r24, Z
    29b8:	83 32       	cpi	r24, 0x23	; 35
    29ba:	31 f7       	brne	.-52     	; 0x2988 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    29bc:	89 81       	ldd	r24, Y+1	; 0x01
    29be:	28 2f       	mov	r18, r24
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	8a 81       	ldd	r24, Y+2	; 0x02
    29c4:	9b 81       	ldd	r25, Y+3	; 0x03
    29c6:	fc 01       	movw	r30, r24
    29c8:	e2 0f       	add	r30, r18
    29ca:	f3 1f       	adc	r31, r19
    29cc:	10 82       	st	Z, r1
}
    29ce:	0f 90       	pop	r0
    29d0:	0f 90       	pop	r0
    29d2:	0f 90       	pop	r0
    29d4:	cf 91       	pop	r28
    29d6:	df 91       	pop	r29
    29d8:	1f 91       	pop	r17
    29da:	0f 91       	pop	r16
    29dc:	08 95       	ret

000029de <__udivmodsi4>:
    29de:	a1 e2       	ldi	r26, 0x21	; 33
    29e0:	1a 2e       	mov	r1, r26
    29e2:	aa 1b       	sub	r26, r26
    29e4:	bb 1b       	sub	r27, r27
    29e6:	fd 01       	movw	r30, r26
    29e8:	0d c0       	rjmp	.+26     	; 0x2a04 <__udivmodsi4_ep>

000029ea <__udivmodsi4_loop>:
    29ea:	aa 1f       	adc	r26, r26
    29ec:	bb 1f       	adc	r27, r27
    29ee:	ee 1f       	adc	r30, r30
    29f0:	ff 1f       	adc	r31, r31
    29f2:	a2 17       	cp	r26, r18
    29f4:	b3 07       	cpc	r27, r19
    29f6:	e4 07       	cpc	r30, r20
    29f8:	f5 07       	cpc	r31, r21
    29fa:	20 f0       	brcs	.+8      	; 0x2a04 <__udivmodsi4_ep>
    29fc:	a2 1b       	sub	r26, r18
    29fe:	b3 0b       	sbc	r27, r19
    2a00:	e4 0b       	sbc	r30, r20
    2a02:	f5 0b       	sbc	r31, r21

00002a04 <__udivmodsi4_ep>:
    2a04:	66 1f       	adc	r22, r22
    2a06:	77 1f       	adc	r23, r23
    2a08:	88 1f       	adc	r24, r24
    2a0a:	99 1f       	adc	r25, r25
    2a0c:	1a 94       	dec	r1
    2a0e:	69 f7       	brne	.-38     	; 0x29ea <__udivmodsi4_loop>
    2a10:	60 95       	com	r22
    2a12:	70 95       	com	r23
    2a14:	80 95       	com	r24
    2a16:	90 95       	com	r25
    2a18:	9b 01       	movw	r18, r22
    2a1a:	ac 01       	movw	r20, r24
    2a1c:	bd 01       	movw	r22, r26
    2a1e:	cf 01       	movw	r24, r30
    2a20:	08 95       	ret

00002a22 <__prologue_saves__>:
    2a22:	2f 92       	push	r2
    2a24:	3f 92       	push	r3
    2a26:	4f 92       	push	r4
    2a28:	5f 92       	push	r5
    2a2a:	6f 92       	push	r6
    2a2c:	7f 92       	push	r7
    2a2e:	8f 92       	push	r8
    2a30:	9f 92       	push	r9
    2a32:	af 92       	push	r10
    2a34:	bf 92       	push	r11
    2a36:	cf 92       	push	r12
    2a38:	df 92       	push	r13
    2a3a:	ef 92       	push	r14
    2a3c:	ff 92       	push	r15
    2a3e:	0f 93       	push	r16
    2a40:	1f 93       	push	r17
    2a42:	cf 93       	push	r28
    2a44:	df 93       	push	r29
    2a46:	cd b7       	in	r28, 0x3d	; 61
    2a48:	de b7       	in	r29, 0x3e	; 62
    2a4a:	ca 1b       	sub	r28, r26
    2a4c:	db 0b       	sbc	r29, r27
    2a4e:	0f b6       	in	r0, 0x3f	; 63
    2a50:	f8 94       	cli
    2a52:	de bf       	out	0x3e, r29	; 62
    2a54:	0f be       	out	0x3f, r0	; 63
    2a56:	cd bf       	out	0x3d, r28	; 61
    2a58:	09 94       	ijmp

00002a5a <__epilogue_restores__>:
    2a5a:	2a 88       	ldd	r2, Y+18	; 0x12
    2a5c:	39 88       	ldd	r3, Y+17	; 0x11
    2a5e:	48 88       	ldd	r4, Y+16	; 0x10
    2a60:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a62:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a64:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a66:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a68:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a6a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a6c:	b9 84       	ldd	r11, Y+9	; 0x09
    2a6e:	c8 84       	ldd	r12, Y+8	; 0x08
    2a70:	df 80       	ldd	r13, Y+7	; 0x07
    2a72:	ee 80       	ldd	r14, Y+6	; 0x06
    2a74:	fd 80       	ldd	r15, Y+5	; 0x05
    2a76:	0c 81       	ldd	r16, Y+4	; 0x04
    2a78:	1b 81       	ldd	r17, Y+3	; 0x03
    2a7a:	aa 81       	ldd	r26, Y+2	; 0x02
    2a7c:	b9 81       	ldd	r27, Y+1	; 0x01
    2a7e:	ce 0f       	add	r28, r30
    2a80:	d1 1d       	adc	r29, r1
    2a82:	0f b6       	in	r0, 0x3f	; 63
    2a84:	f8 94       	cli
    2a86:	de bf       	out	0x3e, r29	; 62
    2a88:	0f be       	out	0x3f, r0	; 63
    2a8a:	cd bf       	out	0x3d, r28	; 61
    2a8c:	ed 01       	movw	r28, r26
    2a8e:	08 95       	ret

00002a90 <itoa>:
    2a90:	fb 01       	movw	r30, r22
    2a92:	9f 01       	movw	r18, r30
    2a94:	e8 94       	clt
    2a96:	42 30       	cpi	r20, 0x02	; 2
    2a98:	c4 f0       	brlt	.+48     	; 0x2aca <itoa+0x3a>
    2a9a:	45 32       	cpi	r20, 0x25	; 37
    2a9c:	b4 f4       	brge	.+44     	; 0x2aca <itoa+0x3a>
    2a9e:	4a 30       	cpi	r20, 0x0A	; 10
    2aa0:	29 f4       	brne	.+10     	; 0x2aac <itoa+0x1c>
    2aa2:	97 fb       	bst	r25, 7
    2aa4:	1e f4       	brtc	.+6      	; 0x2aac <itoa+0x1c>
    2aa6:	90 95       	com	r25
    2aa8:	81 95       	neg	r24
    2aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    2aac:	64 2f       	mov	r22, r20
    2aae:	77 27       	eor	r23, r23
    2ab0:	0e 94 79 15 	call	0x2af2	; 0x2af2 <__udivmodhi4>
    2ab4:	80 5d       	subi	r24, 0xD0	; 208
    2ab6:	8a 33       	cpi	r24, 0x3A	; 58
    2ab8:	0c f0       	brlt	.+2      	; 0x2abc <itoa+0x2c>
    2aba:	89 5d       	subi	r24, 0xD9	; 217
    2abc:	81 93       	st	Z+, r24
    2abe:	cb 01       	movw	r24, r22
    2ac0:	00 97       	sbiw	r24, 0x00	; 0
    2ac2:	a1 f7       	brne	.-24     	; 0x2aac <itoa+0x1c>
    2ac4:	16 f4       	brtc	.+4      	; 0x2aca <itoa+0x3a>
    2ac6:	5d e2       	ldi	r21, 0x2D	; 45
    2ac8:	51 93       	st	Z+, r21
    2aca:	10 82       	st	Z, r1
    2acc:	c9 01       	movw	r24, r18
    2ace:	0c 94 69 15 	jmp	0x2ad2	; 0x2ad2 <strrev>

00002ad2 <strrev>:
    2ad2:	dc 01       	movw	r26, r24
    2ad4:	fc 01       	movw	r30, r24
    2ad6:	67 2f       	mov	r22, r23
    2ad8:	71 91       	ld	r23, Z+
    2ada:	77 23       	and	r23, r23
    2adc:	e1 f7       	brne	.-8      	; 0x2ad6 <strrev+0x4>
    2ade:	32 97       	sbiw	r30, 0x02	; 2
    2ae0:	04 c0       	rjmp	.+8      	; 0x2aea <strrev+0x18>
    2ae2:	7c 91       	ld	r23, X
    2ae4:	6d 93       	st	X+, r22
    2ae6:	70 83       	st	Z, r23
    2ae8:	62 91       	ld	r22, -Z
    2aea:	ae 17       	cp	r26, r30
    2aec:	bf 07       	cpc	r27, r31
    2aee:	c8 f3       	brcs	.-14     	; 0x2ae2 <strrev+0x10>
    2af0:	08 95       	ret

00002af2 <__udivmodhi4>:
    2af2:	aa 1b       	sub	r26, r26
    2af4:	bb 1b       	sub	r27, r27
    2af6:	51 e1       	ldi	r21, 0x11	; 17
    2af8:	07 c0       	rjmp	.+14     	; 0x2b08 <__udivmodhi4_ep>

00002afa <__udivmodhi4_loop>:
    2afa:	aa 1f       	adc	r26, r26
    2afc:	bb 1f       	adc	r27, r27
    2afe:	a6 17       	cp	r26, r22
    2b00:	b7 07       	cpc	r27, r23
    2b02:	10 f0       	brcs	.+4      	; 0x2b08 <__udivmodhi4_ep>
    2b04:	a6 1b       	sub	r26, r22
    2b06:	b7 0b       	sbc	r27, r23

00002b08 <__udivmodhi4_ep>:
    2b08:	88 1f       	adc	r24, r24
    2b0a:	99 1f       	adc	r25, r25
    2b0c:	5a 95       	dec	r21
    2b0e:	a9 f7       	brne	.-22     	; 0x2afa <__udivmodhi4_loop>
    2b10:	80 95       	com	r24
    2b12:	90 95       	com	r25
    2b14:	bc 01       	movw	r22, r24
    2b16:	cd 01       	movw	r24, r26
    2b18:	08 95       	ret

00002b1a <_exit>:
    2b1a:	f8 94       	cli

00002b1c <__stop_program>:
    2b1c:	ff cf       	rjmp	.-2      	; 0x2b1c <__stop_program>
